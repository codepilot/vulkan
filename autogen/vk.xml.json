[
	{
		"nodeName": "registry",
		"attributes": [],
		"childNodes": [
			"\n    ",
			{
				"nodeName": "comment",
				"attributes": [],
				"childNodes": [
					"\nCopyright (c) 2015-2016 The Khronos Group Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and/or associated documentation files (the\n\"Materials\"), to deal in the Materials without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Materials, and to\npermit persons to whom the Materials are furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Materials.\n\nTHE MATERIALS ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nMATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.\n\n------------------------------------------------------------------------\n\nThis file, vk.xml, is the Vulkan API Registry. It is a critically important\nand normative part of the Vulkan Specification, including a canonical\nmachine-readable definition of the API, parameter and member validation\nlanguage incorporated into the Specification and reference pages, and other\nmaterial which is registered by Khronos, such as tags used by extension and\nlayer authors. The only authoritative version of vk.xml is the one\nmaintained in the master branch of the Khronos Vulkan Github project.\n    "
				]
			},
			"\n\n    ",
			{
				"comment": " SECTION: Vulkan vendor IDs for physical devices without PCI vendor IDs "
			},
			"\n    ",
			{
				"nodeName": "vendorids",
				"attributes": [],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "vendorid",
						"attributes": [
							{
								"name": "name",
								"value": "KHR"
							},
							{
								"name": "id",
								"value": "0x10000"
							},
							{
								"name": "comment",
								"value": "This is the next available Khronos vendor ID"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "vendorid",
						"attributes": [
							{
								"name": "name",
								"value": "VIV"
							},
							{
								"name": "id",
								"value": "0x10001"
							},
							{
								"name": "comment",
								"value": "Vivante vendor ID"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "vendorid",
						"attributes": [
							{
								"name": "name",
								"value": "VSI"
							},
							{
								"name": "id",
								"value": "0x10002"
							},
							{
								"name": "comment",
								"value": "VeriSilicon vendor ID"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n\n    ",
			{
				"comment": " SECTION: Vulkan vendor/author tags for extensions and layers "
			},
			"\n    ",
			{
				"nodeName": "tags",
				"attributes": [],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "tag",
						"attributes": [
							{
								"name": "name",
								"value": "IMG"
							},
							{
								"name": "author",
								"value": "Imagination Technologies"
							},
							{
								"name": "contact",
								"value": "Michael Worcester @michaelworcester"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "tag",
						"attributes": [
							{
								"name": "name",
								"value": "AMD"
							},
							{
								"name": "author",
								"value": "Advanced Micro Devices, Inc."
							},
							{
								"name": "contact",
								"value": "Daniel Rakos @aqnuep"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "tag",
						"attributes": [
							{
								"name": "name",
								"value": "ARM"
							},
							{
								"name": "author",
								"value": "ARM Limited"
							},
							{
								"name": "contact",
								"value": "Jan-Harald Fredriksen @janharald"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "tag",
						"attributes": [
							{
								"name": "name",
								"value": "FSL"
							},
							{
								"name": "author",
								"value": "Freescale Semiconductor, Inc."
							},
							{
								"name": "contact",
								"value": "Norbert Nopper @FslNopper"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "tag",
						"attributes": [
							{
								"name": "name",
								"value": "BRCM"
							},
							{
								"name": "author",
								"value": "Broadcom Corporation"
							},
							{
								"name": "contact",
								"value": "Graeme Leese @gnl21"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "tag",
						"attributes": [
							{
								"name": "name",
								"value": "NXP"
							},
							{
								"name": "author",
								"value": "NXP Semiconductors N.V."
							},
							{
								"name": "contact",
								"value": "Norbert Nopper @FslNopper"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "tag",
						"attributes": [
							{
								"name": "name",
								"value": "NV"
							},
							{
								"name": "author",
								"value": "NVIDIA Corporation"
							},
							{
								"name": "contact",
								"value": "Daniel Koch @dgkoch"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "tag",
						"attributes": [
							{
								"name": "name",
								"value": "NVX"
							},
							{
								"name": "author",
								"value": "NVIDIA Corporation"
							},
							{
								"name": "contact",
								"value": "Daniel Koch @dgkoch"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "tag",
						"attributes": [
							{
								"name": "name",
								"value": "VIV"
							},
							{
								"name": "author",
								"value": "Vivante Corporation"
							},
							{
								"name": "contact",
								"value": "Yanjun Zhang @yanjunzhang"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "tag",
						"attributes": [
							{
								"name": "name",
								"value": "VSI"
							},
							{
								"name": "author",
								"value": "VeriSilicon Holdings Co., Ltd."
							},
							{
								"name": "contact",
								"value": "Yanjun Zhang @yanjunzhang"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "tag",
						"attributes": [
							{
								"name": "name",
								"value": "KDAB"
							},
							{
								"name": "author",
								"value": "KDAB"
							},
							{
								"name": "contact",
								"value": "Sean Harmer @seanharmer"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "tag",
						"attributes": [
							{
								"name": "name",
								"value": "ANDROID"
							},
							{
								"name": "author",
								"value": "Google, Inc."
							},
							{
								"name": "contact",
								"value": "Jesse Hall @jessehall"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "tag",
						"attributes": [
							{
								"name": "name",
								"value": "CHROMIUM"
							},
							{
								"name": "author",
								"value": "Google, Inc."
							},
							{
								"name": "contact",
								"value": "Jesse Hall @jessehall"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "tag",
						"attributes": [
							{
								"name": "name",
								"value": "GOOGLE"
							},
							{
								"name": "author",
								"value": "Google, Inc."
							},
							{
								"name": "contact",
								"value": "Jesse Hall @jessehall"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "tag",
						"attributes": [
							{
								"name": "name",
								"value": "QCOM"
							},
							{
								"name": "author",
								"value": "Qualcomm Technologies, Inc."
							},
							{
								"name": "contact",
								"value": "Maurice Ribble @mribble"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "tag",
						"attributes": [
							{
								"name": "name",
								"value": "LUNARG"
							},
							{
								"name": "author",
								"value": "LunarG, Inc."
							},
							{
								"name": "contact",
								"value": "Karen Ghavam @KarenGhavam"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "tag",
						"attributes": [
							{
								"name": "name",
								"value": "SAMSUNG"
							},
							{
								"name": "author",
								"value": "Samsung Electronics Co., Ltd."
							},
							{
								"name": "contact",
								"value": "Alon Or-bach @alonorbach"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "tag",
						"attributes": [
							{
								"name": "name",
								"value": "SEC"
							},
							{
								"name": "author",
								"value": "Samsung Electronics Co., Ltd."
							},
							{
								"name": "contact",
								"value": "Alon Or-bach @alonorbach"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "tag",
						"attributes": [
							{
								"name": "name",
								"value": "TIZEN"
							},
							{
								"name": "author",
								"value": "Samsung Electronics Co., Ltd."
							},
							{
								"name": "contact",
								"value": "Alon Or-bach @alonorbach"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "tag",
						"attributes": [
							{
								"name": "name",
								"value": "RENDERDOC"
							},
							{
								"name": "author",
								"value": "RenderDoc (renderdoc.org)"
							},
							{
								"name": "contact",
								"value": "baldurk@baldurk.org"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n\n    ",
			{
				"comment": " SECTION: Vulkan type definitions "
			},
			"\n    ",
			{
				"nodeName": "types",
				"attributes": [],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "vk_platform"
							},
							{
								"name": "category",
								"value": "include"
							}
						],
						"childNodes": [
							"#include \"vk_platform.h\""
						]
					},
					"\n            ",
					{
						"comment": " WSI extensions "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "include"
							}
						],
						"childNodes": [
							"#include \"",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"vulkan.h"
								]
							},
							"\""
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "include"
							}
						],
						"childNodes": [
							"#include <",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"X11/Xlib.h"
								]
							},
							"&gt;"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "include"
							}
						],
						"childNodes": [
							"#include <",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"android/native_window.h"
								]
							},
							"&gt;"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "include"
							}
						],
						"childNodes": [
							"#include <",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"mir_toolkit/client_types.h"
								]
							},
							"&gt;"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "include"
							}
						],
						"childNodes": [
							"#include <",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"wayland-client.h"
								]
							},
							"&gt;"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "include"
							}
						],
						"childNodes": [
							"#include <",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"windows.h"
								]
							},
							"&gt;"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "include"
							}
						],
						"childNodes": [
							"#include <",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"xcb/xcb.h"
								]
							},
							"&gt;"
						]
					},
					"\n\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "X11/Xlib.h"
							},
							{
								"name": "name",
								"value": "Display"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "X11/Xlib.h"
							},
							{
								"name": "name",
								"value": "VisualID"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "X11/Xlib.h"
							},
							{
								"name": "name",
								"value": "Window"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "android/native_window.h"
							},
							{
								"name": "name",
								"value": "ANativeWindow"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "mir_toolkit/client_types.h"
							},
							{
								"name": "name",
								"value": "MirConnection"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "mir_toolkit/client_types.h"
							},
							{
								"name": "name",
								"value": "MirSurface"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "wayland-client.h"
							},
							{
								"name": "name",
								"value": "wl_display"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "wayland-client.h"
							},
							{
								"name": "name",
								"value": "wl_surface"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "windows.h"
							},
							{
								"name": "name",
								"value": "HINSTANCE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "windows.h"
							},
							{
								"name": "name",
								"value": "HWND"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "xcb/xcb.h"
							},
							{
								"name": "name",
								"value": "xcb_connection_t"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "xcb/xcb.h"
							},
							{
								"name": "name",
								"value": "xcb_visualid_t"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "xcb/xcb.h"
							},
							{
								"name": "name",
								"value": "xcb_window_t"
							}
						],
						"childNodes": []
					},
					"\n\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "define"
							}
						],
						"childNodes": [
							"#define ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VK_MAKE_VERSION"
								]
							},
							"(major, minor, patch) \\\n    (((major) << 22) | ((minor) << 12) | (patch))"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "define"
							}
						],
						"childNodes": [
							"#define ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VK_VERSION_MAJOR"
								]
							},
							"(version) ((uint32_t)(version) >> 22)"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "define"
							}
						],
						"childNodes": [
							"#define ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VK_VERSION_MINOR"
								]
							},
							"(version) (((uint32_t)(version) >> 12) & 0x3ff)"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "define"
							}
						],
						"childNodes": [
							"#define ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VK_VERSION_PATCH"
								]
							},
							"(version) ((uint32_t)(version) & 0xfff)"
						]
					},
					"\n\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "define"
							}
						],
						"childNodes": [
							"// Vulkan API version supported by this file\n#define ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VK_API_VERSION"
								]
							},
							" ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_MAKE_VERSION"
								]
							},
							"(1, 0, 4)"
						]
					},
					"\n\n\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "define"
							}
						],
						"childNodes": [
							"\n#define ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_HANDLE"
								]
							},
							"(object) typedef struct object##_T* object;"
						]
					},
					"\n\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "define"
							},
							{
								"name": "name",
								"value": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
							}
						],
						"childNodes": [
							"\n#if defined(__LP64__) || defined(_WIN64) || defined(__x86_64__) || defined(_M_X64) || defined(__ia64) || defined (_M_IA64) || defined(__aarch64__) || defined(__powerpc64__)\n        #define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef struct object##_T *object;\n#else\n        #define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef uint64_t object;\n#endif\n        "
						]
					},
					"\n\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "define"
							}
						],
						"childNodes": [
							"\n#define ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VK_NULL_HANDLE"
								]
							},
							" 0\n        "
						]
					},
					"\n\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "basetype"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"uint32_t"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkSampleMask"
								]
							},
							";"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "basetype"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"uint32_t"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkBool32"
								]
							},
							";"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "basetype"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"uint32_t"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							";"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "basetype"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"uint64_t"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkDeviceSize"
								]
							},
							";"
						]
					},
					"\n        ",
					{
						"comment": " Basic C types, pulled in via vk_platform.h "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "vk_platform"
							},
							{
								"name": "name",
								"value": "void"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "vk_platform"
							},
							{
								"name": "name",
								"value": "char"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "vk_platform"
							},
							{
								"name": "name",
								"value": "float"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "vk_platform"
							},
							{
								"name": "name",
								"value": "uint8_t"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "vk_platform"
							},
							{
								"name": "name",
								"value": "uint32_t"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "vk_platform"
							},
							{
								"name": "name",
								"value": "uint64_t"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "vk_platform"
							},
							{
								"name": "name",
								"value": "int32_t"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "vk_platform"
							},
							{
								"name": "name",
								"value": "size_t"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"comment": " Bitfield types "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkFramebufferCreateFlags"
								]
							},
							";"
						]
					},
					"               ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkQueryPoolCreateFlags"
								]
							},
							";"
						]
					},
					"                 ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkRenderPassCreateFlags"
								]
							},
							";"
						]
					},
					"                ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkSamplerCreateFlags"
								]
							},
							";"
						]
					},
					"                   ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkPipelineLayoutCreateFlags"
								]
							},
							";"
						]
					},
					"            ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkPipelineCacheCreateFlags"
								]
							},
							";"
						]
					},
					"             ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkPipelineDepthStencilStateCreateFlags"
								]
							},
							";"
						]
					},
					" ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkPipelineDynamicStateCreateFlags"
								]
							},
							";"
						]
					},
					"      ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkPipelineColorBlendStateCreateFlags"
								]
							},
							";"
						]
					},
					"   ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkPipelineMultisampleStateCreateFlags"
								]
							},
							";"
						]
					},
					"  ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkPipelineRasterizationStateCreateFlags"
								]
							},
							";"
						]
					},
					"       ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkPipelineViewportStateCreateFlags"
								]
							},
							";"
						]
					},
					"     ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkPipelineTessellationStateCreateFlags"
								]
							},
							";"
						]
					},
					" ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkPipelineInputAssemblyStateCreateFlags"
								]
							},
							";"
						]
					},
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkPipelineVertexInputStateCreateFlags"
								]
							},
							";"
						]
					},
					"  ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkPipelineShaderStageCreateFlags"
								]
							},
							";"
						]
					},
					"       ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkDescriptorSetLayoutCreateFlags"
								]
							},
							";"
						]
					},
					"       ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkBufferViewCreateFlags"
								]
							},
							";"
						]
					},
					"                ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkInstanceCreateFlags"
								]
							},
							";"
						]
					},
					"                  ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkDeviceCreateFlags"
								]
							},
							";"
						]
					},
					"                    ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkDeviceQueueCreateFlags"
								]
							},
							";"
						]
					},
					"               ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkQueueFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkQueueFlags"
								]
							},
							";"
						]
					},
					"                       ",
					{
						"comment": " Queue capabilities "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkMemoryPropertyFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkMemoryPropertyFlags"
								]
							},
							";"
						]
					},
					"              ",
					{
						"comment": " Memory properties passed into vkAllocateMemory(). "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkMemoryHeapFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkMemoryHeapFlags"
								]
							},
							";"
						]
					},
					"                  ",
					{
						"comment": " Memory heap flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkAccessFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkAccessFlags"
								]
							},
							";"
						]
					},
					"                      ",
					{
						"comment": " Memory access flags passed to barrier/dependency operations "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkBufferUsageFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkBufferUsageFlags"
								]
							},
							";"
						]
					},
					"                 ",
					{
						"comment": " Buffer usage flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkBufferCreateFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkBufferCreateFlags"
								]
							},
							";"
						]
					},
					"                ",
					{
						"comment": " Buffer creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkShaderStageFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkShaderStageFlags"
								]
							},
							";"
						]
					},
					"                 ",
					{
						"comment": " Shader stage flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkImageUsageFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkImageUsageFlags"
								]
							},
							";"
						]
					},
					"                  ",
					{
						"comment": " Image usage flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkImageCreateFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkImageCreateFlags"
								]
							},
							";"
						]
					},
					"                 ",
					{
						"comment": " Image creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkImageViewCreateFlags"
								]
							},
							";"
						]
					},
					"             ",
					{
						"comment": " Image view creation flags (no bits yet) "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkPipelineCreateFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkPipelineCreateFlags"
								]
							},
							";"
						]
					},
					"              ",
					{
						"comment": " Pipeline creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkColorComponentFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkColorComponentFlags"
								]
							},
							";"
						]
					},
					"              ",
					{
						"comment": " Color component flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkFenceCreateFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkFenceCreateFlags"
								]
							},
							";"
						]
					},
					"                 ",
					{
						"comment": " Fence creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkSemaphoreCreateFlags"
								]
							},
							";"
						]
					},
					"             ",
					{
						"comment": " Semaphore creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkFormatFeatureFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkFormatFeatureFlags"
								]
							},
							";"
						]
					},
					"               ",
					{
						"comment": " Format capability flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkQueryControlFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkQueryControlFlags"
								]
							},
							";"
						]
					},
					"                ",
					{
						"comment": " Query control flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkQueryResultFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkQueryResultFlags"
								]
							},
							";"
						]
					},
					"                 ",
					{
						"comment": " Query result flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkShaderModuleCreateFlags"
								]
							},
							";"
						]
					},
					"          ",
					{
						"comment": " Shader module creation flags (no bits yet) "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkEventCreateFlags"
								]
							},
							";"
						]
					},
					"                 ",
					{
						"comment": " Event creation flags  (no bits yet) "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkCommandPoolCreateFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkCommandPoolCreateFlags"
								]
							},
							";"
						]
					},
					"               ",
					{
						"comment": " Command pool creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkCommandPoolResetFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkCommandPoolResetFlags"
								]
							},
							";"
						]
					},
					"                ",
					{
						"comment": " Command pool reset flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkCommandBufferResetFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkCommandBufferResetFlags"
								]
							},
							";"
						]
					},
					"              ",
					{
						"comment": " Command buffer reset flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkCommandBufferUsageFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkCommandBufferUsageFlags"
								]
							},
							";"
						]
					},
					"              ",
					{
						"comment": " Command buffer usage flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkQueryPipelineStatisticFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkQueryPipelineStatisticFlags"
								]
							},
							";"
						]
					},
					"      ",
					{
						"comment": " Pipeline statistics flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkMemoryMapFlags"
								]
							},
							";"
						]
					},
					"                   ",
					{
						"comment": " Memory mapping flags (no bits yet) "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkImageAspectFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkImageAspectFlags"
								]
							},
							";"
						]
					},
					"                 ",
					{
						"comment": " Bitfield of image aspects "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkSparseMemoryBindFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkSparseMemoryBindFlags"
								]
							},
							";"
						]
					},
					"            ",
					{
						"comment": " Sparse memory bind flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkSparseImageFormatFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkSparseImageFormatFlags"
								]
							},
							";"
						]
					},
					"           ",
					{
						"comment": " Sparse image memory requirements flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkSubpassDescriptionFlags"
								]
							},
							";"
						]
					},
					"          ",
					{
						"comment": " Subpass description flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkPipelineStageFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkPipelineStageFlags"
								]
							},
							";"
						]
					},
					"               ",
					{
						"comment": " Pipeline stages "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkSampleCountFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkSampleCountFlags"
								]
							},
							";"
						]
					},
					"                 ",
					{
						"comment": " Pipeline stages "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkAttachmentDescriptionFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkAttachmentDescriptionFlags"
								]
							},
							";"
						]
					},
					"       ",
					{
						"comment": " Render pass attachment description flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkStencilFaceFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkStencilFaceFlags"
								]
							},
							";"
						]
					},
					"                 ",
					{
						"comment": " Stencil face flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkCullModeFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkCullModeFlags"
								]
							},
							";"
						]
					},
					"                    ",
					{
						"comment": " Cull mode flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkDescriptorPoolCreateFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkDescriptorPoolCreateFlags"
								]
							},
							";"
						]
					},
					"        ",
					{
						"comment": " Descriptor pool creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkDescriptorPoolResetFlags"
								]
							},
							";"
						]
					},
					"         ",
					{
						"comment": " Descriptor pool reset flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkDependencyFlagBits"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkDependencyFlags"
								]
							},
							";"
						]
					},
					"                  ",
					{
						"comment": " Pipeline barrier and subpass dependency flags "
					},
					"\n            ",
					{
						"comment": " WSI extensions "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkCompositeAlphaFlagBitsKHR"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkCompositeAlphaFlagsKHR"
								]
							},
							";"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkDisplayPlaneAlphaFlagBitsKHR"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkDisplayPlaneAlphaFlagsKHR"
								]
							},
							";"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkSurfaceTransformFlagBitsKHR"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkSurfaceTransformFlagsKHR"
								]
							},
							";"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkSwapchainCreateFlagsKHR"
								]
							},
							";"
						]
					},
					"          ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkDisplayModeCreateFlagsKHR"
								]
							},
							";"
						]
					},
					"        ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkDisplaySurfaceCreateFlagsKHR"
								]
							},
							";"
						]
					},
					"     ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkAndroidSurfaceCreateFlagsKHR"
								]
							},
							";"
						]
					},
					"     ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkMirSurfaceCreateFlagsKHR"
								]
							},
							";"
						]
					},
					"         ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkWaylandSurfaceCreateFlagsKHR"
								]
							},
							";"
						]
					},
					"     ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkWin32SurfaceCreateFlagsKHR"
								]
							},
							";"
						]
					},
					"       ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkXlibSurfaceCreateFlagsKHR"
								]
							},
							";"
						]
					},
					"        ",
					{
						"comment": " creation flags "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkXcbSurfaceCreateFlagsKHR"
								]
							},
							";"
						]
					},
					"         ",
					{
						"comment": " creation flags "
					},
					"\n\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "requires",
								"value": "VkDebugReportFlagBitsEXT"
							},
							{
								"name": "category",
								"value": "bitmask"
							}
						],
						"childNodes": [
							"typedef ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkFlags"
								]
							},
							" ",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkDebugReportFlagsEXT"
								]
							},
							";"
						]
					},
					"\n\n        ",
					{
						"comment": " Types which can be void pointers or class pointers, selected at compile time "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkInstance"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkInstance"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkPhysicalDevice"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkPhysicalDevice"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkDevice"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkDevice"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkQueue"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkCommandPool"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkCommandBuffer"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkDevice"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_NON_DISPATCHABLE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkDeviceMemory"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkDevice"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_NON_DISPATCHABLE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkCommandPool"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkDevice"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_NON_DISPATCHABLE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkBuffer"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkDevice"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_NON_DISPATCHABLE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkBufferView"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkDevice"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_NON_DISPATCHABLE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkImage"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkDevice"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_NON_DISPATCHABLE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkImageView"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkDevice"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_NON_DISPATCHABLE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkShaderModule"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkDevice"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_NON_DISPATCHABLE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkPipeline"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkDevice"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_NON_DISPATCHABLE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkPipelineLayout"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkDevice"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_NON_DISPATCHABLE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkSampler"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkDescriptorPool"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_NON_DISPATCHABLE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkDescriptorSet"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkDevice"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_NON_DISPATCHABLE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkDescriptorSetLayout"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkDevice"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_NON_DISPATCHABLE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkDescriptorPool"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkDevice"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_NON_DISPATCHABLE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkFence"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkDevice"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_NON_DISPATCHABLE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkSemaphore"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkDevice"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_NON_DISPATCHABLE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkEvent"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkDevice"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_NON_DISPATCHABLE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkQueryPool"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkDevice"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_NON_DISPATCHABLE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkFramebuffer"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkDevice"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_NON_DISPATCHABLE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkRenderPass"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkDevice"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_NON_DISPATCHABLE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkPipelineCache"
								]
							},
							")"
						]
					},
					"\n\n        ",
					{
						"comment": " WSI extensions "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_NON_DISPATCHABLE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkDisplayKHR"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkPhysicalDevice,VkDisplayKHR"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_NON_DISPATCHABLE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkDisplayModeKHR"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkInstance"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_NON_DISPATCHABLE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkSurfaceKHR"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkSurfaceKHR"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_NON_DISPATCHABLE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkSwapchainKHR"
								]
							},
							")"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "handle"
							},
							{
								"name": "parent",
								"value": "VkInstance"
							}
						],
						"childNodes": [
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VK_DEFINE_NON_DISPATCHABLE_HANDLE"
								]
							},
							"(",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"VkDebugReportCallbackEXT"
								]
							},
							")"
						]
					},
					"\n\n        ",
					{
						"comment": " Types generated from corresponding <enums> tags below "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkAttachmentLoadOp"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkAttachmentStoreOp"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkBlendFactor"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkBlendOp"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkBorderColor"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkFramebufferCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkQueryPoolCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkRenderPassCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkSamplerCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkPipelineCacheHeaderVersion"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkPipelineLayoutCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkPipelineCacheCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkPipelineDepthStencilStateCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkPipelineDynamicStateCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkPipelineColorBlendStateCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkPipelineMultisampleStateCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkPipelineRasterizationStateCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkPipelineViewportStateCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkPipelineTessellationStateCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkPipelineInputAssemblyStateCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkPipelineVertexInputStateCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkPipelineShaderStageCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkDescriptorSetLayoutCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkBufferViewCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkInstanceCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkDeviceQueueCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkBufferCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkBufferUsageFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkColorComponentFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkComponentSwizzle"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkCommandPoolCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkCommandPoolResetFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkCommandBufferResetFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkCommandBufferLevel"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkCommandBufferUsageFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkCompareOp"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkCullModeFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkDescriptorType"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkDeviceCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkDynamicState"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkFenceCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkPolygonMode"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkFormat"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkFormatFeatureFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkFrontFace"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkImageAspectFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkImageCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkImageLayout"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkImageTiling"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkImageType"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkImageUsageFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkImageViewType"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkSharingMode"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkIndexType"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkLogicOp"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkMemoryHeapFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkAccessFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkMemoryPropertyFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkPhysicalDeviceType"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkPipelineBindPoint"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkPipelineCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkPrimitiveTopology"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkQueryControlFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkQueryPipelineStatisticFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkQueryResultFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkQueryType"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkQueueFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkSubpassContents"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkResult"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkShaderStageFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkSparseMemoryBindFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkStencilFaceFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkStencilOp"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkStructureType"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkSystemAllocationScope"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkInternalAllocationType"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkSamplerAddressMode"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkFilter"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkSamplerMipmapMode"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkVertexInputRate"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkPipelineStageFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkSparseImageFormatFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkSampleCountFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkAttachmentDescriptionFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkDescriptorPoolCreateFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkDependencyFlagBits"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"comment": " WSI extensions "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkColorSpaceKHR"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkCompositeAlphaFlagBitsKHR"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkDisplayPlaneAlphaFlagBitsKHR"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkPresentModeKHR"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkSurfaceTransformFlagBitsKHR"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkDebugReportFlagBitsEXT"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkDebugReportObjectTypeEXT"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "name",
								"value": "VkDebugReportErrorEXT"
							},
							{
								"name": "category",
								"value": "enum"
							}
						],
						"childNodes": []
					},
					"\n\n        ",
					{
						"comment": " The PFN_vk*Function types are used by VkAllocationCallbacks below "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "funcpointer"
							}
						],
						"childNodes": [
							"typedef void (VKAPI_PTR *",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"PFN_vkInternalAllocationNotification"
								]
							},
							")(\n    ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"void"
								]
							},
							"*                                       pUserData,\n    ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"size_t"
								]
							},
							"                                      size,\n    ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkInternalAllocationType"
								]
							},
							"                    allocationType,\n    ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkSystemAllocationScope"
								]
							},
							"                     allocationScope);"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "funcpointer"
							}
						],
						"childNodes": [
							"typedef void (VKAPI_PTR *",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"PFN_vkInternalFreeNotification"
								]
							},
							")(\n    ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"void"
								]
							},
							"*                                       pUserData,\n    ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"size_t"
								]
							},
							"                                      size,\n    ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkInternalAllocationType"
								]
							},
							"                    allocationType,\n    ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkSystemAllocationScope"
								]
							},
							"                     allocationScope);"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "funcpointer"
							}
						],
						"childNodes": [
							"typedef void* (VKAPI_PTR *",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"PFN_vkReallocationFunction"
								]
							},
							")(\n    ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"void"
								]
							},
							"*                                       pUserData,\n    ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"void"
								]
							},
							"*                                       pOriginal,\n    ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"size_t"
								]
							},
							"                                      size,\n    ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"size_t"
								]
							},
							"                                      alignment,\n    ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkSystemAllocationScope"
								]
							},
							"                     allocationScope);"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "funcpointer"
							}
						],
						"childNodes": [
							"typedef void* (VKAPI_PTR *",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"PFN_vkAllocationFunction"
								]
							},
							")(\n    ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"void"
								]
							},
							"*                                       pUserData,\n    ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"size_t"
								]
							},
							"                                      size,\n    ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"size_t"
								]
							},
							"                                      alignment,\n    ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkSystemAllocationScope"
								]
							},
							"                     allocationScope);"
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "funcpointer"
							}
						],
						"childNodes": [
							"typedef void (VKAPI_PTR *",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"PFN_vkFreeFunction"
								]
							},
							")(\n    ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"void"
								]
							},
							"*                                       pUserData,\n    ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"void"
								]
							},
							"*                                       pMemory);"
						]
					},
					"\n\n    ",
					{
						"comment": " The PFN_vkVoidFunction type are used by VkGet*ProcAddr below "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "funcpointer"
							}
						],
						"childNodes": [
							"typedef void (VKAPI_PTR *",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"PFN_vkVoidFunction"
								]
							},
							")(void);"
						]
					},
					"\n\n    ",
					{
						"comment": " The PFN_vkDebugReportCallbackEXT type are used by the DEBUG_REPORT extension"
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "funcpointer"
							}
						],
						"childNodes": [
							"typedef VkBool32 (VKAPI_PTR *",
							{
								"nodeName": "name",
								"attributes": [],
								"childNodes": [
									"PFN_vkDebugReportCallbackEXT"
								]
							},
							")(\n    ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkDebugReportFlagsEXT"
								]
							},
							"                       flags,\n    ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"VkDebugReportObjectTypeEXT"
								]
							},
							"                  objectType,\n    ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"uint64_t"
								]
							},
							"                                    object,\n    ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"size_t"
								]
							},
							"                                      location,\n    ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"int32_t"
								]
							},
							"                                     messageCode,\n    const ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"char"
								]
							},
							"*                                 pLayerPrefix,\n    const ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"char"
								]
							},
							"*                                 pMessage,\n    ",
							{
								"nodeName": "type",
								"attributes": [],
								"childNodes": [
									"void"
								]
							},
							"*                                       pUserData);"
						]
					},
					"\n\n        ",
					{
						"comment": " Struct types "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkOffset2D"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"int32_t"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"x"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"int32_t"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"y"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkOffset3D"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"int32_t"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"x"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"int32_t"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"y"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"int32_t"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"z"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkExtent2D"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"width"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"height"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkExtent3D"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"width"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"height"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"depth"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkViewport"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"x"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"y"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"width"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"height"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"minDepth"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxDepth"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:width must: be greater than `0.0` and less than or equal to sname:VkPhysicalDeviceLimits::pname:maxViewportDimensions[0]"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:height must: be greater than `0.0` and less than or equal to sname:VkPhysicalDeviceLimits::pname:maxViewportDimensions[1]"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:x and pname:y must: each be between pname:viewportBoundsRange[0] and pname:viewportBoundsRange[1], inclusive"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:x + pname:width must: be less than or equal to pname:viewportBoundsRange[1]"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:y + pname:height must: be less than or equal to pname:viewportBoundsRange[1]"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:minDepth must: be between `0.0` and `1.0`, inclusive"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:maxDepth must: be between `0.0` and `1.0`, inclusive"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkRect2D"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkOffset2D"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"offset"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkExtent2D"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"extent"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkRect3D"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkOffset3D"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"offset"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkExtent3D"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"extent"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkClearRect"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkRect2D"
										]
									},
									"       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"rect"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"baseArrayLayer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"layerCount"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkComponentMapping"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkComponentSwizzle"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"r"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkComponentSwizzle"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"g"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkComponentSwizzle"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"b"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkComponentSwizzle"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"a"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkPhysicalDeviceProperties"
							},
							{
								"name": "returnedonly",
								"value": "true"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"apiVersion"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"driverVersion"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vendorID"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"deviceID"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDeviceType"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"deviceType"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"char"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"deviceName"
										]
									},
									"[",
									{
										"nodeName": "enum",
										"attributes": [],
										"childNodes": [
											"VK_MAX_PHYSICAL_DEVICE_NAME_SIZE"
										]
									},
									"]"
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint8_t"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pipelineCacheUUID"
										]
									},
									"[",
									{
										"nodeName": "enum",
										"attributes": [],
										"childNodes": [
											"VK_UUID_SIZE"
										]
									},
									"]"
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDeviceLimits"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"limits"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDeviceSparseProperties"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sparseProperties"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkExtensionProperties"
							},
							{
								"name": "returnedonly",
								"value": "true"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"char"
										]
									},
									"            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"extensionName"
										]
									},
									"[",
									{
										"nodeName": "enum",
										"attributes": [],
										"childNodes": [
											"VK_MAX_EXTENSION_NAME_SIZE"
										]
									},
									"]"
								]
							},
							" ",
							{
								"comment": " extension name "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"specVersion"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " version of the extension specification implemented "
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkLayerProperties"
							},
							{
								"name": "returnedonly",
								"value": "true"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"char"
										]
									},
									"            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"layerName"
										]
									},
									"[",
									{
										"nodeName": "enum",
										"attributes": [],
										"childNodes": [
											"VK_MAX_EXTENSION_NAME_SIZE"
										]
									},
									"]"
								]
							},
							" ",
							{
								"comment": " layer name "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"specVersion"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " version of the layer specification implemented "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"implementationVersion"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " build or release version of the layer's library "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"char"
										]
									},
									"            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"description"
										]
									},
									"[",
									{
										"nodeName": "enum",
										"attributes": [],
										"childNodes": [
											"VK_MAX_DESCRIPTION_SIZE"
										]
									},
									"]"
								]
							},
							" ",
							{
								"comment": " Free-form description of the layer "
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkApplicationInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Type of structure. Should be VK_STRUCTURE_TYPE_APPLICATION_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "null-terminated"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"char"
										]
									},
									"*     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pApplicationName"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"applicationVersion"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "null-terminated"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"char"
										]
									},
									"*     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pEngineName"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"engineVersion"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"apiVersion"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:apiVersion must: be zero, or otherwise it must: be a version that the implementation supports, or supports an effective substitute for"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkAllocationCallbacks"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pUserData"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"PFN_vkAllocationFunction"
										]
									},
									"   ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pfnAllocation"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"PFN_vkReallocationFunction"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pfnReallocation"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"PFN_vkFreeFunction"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pfnFree"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"PFN_vkInternalAllocationNotification"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pfnInternalAllocation"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"PFN_vkInternalFreeNotification"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pfnInternalFree"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:pfnAllocation must: be a pointer to a valid user-defined PFN_vkAllocationFunction"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:pfnReallocation must: be a pointer to a valid user-defined PFN_vkReallocationFunction"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:pfnFree must: be a pointer to a valid user-defined PFN_vkFreeFunction"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If either of pname:pfnInternalAllocatione or pname:pfnInternalFree is not `NULL`, both must: be valid callbacks"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkDeviceQueueCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Should be VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceQueueCreateFlags"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"              ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queueFamilyIndex"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queueCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "queueCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"*    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pQueuePriorities"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:queueFamilyIndex must: be less than the value of pname:pQueueFamilyPropertyCount returned by fname:vkGetPhysicalDeviceQueueFamilyProperties"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:queueCount must: be less than or equal to the value of the pname:queueCount member of the sname:VkQueueFamilyProperties structure, as returned by fname:vkGetPhysicalDeviceQueueFamilyProperties in the pname:pQueueFamilyProperties[pname:queueFamilyIndex]"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of any given element of pname:pQueuePriorities must: be between `0.0` and `1.0` inclusive"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkDeviceCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Should be VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceCreateFlags"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                   ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queueCreateInfoCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "queueCreateInfoCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceQueueCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pQueueCreateInfos"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"enabledLayerCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "enabledLayerCount,null-terminated"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"char"
										]
									},
									"* const*      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"ppEnabledLayerNames"
										]
									}
								]
							},
							"            ",
							{
								"comment": " Ordered list of layer names to be enabled "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"enabledExtensionCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "enabledExtensionCount,null-terminated"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"char"
										]
									},
									"* const*      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"ppEnabledExtensionNames"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDeviceFeatures"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pEnabledFeatures"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:ppEnabledLayerNames must: be the name of a layer present on the system, exactly matching a string returned in the sname:VkLayerProperties structure by fname:vkEnumerateDeviceLayerProperties"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:ppEnabledExtensionNames must: be the name of an extension present on the system, exactly matching a string returned in the sname:VkExtensionProperties structure by fname:vkEnumerateDeviceExtensionProperties"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If an extension listed in pname:ppEnabledExtensionNames is provided as part of a layer, then both the layer and extension must: be enabled to enable that extension"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The pname:queueFamilyIndex member of any given element of pname:pQueueCreateInfos must: be unique within pname:pQueueCreateInfos"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkInstanceCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Should be VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkInstanceCreateFlags"
										]
									},
									"  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkApplicationInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pApplicationInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"enabledLayerCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "enabledLayerCount,null-terminated"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"char"
										]
									},
									"* const*      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"ppEnabledLayerNames"
										]
									}
								]
							},
							"            ",
							{
								"comment": " Ordered list of layer names to be enabled "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"enabledExtensionCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "enabledExtensionCount,null-terminated"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"char"
										]
									},
									"* const*      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"ppEnabledExtensionNames"
										]
									}
								]
							},
							"        ",
							{
								"comment": " Extension names to be enabled "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:ppEnabledLayerNames must: be the name of a layer present on the system, exactly matching a string returned in the sname:VkLayerProperties structure by fname:vkEnumerateInstanceLayerProperties"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:ppEnabledExtensionNames must: be the name of an extension present on the system, exactly matching a string returned in the sname:VkExtensionProperties structure by fname:vkEnumerateInstanceExtensionProperties"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If an extension listed in pname:ppEnabledExtensionNames is provided as part of a layer, then both the layer and extension must: be enabled to enable that extension"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkQueueFamilyProperties"
							},
							{
								"name": "returnedonly",
								"value": "true"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkQueueFlags"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queueFlags"
										]
									}
								]
							},
							"                     ",
							{
								"comment": " Queue flags "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queueCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"timestampValidBits"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkExtent3D"
										]
									},
									"             ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"minImageTransferGranularity"
										]
									}
								]
							},
							"    ",
							{
								"comment": " Minimum alignment requirement for image transfers "
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkPhysicalDeviceMemoryProperties"
							},
							{
								"name": "returnedonly",
								"value": "true"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"memoryTypeCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkMemoryType"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"memoryTypes"
										]
									},
									"[",
									{
										"nodeName": "enum",
										"attributes": [],
										"childNodes": [
											"VK_MAX_MEMORY_TYPES"
										]
									},
									"]"
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"memoryHeapCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkMemoryHeap"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"memoryHeaps"
										]
									},
									"[",
									{
										"nodeName": "enum",
										"attributes": [],
										"childNodes": [
											"VK_MAX_MEMORY_HEAPS"
										]
									},
									"]"
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkMemoryAllocateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"allocationSize"
										]
									}
								]
							},
							"                 ",
							{
								"comment": " Size of memory allocation "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"memoryTypeIndex"
										]
									}
								]
							},
							"                ",
							{
								"comment": " Index of the of the memory type to allocate from "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:allocationSize must: be less than or equal to the amount of memory available to the sname:VkMemoryHeap specified by pname:memoryTypeIndex and the calling command's sname:VkDevice"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:allocationSize must: be greater than `0`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkMemoryRequirements"
							},
							{
								"name": "returnedonly",
								"value": "true"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"size"
										]
									}
								]
							},
							"                           ",
							{
								"comment": " Specified in bytes "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"alignment"
										]
									}
								]
							},
							"                      ",
							{
								"comment": " Specified in bytes "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"memoryTypeBits"
										]
									}
								]
							},
							"                 ",
							{
								"comment": " Bitfield of the allowed memory type indices into memoryTypes[] for this object "
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkSparseImageFormatProperties"
							},
							{
								"name": "returnedonly",
								"value": "true"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageAspectFlags"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"aspectMask"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkExtent3D"
										]
									},
									"             ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"imageGranularity"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSparseImageFormatFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkSparseImageMemoryRequirements"
							},
							{
								"name": "returnedonly",
								"value": "true"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSparseImageFormatProperties"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"formatProperties"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"imageMipTailFirstLod"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"imageMipTailSize"
										]
									}
								]
							},
							"               ",
							{
								"comment": " Specified in bytes, must be a multiple of image block size / alignment "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"imageMipTailOffset"
										]
									}
								]
							},
							"             ",
							{
								"comment": " Specified in bytes, must be a multiple of image block size / alignment "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"imageMipTailStride"
										]
									}
								]
							},
							"             ",
							{
								"comment": " Specified in bytes, must be a multiple of image block size / alignment "
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkMemoryType"
							},
							{
								"name": "returnedonly",
								"value": "true"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkMemoryPropertyFlags"
										]
									},
									"  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"propertyFlags"
										]
									}
								]
							},
							"                  ",
							{
								"comment": " Memory properties of this memory type "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"heapIndex"
										]
									}
								]
							},
							"                      ",
							{
								"comment": " Index of the memory heap allocations of this memory type are taken from "
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkMemoryHeap"
							},
							{
								"name": "returnedonly",
								"value": "true"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"size"
										]
									}
								]
							},
							"                           ",
							{
								"comment": " Available memory in the heap"
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkMemoryHeapFlags"
										]
									},
									"      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Flags for the heap"
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkMappedMemoryRange"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceMemory"
										]
									},
									"         ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"memory"
										]
									}
								]
							},
							"                            ",
							{
								"comment": " Mapped memory object "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"offset"
										]
									}
								]
							},
							"                         ",
							{
								"comment": " Offset within the mapped memory the range starts from "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"size"
										]
									}
								]
							},
							"                           ",
							{
								"comment": " Size of the range within the mapped memory "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:memory must: currently be mapped"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:offset must: be less than the size of the currently mapped range of pname:memory"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:size is not equal to ename:VK_WHOLE_SIZE, the sum of pname:offset and pname:size must: be less than or equal to the size of the currently mapped range of pname:memory"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:offset and pname:size must: each be a multiple of sname:VkPhysicalDeviceLimits::pname:nonCoherentAtomSize"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkFormatProperties"
							},
							{
								"name": "returnedonly",
								"value": "true"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFormatFeatureFlags"
										]
									},
									"   ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"linearTilingFeatures"
										]
									}
								]
							},
							"           ",
							{
								"comment": " Format features in case of linear tiling "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFormatFeatureFlags"
										]
									},
									"   ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"optimalTilingFeatures"
										]
									}
								]
							},
							"          ",
							{
								"comment": " Format features in case of optimal tiling "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFormatFeatureFlags"
										]
									},
									"   ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"bufferFeatures"
										]
									}
								]
							},
							"                 ",
							{
								"comment": " Format features supported by buffers "
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkImageFormatProperties"
							},
							{
								"name": "returnedonly",
								"value": "true"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkExtent3D"
										]
									},
									"             ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxExtent"
										]
									}
								]
							},
							"                      ",
							{
								"comment": " max image dimensions for this resource type "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxMipLevels"
										]
									}
								]
							},
							"                   ",
							{
								"comment": " max number of mipmap levels for this resource type "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxArrayLayers"
										]
									}
								]
							},
							"                 ",
							{
								"comment": " max array size for this resource type "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSampleCountFlags"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sampleCounts"
										]
									}
								]
							},
							"                   ",
							{
								"comment": " supported sample counts for this resource type "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxResourceSize"
										]
									}
								]
							},
							"                ",
							{
								"comment": " max size (in bytes) of this resource type "
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkDescriptorBufferInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBuffer"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"buffer"
										]
									}
								]
							},
							"                         ",
							{
								"comment": " Buffer used for this descriptor slot when the descriptor is UNIFORM_BUFFER[_DYNAMIC] or STORAGE_BUFFER[_DYNAMIC]. VK_NULL_HANDLE otherwise. "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"offset"
										]
									}
								]
							},
							"                         ",
							{
								"comment": " Base offset from buffer start in bytes to update in the descriptor set. "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"range"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Size in bytes of the buffer resource for this descriptor update. "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:range is not equal to ename:VK_WHOLE_SIZE, the sum of pname:offset and pname:range must: be less than or equal to the size of pname:buffer"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkDescriptorImageInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "noautovalidity",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSampler"
										]
									},
									"       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sampler"
										]
									}
								]
							},
							"                        ",
							{
								"comment": " Sampler to write to the descriptor in case it's a SAMPLER or COMBINED_IMAGE_SAMPLER descriptor. Ignored otherwise. "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "noautovalidity",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageView"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"imageView"
										]
									}
								]
							},
							"                      ",
							{
								"comment": " Image view to write to the descriptor in case it's a SAMPLED_IMAGE, STORAGE_IMAGE, COMBINED_IMAGE_SAMPLER, or INPUT_ATTACHMENT descriptor. Ignored otherwise. "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "noautovalidity",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageLayout"
										]
									},
									"   ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"imageLayout"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Layout the image is expected to be in when accessed using this descriptor (only used if imageView is not VK_NULL_HANDLE). "
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkWriteDescriptorSet"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorSet"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstSet"
										]
									}
								]
							},
							"                        ",
							{
								"comment": " Destination descriptor set "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstBinding"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Binding within the destination descriptor set to write "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstArrayElement"
										]
									}
								]
							},
							"               ",
							{
								"comment": " Array element within the destination binding to write "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"descriptorCount"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Number of descriptors to write (determines the size of the array pointed by pDescriptors) "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorType"
										]
									},
									"       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"descriptorType"
										]
									}
								]
							},
							"                 ",
							{
								"comment": " Descriptor type to write (determines which members of the array pointed by pDescriptors are going to be used) "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "noautovalidity",
										"value": "true"
									},
									{
										"name": "len",
										"value": "descriptorCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorImageInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pImageInfo"
										]
									}
								]
							},
							"               ",
							{
								"comment": " Sampler, image view, and layout for SAMPLER, COMBINED_IMAGE_SAMPLER, {SAMPLED,STORAGE}_IMAGE, and INPUT_ATTACHMENT descriptor types. "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "noautovalidity",
										"value": "true"
									},
									{
										"name": "len",
										"value": "descriptorCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorBufferInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pBufferInfo"
										]
									}
								]
							},
							"             ",
							{
								"comment": " Raw buffer, size, and offset for {UNIFORM,STORAGE}_BUFFER[_DYNAMIC] descriptor types. "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "noautovalidity",
										"value": "true"
									},
									{
										"name": "len",
										"value": "descriptorCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBufferView"
										]
									},
									"*    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pTexelBufferView"
										]
									}
								]
							},
							"               ",
							{
								"comment": " Buffer view to write to the descriptor for {UNIFORM,STORAGE}_TEXEL_BUFFER descriptor types. "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstBinding must: be a valid binding point within pname:dstSet"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:descriptorType must: match the type of pname:dstBinding within pname:dstSet"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The sum of pname:dstArrayElement and pname:descriptorCount must: be less than or equal to the number of array elements in the descriptor set binding specified by pname:dstBinding, and all applicable consecutive bindings, as described by <<descriptorsets-updates-consecutive>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_SAMPLER, ename:VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, ename:VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, ename:VK_DESCRIPTOR_TYPE_STORAGE_IMAGE or ename:VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, pname:pImageInfo must: be a pointer to an array of pname:descriptorCount valid sname:VkDescriptorImageInfo structures"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER or ename:VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER, pname:pTexelBufferView must: be a pointer to an array of pname:descriptorCount valid sname:VkBufferView handles"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, ename:VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, ename:VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC or ename:VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, pname:pBufferInfo must: be a pointer to an array of pname:descriptorCount valid sname:VkDescriptorBufferInfo structures"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_SAMPLER or ename:VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, and pname:dstSet was not created with a layout that included immutable samplers for pname:dstBinding with pname:descriptorType, the pname:sampler member of any given element of pname:pImageInfo must: be a valid sname:VkSampler object"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, ename:VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, ename:VK_DESCRIPTOR_TYPE_STORAGE_IMAGE or ename:VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, the pname:imageView and pname:imageLayout members of any given element of pname:pImageInfo must: be a valid sname:VkImageView and elink:VkImageLayout, respectively"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER or ename:VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, the pname:offset member of any given element of pname:pBufferInfo must: be a multiple of the value of sname:VkPhysicalDeviceLimits::pname:minUniformBufferOffsetAlignment"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_STORAGE_BUFFER or ename:VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, the pname:offset member of any given element of pname:pBufferInfo must: be a multiple of the value of sname:VkPhysicalDeviceLimits::pname:minStorageBufferOffsetAlignment"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER or ename:VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, the pname:buffer member of any given element of pname:pBufferInfo must: have been created with ename:VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_STORAGE_BUFFER or ename:VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, the pname:buffer member of any given element of pname:pBufferInfo must: have been created with ename:VK_BUFFER_USAGE_STORAGE_BUFFER_BIT set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER or ename:VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, the pname:range member of any given element of pname:pBufferInfo must: be less than or equal to the value of sname:VkPhysicalDeviceLimits::pname:maxUniformBufferRange"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_STORAGE_BUFFER or ename:VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, the pname:range member of any given element of pname:pBufferInfo must: be less than or equal to the value of sname:VkPhysicalDeviceLimits::pname:maxStorageBufferRange"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER, the sname:VkBuffer that pname:pTexelBufferView was created from must: have been created with ename:VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER, the sname:VkBuffer that pname:pTexelBufferView was created from must: have been created with ename:VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_STORAGE_IMAGE or ename:VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, the pname:imageView must: have been created with identity swizzle"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkCopyDescriptorSet"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorSet"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcSet"
										]
									}
								]
							},
							"                         ",
							{
								"comment": " Source descriptor set "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcBinding"
										]
									}
								]
							},
							"                     ",
							{
								"comment": " Binding within the source descriptor set to copy from "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcArrayElement"
										]
									}
								]
							},
							"                ",
							{
								"comment": " Array element within the source binding to copy from "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorSet"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstSet"
										]
									}
								]
							},
							"                        ",
							{
								"comment": " Destination descriptor set "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstBinding"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Binding within the destination descriptor set to copy to "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstArrayElement"
										]
									}
								]
							},
							"               ",
							{
								"comment": " Array element within the destination binding to copy to "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"descriptorCount"
										]
									}
								]
							},
							"                ",
							{
								"comment": " Number of descriptors to write (determines the size of the array pointed by pDescriptors) "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:srcBinding must: be a valid binding within pname:srcSet"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The sum of pname:srcArrayElement and pname:descriptorCount must: be less than or equal to the number of array elements in the descriptor set binding specified by pname:srcBinding, and all applicable consecutive bindings, as described by <<descriptorsets-updates-consecutive>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstBinding must: be a valid binding within pname:dstSet"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The sum of pname:dstArrayElement and pname:descriptorCount must: be less than or equal to the number of array elements in the descriptor set binding specified by pname:dstBinding, and all applicable consecutive bindings, as described by <<descriptorsets-updates-consecutive>>"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkBufferCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure. "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBufferCreateFlags"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Buffer creation flags "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"size"
										]
									}
								]
							},
							"                           ",
							{
								"comment": " Specified in bytes "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBufferUsageFlags"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"usage"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Buffer usage flags "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSharingMode"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sharingMode"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queueFamilyIndexCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "noautovalidity",
										"value": "true"
									},
									{
										"name": "len",
										"value": "queueFamilyIndexCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"*        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pQueueFamilyIndices"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:size must: be greater than `0`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:sharingMode is ename:VK_SHARING_MODE_CONCURRENT, pname:pQueueFamilyIndices must: be a pointer to an array of pname:queueFamilyIndexCount basetype:uint32_t values"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:sharingMode is ename:VK_SHARING_MODE_CONCURRENT, pname:queueFamilyIndexCount must: be greater than `1`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-sparseBinding,sparse bindings>> feature is not enabled, pname:flags mustnot: contain ename:VK_BUFFER_CREATE_SPARSE_BINDING_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-sparseResidencyBuffer,sparse buffer residency>> feature is not enabled, pname:flags mustnot: contain ename:VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-sparseResidencyAliased,sparse aliased residency>> feature is not enabled, pname:flags mustnot: contain ename:VK_BUFFER_CREATE_SPARSE_ALIASED_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:flags contains ename:VK_BUFFER_CREATE_SPARSE_ALIASED_BIT, it must: also contain at least one of ename:VK_BUFFER_CREATE_SPARSE_BINDING_BIT or ename:VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkBufferViewCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure. "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBufferViewCreateFlags"
										]
									},
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBuffer"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"buffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFormat"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"format"
										]
									}
								]
							},
							"                         ",
							{
								"comment": " Optionally specifies format of elements "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"offset"
										]
									}
								]
							},
							"                         ",
							{
								"comment": " Specified in bytes "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"range"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " View size specified in bytes "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:offset must: be a multiple of sname:VkPhysicalDeviceLimits::pname:minTexelBufferOffsetAlignment"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:range must: be greater than `0`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:range is not equal to ename:VK_WHOLE_SIZE, the sum of pname:offset and pname:range must: be less than or equal to the size of pname:buffer"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:range is not equal to ename:VK_WHOLE_SIZE, the value of pname:range must: be a multiple of the element size of pname:format"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:range, divided by the size of an element of pname:format, must: be less than or equal to the value of sname:VkPhysicalDeviceLimits::pname:maxTexelBufferElements"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:buffer must: have been created with a pname:usage value containing at least one of ename:VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT or ename:VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:buffer was created with pname:usage containing ename:VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT, pname:format must: be supported for uniform texel buffers, as specified by the ename:VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT flag in sname:VkFormatProperties::pname:bufferFeatures returned by fname:vkGetPhysicalDeviceFormatProperties"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:buffer was created with pname:usage containing ename:VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT, pname:format must: be supported for storage texel buffers, as specified by the ename:VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT flag in sname:VkFormatProperties::pname:bufferFeatures returned by fname:vkGetPhysicalDeviceFormatProperties"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkImageSubresource"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageAspectFlags"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"aspectMask"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"mipLevel"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"arrayLayer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:mipLevel must: be less than the pname:mipLevels specified in slink:VkImageCreateInfo when the image was created"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:arrayLayer must: be less than the pname:arrayLayers specified in slink:VkImageCreateInfo when the image was created"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkImageSubresourceLayers"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageAspectFlags"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"aspectMask"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"mipLevel"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"baseArrayLayer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"layerCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:aspectMask contains ename:VK_IMAGE_ASPECT_COLOR_BIT, it mustnot: contain either of ename:VK_IMAGE_ASPECT_DEPTH_BIT or ename:VK_IMAGE_ASPECT_STENCIL_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:aspectMask mustnot: contain ename:VK_IMAGE_ASPECT_METADATA_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:mipLevel must: be less than the pname:mipLevels specified in slink:VkImageCreateInfo when the image was created"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"latexmath:[$(baseArrayLayer + layerCount)$] must: be less than or equal to the pname:arrayLayers specified in slink:VkImageCreateInfo when the image was created"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkImageSubresourceRange"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageAspectFlags"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"aspectMask"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"baseMipLevel"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"levelCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"baseArrayLayer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"layerCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"latexmath:[$(baseMipLevel + levelCount)$] must: be less than or equal to the pname:mipLevels specified in slink:VkImageCreateInfo when the image was created"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"latexmath:[$(baseArrayLayer + layerCount)$] must: be less than or equal to the pname:arrayLayers specified in slink:VkImageCreateInfo when the image was created"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkMemoryBarrier"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_MEMORY_BARRIER "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure. "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAccessFlags"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcAccessMask"
										]
									}
								]
							},
							"                  ",
							{
								"comment": " Memory accesses from the source of the dependency to synchronize "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAccessFlags"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstAccessMask"
										]
									}
								]
							},
							"                  ",
							{
								"comment": " Memory accesses from the destination of the dependency to synchronize "
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkBufferMemoryBarrier"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure. "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAccessFlags"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcAccessMask"
										]
									}
								]
							},
							"                  ",
							{
								"comment": " Memory accesses from the source of the dependency to synchronize "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAccessFlags"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstAccessMask"
										]
									}
								]
							},
							"                  ",
							{
								"comment": " Memory accesses from the destination of the dependency to synchronize "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcQueueFamilyIndex"
										]
									}
								]
							},
							"            ",
							{
								"comment": " Queue family to transition ownership from "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstQueueFamilyIndex"
										]
									}
								]
							},
							"           ",
							{
								"comment": " Queue family to transition ownership to "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBuffer"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"buffer"
										]
									}
								]
							},
							"                         ",
							{
								"comment": " Buffer to sync "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"offset"
										]
									}
								]
							},
							"                         ",
							{
								"comment": " Offset within the buffer to sync "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"size"
										]
									}
								]
							},
							"                           ",
							{
								"comment": " Amount of bytes to sync "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:offset must: be less than the size of pname:buffer"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The sum of pname:offset and pname:size must: be less than or equal to than the size of pname:buffer"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:buffer was created with a sharing mode of ename:VK_SHARING_MODE_CONCURRENT, pname:srcQueueFamilyIndex and pname:dstQueueFamilyIndex must: both be ename:VK_QUEUE_FAMILY_IGNORED"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:buffer was created with a sharing mode of ename:VK_SHARING_MODE_EXCLUSIVE, pname:srcQueueFamilyIndex and pname:dstQueueFamilyIndex must: either both be ename:VK_QUEUE_FAMILY_IGNORED, or both be a valid queue family (see <<devsandqueues-queueprops>>)"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:buffer was created with a sharing mode of ename:VK_SHARING_MODE_EXCLUSIVE, and pname:srcQueueFamilyIndex and pname:dstQueueFamilyIndex are valid queue families, at least one of them must: be the same as the family of the queue that will execute this barrier"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkImageMemoryBarrier"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure. "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAccessFlags"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcAccessMask"
										]
									}
								]
							},
							"                  ",
							{
								"comment": " Memory accesses from the source of the dependency to synchronize "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAccessFlags"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstAccessMask"
										]
									}
								]
							},
							"                  ",
							{
								"comment": " Memory accesses from the destination of the dependency to synchronize "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageLayout"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"oldLayout"
										]
									}
								]
							},
							"                      ",
							{
								"comment": " Current layout of the image "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageLayout"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"newLayout"
										]
									}
								]
							},
							"                      ",
							{
								"comment": " New layout to transition the image to "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcQueueFamilyIndex"
										]
									}
								]
							},
							"            ",
							{
								"comment": " Queue family to transition ownership from "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstQueueFamilyIndex"
										]
									}
								]
							},
							"           ",
							{
								"comment": " Queue family to transition ownership to "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImage"
										]
									},
									"                ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"image"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Image to sync "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageSubresourceRange"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"subresourceRange"
										]
									}
								]
							},
							"              ",
							{
								"comment": " Subresource range to sync "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:oldLayout must: be ename:VK_IMAGE_LAYOUT_UNDEFINED, ename:VK_IMAGE_LAYOUT_PREINITIALIZED or the current layout of the image region affected by the barrier"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:newLayout mustnot: be ename:VK_IMAGE_LAYOUT_UNDEFINED or ename:VK_IMAGE_LAYOUT_PREINITIALIZED"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:image was created with a sharing mode of ename:VK_SHARING_MODE_CONCURRENT, pname:srcQueueFamilyIndex and pname:dstQueueFamilyIndex must: both be ename:VK_QUEUE_FAMILY_IGNORED"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:image was created with a sharing mode of ename:VK_SHARING_MODE_EXCLUSIVE, pname:srcQueueFamilyIndex and pname:dstQueueFamilyIndex must: either both be ename:VK_QUEUE_FAMILY_IGNORED, or both be a valid queue family (see <<devsandqueues-queueprops>>)"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:image was created with a sharing mode of ename:VK_SHARING_MODE_EXCLUSIVE, and pname:srcQueueFamilyIndex and pname:dstQueueFamilyIndex are valid queue families, at least one of them must: be the same as the family of the queue that will execute this barrier"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:subresourceRange must: be a valid subresource range for the image (see <<resources-image-views>>)"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:image has a depth/stencil format with both depth and stencil components, then pname:aspectMask member of pname:subresourceRange must: include both ename:VK_IMAGE_ASPECT_DEPTH_BIT and ename:VK_IMAGE_ASPECT_STENCIL_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If either pname:oldLayout or pname:newLayout is ename:VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL then pname:image must: have been created with ename:VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If either pname:oldLayout or pname:newLayout is ename:VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL then pname:image must: have been created with ename:VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If either pname:oldLayout or pname:newLayout is ename:VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL then pname:image must: have been created with ename:VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If either pname:oldLayout or pname:newLayout is ename:VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL then pname:image must: have been created with ename:VK_IMAGE_USAGE_SAMPLED_BIT or ename:VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If either pname:oldLayout or pname:newLayout is ename:VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL then pname:image must: have been created with ename:VK_IMAGE_USAGE_TRANSFER_SRC_BIT set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If either pname:oldLayout or pname:newLayout is ename:VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL then pname:image must: have been created with ename:VK_IMAGE_USAGE_TRANSFER_DST_BIT set"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkImageCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure. "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageCreateFlags"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Image creation flags "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageType"
										]
									},
									"            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"imageType"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFormat"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"format"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkExtent3D"
										]
									},
									"             ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"extent"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"mipLevels"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"arrayLayers"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSampleCountFlagBits"
										]
									},
									"  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"samples"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageTiling"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"tiling"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageUsageFlags"
										]
									},
									"      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"usage"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Image usage flags "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSharingMode"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sharingMode"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Cross-queue-family sharing mode "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queueFamilyIndexCount"
										]
									}
								]
							},
							"          ",
							{
								"comment": " Number of queue families to share across "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "noautovalidity",
										"value": "true"
									},
									{
										"name": "len",
										"value": "queueFamilyIndexCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"*        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pQueueFamilyIndices"
										]
									}
								]
							},
							"            ",
							{
								"comment": " Array of queue family indices to share across "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageLayout"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"initialLayout"
										]
									}
								]
							},
							"                  ",
							{
								"comment": " Initial image layout for all subresources "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:sharingMode is ename:VK_SHARING_MODE_CONCURRENT, pname:pQueueFamilyIndices must: be a pointer to an array of pname:queueFamilyIndexCount basetype:uint32_t values"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:sharingMode is ename:VK_SHARING_MODE_CONCURRENT, pname:queueFamilyIndexCount must: be greater than `1`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:format mustnot: be ename:VK_FORMAT_UNDEFINED"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The values of the pname:width, pname:height and pname:depth members of pname:extent must: all be greater than `0`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:mipLevels must: be greater than `0`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:arrayLayers must: be greater than `0`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:imageType is ename:VK_IMAGE_TYPE_1D, the value of pname:extent.width must: be less than or equal to the value of sname:VkPhysicalDeviceLimits::pname:maxImageDimension1D, or the value of sname:VkImageFormatProperties::pname:maxExtent.width (as returned by fname:vkGetPhysicalDeviceImageFormatProperties with values of pname:format, pname:type, pname:tiling, pname:usage and pname:flags equal to those in this structure) - whichever is higher"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:imageType is ename:VK_IMAGE_TYPE_2D and pname:flags does not contain ename:VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT, the value of pname:extent.width and pname:extent.height must: be less than or equal to the value of sname:VkPhysicalDeviceLimits::pname:maxImageDimension2D, or the value of sname:VkImageFormatProperties::pname:maxExtent.width/height (as returned by fname:vkGetPhysicalDeviceImageFormatProperties with values of pname:format, pname:type, pname:tiling, pname:usage and pname:flags equal to those in this structure) - whichever is higher"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:imageType is ename:VK_IMAGE_TYPE_2D and pname:flags contains ename:VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT, the value of pname:extent.width and pname:extent.height must: be less than or equal to the value of sname:VkPhysicalDeviceLimits::pname:maxImageDimensionCube, or the value of sname:VkImageFormatProperties::pname:maxExtent.width/height (as returned by fname:vkGetPhysicalDeviceImageFormatProperties with values of pname:format, pname:type, pname:tiling, pname:usage and pname:flags equal to those in this structure) - whichever is higher"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:imageType is ename:VK_IMAGE_TYPE_2D and pname:flags contains ename:VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT, the value of pname:extent.width and pname:extent.height must: be equal"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:imageType is ename:VK_IMAGE_TYPE_3D, the value of pname:extent.width, pname:extent.height and pname:extent.depth must: be less than or equal to the value of sname:VkPhysicalDeviceLimits::pname:maxImageDimension3D, or the value of sname:VkImageFormatProperties::pname:maxExtent.width/height/depth (as returned by fname:vkGetPhysicalDeviceImageFormatProperties with values of pname:format, pname:type, pname:tiling, pname:usage and pname:flags equal to those in this structure) - whichever is higher"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:mipLevels must: be less than or equal to or equal to the value of latexmath:[$\\lfloor\\log_2(\\max(\\mathit{extent.width}, \\mathit{extent.height}, \\mathit{extent.depth}))\\rfloor + 1$]"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the values of any of pname:extent.width, pname:extent.height or pname:extent.depth are greater than the values of the equivalently named members of sname:VkPhysicalDeviceLimits::pname:maxImageDimension3D, pname:mipLevels must: be less than or equal to the value of sname:VkImageFormatProperties::pname:maxMipLevels (as returned by fname:vkGetPhysicalDeviceImageFormatProperties with values of pname:format, pname:type, pname:tiling, pname:usage and pname:flags equal to those in this structure)"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:arrayLayers must: be less than or equal to the value of sname:VkPhysicalDeviceLimits::pname:maxImageArrayLayers, or the value of sname:VkImageFormatProperties::pname:maxArrayLayers (as returned by fname:vkGetPhysicalDeviceImageFormatProperties with values of pname:format, pname:type, pname:tiling, pname:usage and pname:flags equal to those in this structure) - whichever is higher"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:samples must: be a bit value that is set in the value of sname:VkPhysicalDeviceLimits::pname:sampleCounts returned by flink:vkGetPhysicalDeviceProperties, or the value of sname:VkImageFormatProperties::pname:maxExtent.sampleCounts returned by fname:vkGetPhysicalDeviceImageFormatProperties with values of pname:format, pname:type, pname:tiling, pname:usage and pname:flags equal to those in this structure"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:usage includes ename:VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, ename:VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, ename:VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT or ename:VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT, the value of pname:extent.width must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxFramebufferWidth"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:usage includes ename:VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, ename:VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, ename:VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT or ename:VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT, the value of pname:extent.height must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxFramebufferHeight"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:usage includes ename:VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, the value of pname:samples must: be a bit value that is set in the value of sname:VkPhysicalDeviceLimits::pname:maxFramebufferColorSamples"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:usage includes ename:VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, and pname:format includes a depth aspect, the value of pname:samples must: be a bit value that is set in the value of sname:VkPhysicalDeviceLimits::pname:maxFramebufferDepthSamples"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:usage includes ename:VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, and pname:format includes a stencil aspect, the value of pname:samples must: be a bit value that is set in the value of sname:VkPhysicalDeviceLimits::pname:maxFramebufferStencilSamples"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:usage includes ename:VK_IMAGE_USAGE_SAMPLED_BIT, and pname:format includes a color aspect, the value of pname:samples must: be a bit value that is set in the value of sname:VkPhysicalDeviceLimits::pname:maxSampledImageColorSamples"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:usage includes ename:VK_IMAGE_USAGE_SAMPLED_BIT, and pname:format includes a depth aspect, the value of pname:samples must: be a bit value that is set in the value of sname:VkPhysicalDeviceLimits::pname:maxSampledImageDepthSamples"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:usage includes ename:VK_IMAGE_USAGE_SAMPLED_BIT, and pname:format is an integer format, the value of pname:samples must: be a bit value that is set in the value of sname:VkPhysicalDeviceLimits::pname:maxSampledImageIntegerSamples"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:usage includes ename:VK_IMAGE_USAGE_STORAGE_BIT, the value of pname:samples must: be a bit value that is set in the value of sname:VkPhysicalDeviceLimits::pname:maxStorageImageSamples"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-textureCompressionETC2,ETC2 texture compression>> feature is not enabled, pname:format mustnot: be ename:VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK, ename:VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK, ename:VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK, ename:VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK, ename:VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK, ename:VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK, ename:VK_FORMAT_EAC_R11_UNORM_BLOCK, ename:VK_FORMAT_EAC_R11_SNORM_BLOCK, ename:VK_FORMAT_EAC_R11G11_UNORM_BLOCK, or ename:VK_FORMAT_EAC_R11G11_SNORM_BLOCK"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-textureCompressionASTC_LDR,ASTC LDR texture compression>> feature is not enabled, pname:format mustnot: be ename:VK_FORMAT_ASTC_4x4_UNORM_BLOCK, ename:VK_FORMAT_ASTC_4x4_SRGB_BLOCK, ename:VK_FORMAT_ASTC_5x4_UNORM_BLOCK, ename:VK_FORMAT_ASTC_5x4_SRGB_BLOCK, ename:VK_FORMAT_ASTC_5x5_UNORM_BLOCK, ename:VK_FORMAT_ASTC_5x5_SRGB_BLOCK, ename:VK_FORMAT_ASTC_6x5_UNORM_BLOCK, ename:VK_FORMAT_ASTC_6x5_SRGB_BLOCK, ename:VK_FORMAT_ASTC_6x6_UNORM_BLOCK, ename:VK_FORMAT_ASTC_6x6_SRGB_BLOCK, ename:VK_FORMAT_ASTC_8x5_UNORM_BLOCK, ename:VK_FORMAT_ASTC_8x5_SRGB_BLOCK, ename:VK_FORMAT_ASTC_8x6_UNORM_BLOCK, ename:VK_FORMAT_ASTC_8x6_SRGB_BLOCK, ename:VK_FORMAT_ASTC_8x8_UNORM_BLOCK, ename:VK_FORMAT_ASTC_8x8_SRGB_BLOCK, ename:VK_FORMAT_ASTC_10x5_UNORM_BLOCK, ename:VK_FORMAT_ASTC_10x5_SRGB_BLOCK, ename:VK_FORMAT_ASTC_10x6_UNORM_BLOCK, ename:VK_FORMAT_ASTC_10x6_SRGB_BLOCK, ename:VK_FORMAT_ASTC_10x8_UNORM_BLOCK, ename:VK_FORMAT_ASTC_10x8_SRGB_BLOCK, ename:VK_FORMAT_ASTC_10x10_UNORM_BLOCK, ename:VK_FORMAT_ASTC_10x10_SRGB_BLOCK, ename:VK_FORMAT_ASTC_12x10_UNORM_BLOCK, ename:VK_FORMAT_ASTC_12x10_SRGB_BLOCK, ename:VK_FORMAT_ASTC_12x12_UNORM_BLOCK, or ename:VK_FORMAT_ASTC_12x12_SRGB_BLOCK"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-textureCompressionBC,BC texture compression>> feature is not enabled, pname:format mustnot: be ename:VK_FORMAT_BC1_RGB_UNORM_BLOCK, ename:VK_FORMAT_BC1_RGB_SRGB_BLOCK, ename:VK_FORMAT_BC1_RGBA_UNORM_BLOCK, ename:VK_FORMAT_BC1_RGBA_SRGB_BLOCK, ename:VK_FORMAT_BC2_UNORM_BLOCK, ename:VK_FORMAT_BC2_SRGB_BLOCK, ename:VK_FORMAT_BC3_UNORM_BLOCK, ename:VK_FORMAT_BC3_SRGB_BLOCK, ename:VK_FORMAT_BC4_UNORM_BLOCK, ename:VK_FORMAT_BC4_SNORM_BLOCK, ename:VK_FORMAT_BC5_UNORM_BLOCK, ename:VK_FORMAT_BC5_SNORM_BLOCK, ename:VK_FORMAT_BC6H_UFLOAT_BLOCK, ename:VK_FORMAT_BC6H_SFLOAT_BLOCK, ename:VK_FORMAT_BC7_UNORM_BLOCK, or ename:VK_FORMAT_BC7_SRGB_BLOCK"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-shaderStorageImageMultisample,multisampled storage images>> feature is not enabled, and pname:usage contains ename:VK_IMAGE_USAGE_STORAGE_BIT, pname:samples must: be ename:VK_SAMPLE_COUNT_1_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-sparseBinding,sparse bindings>> feature is not enabled, pname:flags mustnot: contain ename:VK_IMAGE_CREATE_SPARSE_BINDING_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-sparseResidencyImage2D,sparse residency for 2D images>> feature is not enabled, and pname:imageType is ename:VK_IMAGE_TYPE_2D, pname:flags mustnot: contain ename:VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-sparseResidencyImage3D,sparse residency for 3D images>> feature is not enabled, and pname:imageType is ename:VK_IMAGE_TYPE_3D, pname:flags mustnot: contain ename:VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-sparseResidency2Samples,sparse residency for images with 2 samples>> feature is not enabled, pname:imageType is ename:VK_IMAGE_TYPE_2D, and pname:samples is ename:VK_SAMPLE_COUNT_2_BIT, pname:flags mustnot: contain ename:VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-sparseResidency4Samples,sparse residency for images with 4 samples>> feature is not enabled, pname:imageType is ename:VK_IMAGE_TYPE_2D, and pname:samples is ename:VK_SAMPLE_COUNT_4_BIT, pname:flags mustnot: contain ename:VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-sparseResidency8Samples,sparse residency for images with 8 samples>> feature is not enabled, pname:imageType is ename:VK_IMAGE_TYPE_2D, and pname:samples is ename:VK_SAMPLE_COUNT_8_BIT, pname:flags mustnot: contain ename:VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-sparseResidency16Samples,sparse residency for images with 16 samples>> feature is not enabled, pname:imageType is ename:VK_IMAGE_TYPE_2D, and pname:samples is ename:VK_SAMPLE_COUNT_16_BIT, pname:flags mustnot: contain ename:VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the value of pname:tiling is ename:VK_IMAGE_TILING_LINEAR, and the value of sname:VkFormatProperties::pname:linearTilingFeatures (as returned by fname:vkGetPhysicalDeviceFormatProperties with the same value of pname:format) does not include ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT, pname:usage mustnot: contain ename:VK_IMAGE_USAGE_SAMPLED_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the value of pname:tiling is ename:VK_IMAGE_TILING_LINEAR, and the value of sname:VkFormatProperties::pname:linearTilingFeatures (as returned by fname:vkGetPhysicalDeviceFormatProperties with the same value of pname:format) does not include ename:VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT, pname:usage mustnot: contain ename:VK_IMAGE_USAGE_STORAGE_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the value of pname:tiling is ename:VK_IMAGE_TILING_LINEAR, and the value of sname:VkFormatProperties::pname:linearTilingFeatures (as returned by fname:vkGetPhysicalDeviceFormatProperties with the same value of pname:format) does not include ename:VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT, pname:usage mustnot: contain ename:VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the value of pname:tiling is ename:VK_IMAGE_TILING_LINEAR, and the value of sname:VkFormatProperties::pname:linearTilingFeatures (as returned by fname:vkGetPhysicalDeviceFormatProperties with the same value of pname:format) does not include ename:VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT, pname:usage mustnot: contain ename:VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the value of pname:tiling is ename:VK_IMAGE_TILING_OPTIMAL, and the value of sname:VkFormatProperties::pname:optimalTilingFeatures (as returned by fname:vkGetPhysicalDeviceFormatProperties with the same value of pname:format) does not include ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT, pname:usage mustnot: contain ename:VK_IMAGE_USAGE_SAMPLED_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the value of pname:tiling is ename:VK_IMAGE_TILING_OPTIMAL, and the value of sname:VkFormatProperties::pname:optimalTilingFeatures (as returned by fname:vkGetPhysicalDeviceFormatProperties with the same value of pname:format) does not include ename:VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT, pname:usage mustnot: contain ename:VK_IMAGE_USAGE_STORAGE_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the value of pname:tiling is ename:VK_IMAGE_TILING_OPTIMAL, and the value of sname:VkFormatProperties::pname:optimalTilingFeatures (as returned by fname:vkGetPhysicalDeviceFormatProperties with the same value of pname:format) does not include ename:VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT, pname:usage mustnot: contain ename:VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the value of pname:tiling is ename:VK_IMAGE_TILING_OPTIMAL, and the value of sname:VkFormatProperties::pname:optimalTilingFeatures (as returned by fname:vkGetPhysicalDeviceFormatProperties with the same value of pname:format) does not include ename:VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT, pname:usage mustnot: contain ename:VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:flags contains ename:VK_IMAGE_CREATE_SPARSE_ALIASED_BIT, it must: also contain at least one of ename:VK_IMAGE_CREATE_SPARSE_BINDING_BIT or ename:VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkSubresourceLayout"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"offset"
										]
									}
								]
							},
							"                         ",
							{
								"comment": " Specified in bytes "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"size"
										]
									}
								]
							},
							"                           ",
							{
								"comment": " Specified in bytes "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"rowPitch"
										]
									}
								]
							},
							"                       ",
							{
								"comment": " Specified in bytes "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"arrayPitch"
										]
									}
								]
							},
							"                     ",
							{
								"comment": " Specified in bytes "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"depthPitch"
										]
									}
								]
							},
							"                     ",
							{
								"comment": " Specified in bytes "
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkImageViewCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageViewCreateFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImage"
										]
									},
									"                ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"image"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageViewType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"viewType"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFormat"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"format"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkComponentMapping"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"components"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageSubresourceRange"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"subresourceRange"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:image was not created with ename:VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT then pname:viewType mustnot: be ename:VK_IMAGE_VIEW_TYPE_CUBE or ename:VK_IMAGE_VIEW_TYPE_CUBE_ARRAY"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-imageCubeArray,image cubemap arrays>> feature is not enabled, pname:viewType mustnot: be ename:VK_IMAGE_VIEW_TYPE_CUBE_ARRAY"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-textureCompressionETC2,ETC2 texture compression>> feature is not enabled, pname:format mustnot: be ename:VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK, ename:VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK, ename:VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK, ename:VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK, ename:VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK, ename:VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK, ename:VK_FORMAT_EAC_R11_UNORM_BLOCK, ename:VK_FORMAT_EAC_R11_SNORM_BLOCK, ename:VK_FORMAT_EAC_R11G11_UNORM_BLOCK, or ename:VK_FORMAT_EAC_R11G11_SNORM_BLOCK"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-textureCompressionASTC_LDR,ASTC LDR texture compression>> feature is not enabled, pname:format mustnot: be ename:VK_FORMAT_ASTC_4x4_UNORM_BLOCK, ename:VK_FORMAT_ASTC_4x4_SRGB_BLOCK, ename:VK_FORMAT_ASTC_5x4_UNORM_BLOCK, ename:VK_FORMAT_ASTC_5x4_SRGB_BLOCK, ename:VK_FORMAT_ASTC_5x5_UNORM_BLOCK, ename:VK_FORMAT_ASTC_5x5_SRGB_BLOCK, ename:VK_FORMAT_ASTC_6x5_UNORM_BLOCK, ename:VK_FORMAT_ASTC_6x5_SRGB_BLOCK, ename:VK_FORMAT_ASTC_6x6_UNORM_BLOCK, ename:VK_FORMAT_ASTC_6x6_SRGB_BLOCK, ename:VK_FORMAT_ASTC_8x5_UNORM_BLOCK, ename:VK_FORMAT_ASTC_8x5_SRGB_BLOCK, ename:VK_FORMAT_ASTC_8x6_UNORM_BLOCK, ename:VK_FORMAT_ASTC_8x6_SRGB_BLOCK, ename:VK_FORMAT_ASTC_8x8_UNORM_BLOCK, ename:VK_FORMAT_ASTC_8x8_SRGB_BLOCK, ename:VK_FORMAT_ASTC_10x5_UNORM_BLOCK, ename:VK_FORMAT_ASTC_10x5_SRGB_BLOCK, ename:VK_FORMAT_ASTC_10x6_UNORM_BLOCK, ename:VK_FORMAT_ASTC_10x6_SRGB_BLOCK, ename:VK_FORMAT_ASTC_10x8_UNORM_BLOCK, ename:VK_FORMAT_ASTC_10x8_SRGB_BLOCK, ename:VK_FORMAT_ASTC_10x10_UNORM_BLOCK, ename:VK_FORMAT_ASTC_10x10_SRGB_BLOCK, ename:VK_FORMAT_ASTC_12x10_UNORM_BLOCK, ename:VK_FORMAT_ASTC_12x10_SRGB_BLOCK, ename:VK_FORMAT_ASTC_12x12_UNORM_BLOCK, or ename:VK_FORMAT_ASTC_12x12_SRGB_BLOCK"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-textureCompressionBC,BC texture compression>> feature is not enabled, pname:format mustnot: be ename:VK_FORMAT_BC1_RGB_UNORM_BLOCK, ename:VK_FORMAT_BC1_RGB_SRGB_BLOCK, ename:VK_FORMAT_BC1_RGBA_UNORM_BLOCK, ename:VK_FORMAT_BC1_RGBA_SRGB_BLOCK, ename:VK_FORMAT_BC2_UNORM_BLOCK, ename:VK_FORMAT_BC2_SRGB_BLOCK, ename:VK_FORMAT_BC3_UNORM_BLOCK, ename:VK_FORMAT_BC3_SRGB_BLOCK, ename:VK_FORMAT_BC4_UNORM_BLOCK, ename:VK_FORMAT_BC4_SNORM_BLOCK, ename:VK_FORMAT_BC5_UNORM_BLOCK, ename:VK_FORMAT_BC5_SNORM_BLOCK, ename:VK_FORMAT_BC6H_UFLOAT_BLOCK, ename:VK_FORMAT_BC6H_SFLOAT_BLOCK, ename:VK_FORMAT_BC7_UNORM_BLOCK, or ename:VK_FORMAT_BC7_SRGB_BLOCK"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:image was created with ename:VK_IMAGE_TILING_LINEAR and pname:usage containing ename:VK_IMAGE_USAGE_SAMPLED_BIT, pname:format must: be supported for sampled images, as specified by the ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT flag in sname:VkFormatProperties::pname:linearTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:image was created with ename:VK_IMAGE_TILING_LINEAR and pname:usage containing ename:VK_IMAGE_USAGE_STORAGE_BIT, pname:format must: be supported for storage images, as specified by the ename:VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT flag in sname:VkFormatProperties::pname:linearTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:image was created with ename:VK_IMAGE_TILING_LINEAR and pname:usage containing ename:VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, pname:format must: be supported for color attachments, as specified by the ename:VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT flag in sname:VkFormatProperties::pname:linearTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:image was created with ename:VK_IMAGE_TILING_LINEAR and pname:usage containing ename:VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, pname:format must: be supported for depth/stencil attachments, as specified by the ename:VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT flag in sname:VkFormatProperties::pname:linearTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:image was created with ename:VK_IMAGE_TILING_OPTIMAL and pname:usage containing ename:VK_IMAGE_USAGE_SAMPLED_BIT, pname:format must: be supported for sampled images, as specified by the ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT flag in sname:VkFormatProperties::pname:optimalTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:image was created with ename:VK_IMAGE_TILING_OPTIMAL and pname:usage containing ename:VK_IMAGE_USAGE_STORAGE_BIT, pname:format must: be supported for storage images, as specified by the ename:VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT flag in sname:VkFormatProperties::pname:optimalTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:image was created with ename:VK_IMAGE_TILING_OPTIMAL and pname:usage containing ename:VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, pname:format must: be supported for color attachments, as specified by the ename:VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT flag in sname:VkFormatProperties::pname:optimalTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:image was created with ename:VK_IMAGE_TILING_OPTIMAL and pname:usage containing ename:VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, pname:format must: be supported for depth/stencil attachments, as specified by the ename:VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT flag in sname:VkFormatProperties::pname:optimalTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:subresourceRange must: be a valid subresource range for pname:image (see <<resources-image-views>>)"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:image was created with the ename:VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT flag, pname:format must: be compatible with the pname:format used to create pname:image, as defined in <<features-formats-compatibility-classes,Format Compatibility Classes>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:image was not created with the ename:VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT flag, pname:format must: be identical to the pname:format used to create pname:image"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:subResourceRange and pname:viewType must: be compatible with the image, as described in the <<resources-image-views-compatibility,table below>>"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkBufferCopy"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcOffset"
										]
									}
								]
							},
							"                      ",
							{
								"comment": " Specified in bytes "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstOffset"
										]
									}
								]
							},
							"                     ",
							{
								"comment": " Specified in bytes "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"size"
										]
									}
								]
							},
							"                           ",
							{
								"comment": " Specified in bytes "
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkSparseMemoryBind"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"resourceOffset"
										]
									}
								]
							},
							"                 ",
							{
								"comment": " Specified in bytes "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"size"
										]
									}
								]
							},
							"                           ",
							{
								"comment": " Specified in bytes "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceMemory"
										]
									},
									"         ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"memory"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"memoryOffset"
										]
									}
								]
							},
							"                   ",
							{
								"comment": " Specified in bytes "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSparseMemoryBindFlags"
										]
									},
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Reserved for future "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:memory is not sname:VK_NULL_HANDLE, pname:memory and pname:memoryOffset must: match the memory requirements of the resource, as described in section <<resources-association>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:memory is not sname:VK_NULL_HANDLE, pname:memory mustnot: have been created with a memory type that reports ename:VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT bit set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:resourceOffset must: be less than the size of the resource"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The sum of pname:resourceOffset and pname:size must: be less than or equal to the size of the resource"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:memoryOffset must: be less than the size of pname:memory"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The sum of pname:memoryOffset and pname:size must: be less than or equal to the size of pname:memory"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkSparseImageMemoryBind"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageSubresource"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"subresource"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkOffset3D"
										]
									},
									"             ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"offset"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkExtent3D"
										]
									},
									"             ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"extent"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceMemory"
										]
									},
									"         ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"memory"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"memoryOffset"
										]
									}
								]
							},
							"                   ",
							{
								"comment": " Specified in bytes "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSparseMemoryBindFlags"
										]
									},
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Reserved for future "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-sparseResidencyAliased,sparse aliased residency>> feature is not enabled, and if any other resources are bound to ranges of pname:memory, the range of pname:memory being bound mustnot: overlap with those bound ranges"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:memory and pname:memoryOffset must: match the memory requirements of the calling command's pname:image, as described in section <<resources-association>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:subresource must: be a valid subresource for pname:image (see <<resources-image-views>>)"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:offset.x must: be a multiple of the block width (sname:VkSparseImageFormatProperties::pname:imageGranularity.width) of the image"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:extent.width must: either be a multiple of the block width of the image, or else pname:extent.width + pname:offset.x must: equal the width of the image subresource"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:offset.y must: be a multiple of the block height (sname:VkSparseImageFormatProperties::pname:imageGranularity.height) of the image"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:extent.height must: either be a multiple of the block height of the image, or else pname:extent.height + pname:offset.y must: equal the height of the image subresource"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:offset.z must: be a multiple of the block depth (sname:VkSparseImageFormatProperties::pname:imageGranularity.depth) of the image"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:extent.depth must: either be a multiple of the block depth of the image, or else pname:extent.depth + pname:offset.z must: equal the depth of the image subresource"
										]
									},
									"\n            "
								]
							},
							"\n    "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkSparseBufferMemoryBindInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"buffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"bindCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "bindCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSparseMemoryBind"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pBinds"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkSparseImageOpaqueMemoryBindInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImage"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"image"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"bindCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "bindCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSparseMemoryBind"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pBinds"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"For any given element of pname:pBinds, if the pname:flags member of that element contains ename:VK_SPARSE_MEMORY_BIND_METADATA_BIT, the binding range defined must: be within the mip tail region of the metadata aspect of pname:image"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkSparseImageMemoryBindInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImage"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"image"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"bindCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "bindCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSparseImageMemoryBind"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pBinds"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkBindSparseInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_BIND_SPARSE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure. "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"waitSemaphoreCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "waitSemaphoreCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSemaphore"
										]
									},
									"*     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pWaitSemaphores"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"bufferBindCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "bufferBindCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSparseBufferMemoryBindInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pBufferBinds"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"imageOpaqueBindCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "imageOpaqueBindCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSparseImageOpaqueMemoryBindInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pImageOpaqueBinds"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"imageBindCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "imageBindCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSparseImageMemoryBindInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pImageBinds"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"signalSemaphoreCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "signalSemaphoreCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSemaphore"
										]
									},
									"*     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSignalSemaphores"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkImageCopy"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageSubresourceLayers"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcSubresource"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkOffset3D"
										]
									},
									"             ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcOffset"
										]
									}
								]
							},
							"                      ",
							{
								"comment": " Specified in pixels for both compressed and uncompressed images "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageSubresourceLayers"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstSubresource"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkOffset3D"
										]
									},
									"             ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstOffset"
										]
									}
								]
							},
							"                     ",
							{
								"comment": " Specified in pixels for both compressed and uncompressed images "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkExtent3D"
										]
									},
									"             ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"extent"
										]
									}
								]
							},
							"                         ",
							{
								"comment": " Specified in pixels for both compressed and uncompressed images "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The pname:aspectMask member of pname:srcSubresource and pname:dstSubresource must: match"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The pname:layerCount member of pname:srcSubresource and pname:dstSubresource must: match"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If either of the calling command's pname:srcImage or pname:dstImage parameters are of elink:VkImageType ename:VK_IMAGE_TYPE_3D, the pname:baseArrayLayer and pname:layerCount members of both pname:srcSubresource and pname:dstSubresource must: be `0` and `1`, respectively"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The pname:aspectMask member of pname:srcSubresource must: specify aspects present in the calling command's pname:srcImage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The pname:aspectMask member of pname:dstSubresource must: specify aspects present in the calling command's pname:dstImage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:srcOffset.x and (pname:extent.width + pname:srcOffset.x) must: both be greater than or equal to `0` and less than or equal to the source image subresource width"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:srcOffset.y and (pname:extent.height + pname:srcOffset.y) must: both be greater than or equal to `0` and less than or equal to the source image subresource height"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:srcOffset.z and (pname:extent.depth + pname:srcOffset.z) must: both be greater than or equal to `0` and less than or equal to the source image subresource depth"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstOffset.x and (pname:extent.width + pname:dstOffset.x) must: both be greater than or equal to `0` and less than or equal to the destination image subresource width"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstOffset.y and (pname:extent.height + pname:dstOffset.y) must: both be greater than or equal to `0` and less than or equal to the destination image subresource height"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstOffset.z and (pname:extent.depth + pname:dstOffset.z) must: both be greater than or equal to `0` and less than or equal to the destination image subresource depth"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the calling command's pname:srcImage is a compressed format image:"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"  all members of pname:srcOffset must: be a multiple of the block size in the relevant dimensions"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"  pname:extent.width must: be a multiple of the block width or (pname:extent.width + pname:srcOffset.x) must: equal the source image subresource width"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"  pname:extent.height must: be a multiple of the block height or (pname:extent.height + pname:srcOffset.y) must: equal the source image subresource height"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"  pname:extent.depth must: be a multiple of the block depth or (pname:extent.depth + pname:srcOffset.z) must: equal the source image subresource depth"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the calling command's pname:dstImage is a compressed format image:"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"  all members of pname:dstOffset must: be a multiple of the block size in the relevant dimensions"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"  pname:extent.width must: be a multiple of the block width or (pname:extent.width + pname:dstOffset.x) must: equal the destination image subresource width"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"  pname:extent.height must: be a multiple of the block height or (pname:extent.height + pname:dstOffset.y) must: equal the destination image subresource height"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"  pname:extent.depth must: be a multiple of the block depth or (pname:extent.depth + pname:dstOffset.z) must: equal the destination image subresource depth"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:srcOffset, pname:dstOffset, and pname:extent must: respect the image transfer granularity requirements of the queue family that it will be submitted against, as described in <<execution-physical-device-enumeration,Physical Device Enumeration>>"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkImageBlit"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageSubresourceLayers"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcSubresource"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkOffset3D"
										]
									},
									"             ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcOffsets[2]"
										]
									}
								]
							},
							"                      ",
							{
								"comment": " Specified in pixels for both compressed and uncompressed images "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageSubresourceLayers"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstSubresource"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkOffset3D"
										]
									},
									"             ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstOffsets[2]"
										]
									}
								]
							},
							"                     ",
							{
								"comment": " Specified in pixels for both compressed and uncompressed images "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The pname:aspectMask member of pname:srcSubresource and pname:dstSubresource must: match"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The pname:layerCount member of pname:srcSubresource and pname:dstSubresource must: match"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If either of the calling command's pname:srcImage or pname:dstImage parameters are of elink:VkImageType ename:VK_IMAGE_TYPE_3D, the pname:baseArrayLayer and pname:layerCount members of both pname:srcSubresource and pname:dstSubresource must: be `0` and `1`, respectively"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The pname:aspectMask member of pname:srcSubresource must: specify aspects present in the calling command's pname:srcImage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The pname:aspectMask member of pname:dstSubresource must: specify aspects present in the calling command's pname:dstImage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:srcOffset[0].x and pname:srcOffset[1].x must: both be greater than or equal to `0` and less than or equal to the source image subresource width"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:srcOffset[0].y and pname:srcOffset[1].y must: both be greater than or equal to `0` and less than or equal to the source image subresource height"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:srcOffset[0].z and pname:srcOffset[1].z must: both be greater than or equal to `0` and less than or equal to the source image subresource depth"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstOffset[0].x and pname:dstOffset[1].x must: both be greater than or equal to `0` and less than or equal to the destination image subresource width"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstOffset[0].y and pname:dstOffset[1].y must: both be greater than or equal to `0` and less than or equal to the destination image subresource height"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstOffset[0].z and pname:dstOffset[1].z must: both be greater than or equal to `0` and less than or equal to the destination image subresource depth"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkBufferImageCopy"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"bufferOffset"
										]
									}
								]
							},
							"                   ",
							{
								"comment": " Specified in bytes "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"bufferRowLength"
										]
									}
								]
							},
							"                ",
							{
								"comment": " Specified in texels "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"bufferImageHeight"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageSubresourceLayers"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"imageSubresource"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkOffset3D"
										]
									},
									"             ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"imageOffset"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Specified in pixels for both compressed and uncompressed images "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkExtent3D"
										]
									},
									"             ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"imageExtent"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Specified in pixels for both compressed and uncompressed images "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:bufferOffset must: be a multiple of the calling command's sname:VkImage parameter's texel size"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:bufferOffset must: be a multiple of `4`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:bufferRowLength must: be `0`, or greater than or equal to the pname:width member of pname:imageExtent"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:bufferImageHeight must: be `0`, or greater than or equal to the pname:height member of pname:imageExtent"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:imageOffset.x and (pname:imageExtent.width + pname:imageOffset.x) must: both be greater than or equal to `0` and less than or equal to the image subresource width"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:imageOffset.y and (imageExtent.height + pname:imageOffset.y) must: both be greater than or equal to `0` and less than or equal to the image subresource height"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:imageOffset.z and (imageExtent.depth + pname:imageOffset.z) must: both be greater than or equal to `0` and less than or equal to the image subresource depth"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the calling command's sname:VkImage parameter is a compressed format image:"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"  pname:bufferRowLength, pname:bufferImageHeight and all members of pname:imageOffset must: be a multiple of the block size in the relevant dimensions"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"  pname:bufferOffset must: be a multiple of the block size in bytes"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"  pname:imageExtent.width must: be a multiple of the block width or (pname:imageExtent.width + pname:imageOffset.x) must: equal the image subresource width"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"  pname:imageExtent.height must: be a multiple of the block height or (pname:imageExtent.height + pname:imageOffset.y) must: equal the image subresource height"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"  pname:imageExtent.depth must: be a multiple of the block depth or (pname:imageExtent.depth + pname:imageOffset.z) must: equal the image subresource depth"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:bufferOffset, pname:bufferRowLength, pname:bufferImageHeight and all members of pname:imageOffset and pname:imageExtent must: respect the image transfer granularity requirements of the queue family that it will be submitted against, as described in <<execution-physical-device-enumeration,Physical Device Enumeration>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The pname:aspectMask member of pname:imageSubresource must: specify aspects present in the calling command's sname:VkImage parameter"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The pname:aspectMask member of pname:imageSubresource must: only have a single bit set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the calling command's sname:VkImage parameter is of elink:VkImageType ename:VK_IMAGE_TYPE_3D, the pname:baseArrayLayer and pname:layerCount members of pname:imageSubresource must: be `0` and `1`, respectively"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkImageResolve"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageSubresourceLayers"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcSubresource"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkOffset3D"
										]
									},
									"             ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcOffset"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageSubresourceLayers"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstSubresource"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkOffset3D"
										]
									},
									"             ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstOffset"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkExtent3D"
										]
									},
									"             ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"extent"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The pname:aspectMask member of pname:srcSubresource and pname:dstSubresource must: only contain ename:VK_IMAGE_ASPECT_COLOR_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The pname:layerCount member of pname:srcSubresource and pname:dstSubresource must: match"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If either of the calling command's pname:srcImage or pname:dstImage parameters are of elink:VkImageType ename:VK_IMAGE_TYPE_3D, the pname:baseArrayLayer and pname:layerCount members of both pname:srcSubresource and pname:dstSubresource must: be `0` and `1`, respectively"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkShaderModuleCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkShaderModuleCreateFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                       ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"size_t"
										]
									},
									"                 ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"codeSize"
										]
									}
								]
							},
							"                       ",
							{
								"comment": " Specified in bytes "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "latexmath:[$codeSize \\over 4$]"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCode"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Binary code of size codeSize "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:codeSize must: be greater than 0"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:codeSize must: be a multiple of 4"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:pCode must: point to valid SPIR-V code, formatted and packed as described by https://www.khronos.org/registry/spir-v/specs/1.0/SPIRV.html[the SPIR-V Specification v1.0]"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:pCode must: adhere to the validation rules described by the <<spirvenv-module-validation, Validation Rules within a Module>> section of the <<spirvenv-capabilities,SPIR-V Environment>> appendix"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:pCode must: declare the code:Shader capability"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:pCode mustnot: declare any capability that is not supported by the API, as described by the <<spirvenv-module-validation, Capabilities>> section of the <<spirvenv-capabilities,SPIR-V Environment>> appendix"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:pCode declares any of the capabilities that are listed as not required by the implementation, the relevant feature must: be enabled, as listed in the <<spirvenv-capabilities-table,SPIR-V Environment>> appendix"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkDescriptorSetLayoutBinding"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"binding"
										]
									}
								]
							},
							"                        ",
							{
								"comment": " Binding number for this entry "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorType"
										]
									},
									"       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"descriptorType"
										]
									}
								]
							},
							"                 ",
							{
								"comment": " Type of the descriptors in this binding "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"descriptorCount"
										]
									}
								]
							},
							"              ",
							{
								"comment": " Number of descriptors in this binding "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "noautovalidity",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkShaderStageFlags"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"stageFlags"
										]
									}
								]
							},
							"                     ",
							{
								"comment": " Shader stages this binding is visible to "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "noautovalidity",
										"value": "true"
									},
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "descriptorCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSampler"
										]
									},
									"*       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pImmutableSamplers"
										]
									}
								]
							},
							"             ",
							{
								"comment": " Immutable samplers (used if descriptor type is SAMPLER or COMBINED_IMAGE_SAMPLER, is either NULL or contains count number of elements) "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:descriptorType is ename:VK_DESCRIPTOR_TYPE_SAMPLER or ename:VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, and pname:descriptorCount is not `0` and pname:pImmutableSamplers is not `NULL`, pname:pImmutableSamplers must: be a pointer to an array of pname:descriptorCount valid sname:VkSampler handles"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:descriptorCount is not `0`, pname:stageFlags must: be a valid combination of elink:VkShaderStageFlagBits values"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkDescriptorSetLayoutCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorSetLayoutCreateFlags"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"             ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"bindingCount"
										]
									}
								]
							},
							"                   ",
							{
								"comment": " Number of bindings in the descriptor set layout "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "bindingCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorSetLayoutBinding"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pBindings"
										]
									}
								]
							},
							"       ",
							{
								"comment": " Array of descriptor set layout bindings "
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkDescriptorPoolSize"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorType"
										]
									},
									"       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"type"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"descriptorCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:descriptorCount must: be greater than `0`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkDescriptorPoolCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorPoolCreateFlags"
										]
									},
									"  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxSets"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"poolSizeCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "poolSizeCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorPoolSize"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pPoolSizes"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:maxSets must: be greater than `0`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkDescriptorSetAllocateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorPool"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"descriptorPool"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"descriptorSetCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "descriptorSetCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorSetLayout"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSetLayouts"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:descriptorSetCount mustnot: be greater than the number of sets that are currently available for allocation in pname:descriptorPool"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkSpecializationMapEntry"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"constantID"
										]
									}
								]
							},
							"                     ",
							{
								"comment": " The SpecConstant ID specified in the BIL "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"offset"
										]
									}
								]
							},
							"                         ",
							{
								"comment": " Offset of the value in the data block "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"size_t"
										]
									},
									"                 ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"size"
										]
									}
								]
							},
							"                           ",
							{
								"comment": " Size in bytes of the SpecConstant "
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkSpecializationInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"mapEntryCount"
										]
									}
								]
							},
							"                  ",
							{
								"comment": " Number of entries in the map "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "mapEntryCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSpecializationMapEntry"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pMapEntries"
										]
									}
								]
							},
							"                  ",
							{
								"comment": " Array of map entries "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"size_t"
										]
									},
									"                 ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dataSize"
										]
									}
								]
							},
							"                       ",
							{
								"comment": " Size in bytes of pData "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "dataSize"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pData"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to SpecConstant data "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The pname:offset member of any given element of pname:pMapEntries must: be less than pname:dataSize"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The sum of the pname:offset and pname:size members of any given element of pname:pMapEntries must: be less than or equal to pname:dataSize"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkPipelineShaderStageCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineShaderStageCreateFlags"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"             ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkShaderStageFlagBits"
										]
									},
									"  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"stage"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Shader stage "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkShaderModule"
										]
									},
									"         ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"module"
										]
									}
								]
							},
							"                         ",
							{
								"comment": " Module containing entry point "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "null-terminated"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"char"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pName"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Null-terminated entry point name "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSpecializationInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSpecializationInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-geometryShader,geometry shaders>> feature is not enabled, pname:stage mustnot: be ename:VK_SHADER_STAGE_GEOMETRY_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-tessellationShader,tessellation shaders>> feature is not enabled, pname:stage mustnot: be ename:VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT or ename:VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:stage mustnot: be ename:VK_SHADER_STAGE_ALL_GRAPHICS, or ename:VK_SHADER_STAGE_ALL"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:pName must: be the name of an code:OpEntryPoint in pname:module with an execution model that matches pname:stage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the identified entry point includes any variable in its interface that is declared with the code:ClipDistance code:BuiltIn decoration, that variable mustnot: have an array size greater than sname:VkPhysicalDeviceLimits::pname:maxClipDistances"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the identified entry point includes any variable in its interface that is declared with the code:CullDistance code:BuiltIn decoration, that variable mustnot: have an array size greater than sname:VkPhysicalDeviceLimits::pname:maxCullDistances"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the identified entry point includes any variables in its interface that are declared with the code:ClipDistance or code:CullDistance code:BuiltIn decoration, those variables mustnot: have array sizes which sum to more than sname:VkPhysicalDeviceLimits::pname:maxCombinedClipAndCullDistances"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the identified entry point includes any variable in its interface that is declared with the code:SampleMask code:BuiltIn decoration, that variable mustnot: have an array size greater than sname:VkPhysicalDeviceLimits::pname:maxSampleMaskWords"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:stage is ename:VK_SHADER_STAGE_VERTEX_BIT, the identified entry point mustnot: include any input variable in its interface that is decorated with code:CullDistance"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:stage is ename:VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT or ename:VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT, and the identified entry point has an code:OpExecutionMode instruction that specifies a patch size with code:OutputVertices, the patch size must: be greater than `0` and less than or equal to sname:VkPhysicalDeviceLimits::pname:maxTessellationPatchSize"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:stage is ename:VK_SHADER_STAGE_GEOMETRY_BIT, the identified entry point must: have an code:OpExecutionMode instruction that specifies a maximum output vertex count that is greater than `0` and less than or equal to sname:VkPhysicalDeviceLimits::pname:maxGeometryOutputVertices"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:stage is ename:VK_SHADER_STAGE_GEOMETRY_BIT, the identified entry point must: have an code:OpExecutionMode instruction that specifies an invocation count that is greater than `0` and less than or equal to sname:VkPhysicalDeviceLimits::pname:maxGeometryShaderInvocations"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:stage is ename:VK_SHADER_STAGE_GEOMETRY_BIT, and the identified entry point writes to code:Layer for any primitive, it must: write the same value to code:Layer for all vertices of a given primitive"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:stage is ename:VK_SHADER_STAGE_GEOMETRY_BIT, and the identified entry point writes to code:ViewportIndex for any primitive, it must: write the same value to code:ViewportIndex for all vertices of a given primitive"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:stage is ename:VK_SHADER_STAGE_FRAGMENT_BIT, the identified entry point mustnot: include any output variables in its interface decorated with code:CullDistance"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:stage is ename:VK_SHADER_STAGE_FRAGMENT_BIT, and the identified entry point writes to code:FragDepth in any execution path, it must: write to code:FragDepth in all execution paths"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkComputePipelineCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineCreateFlags"
										]
									},
									"  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pipeline creation flags "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineShaderStageCreateInfo"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"stage"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineLayout"
										]
									},
									"       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"layout"
										]
									}
								]
							},
							"                         ",
							{
								"comment": " Interface layout of the pipeline "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "noautovalidity",
										"value": "true"
									},
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipeline"
										]
									},
									"      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"basePipelineHandle"
										]
									}
								]
							},
							"             ",
							{
								"comment": " If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is nonzero, it specifies the handle of the base pipeline this is a derivative of "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"int32_t"
										]
									},
									"                ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"basePipelineIndex"
										]
									}
								]
							},
							"              ",
							{
								"comment": " If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is not -1, it specifies an index into pCreateInfos of the base pipeline this is a derivative of "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:flags contains the ename:VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and pname:basePipelineIndex is not `-1`, pname:basePipelineHandle must: be sname:VK_NULL_HANDLE"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:flags contains the ename:VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and pname:basePipelineIndex is not `-1`, it must: be a valid index into the calling command's pname:pCreateInfos parameter"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:flags contains the ename:VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and pname:basePipelineHandle is not sname:VK_NULL_HANDLE, pname:basePipelineIndex must: be `-1`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:flags contains the ename:VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and pname:basePipelineHandle is not sname:VK_NULL_HANDLE, pname:basePipelineHandle must: be a valid sname:VkPipeline handle"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:flags contains the ename:VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and pname:basePipelineHandle is not sname:VK_NULL_HANDLE, it must: be a valid handle to a compute sname:VkPipeline"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The pname:stage member of pname:stage must: be ename:VK_SHADER_STAGE_COMPUTE_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The shader code for the entry point identified by pname:stage and the rest of the state identified by this structure must: adhere to the pipeline linking rules described in the <<interfaces,Shader Interfaces>> chapter"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:layout must: be <<descriptorsets-pipelinelayout-consistency,consistent>> with all shaders specified in pname:pStages"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkVertexInputBindingDescription"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"binding"
										]
									}
								]
							},
							"                        ",
							{
								"comment": " Vertex buffer binding id "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"stride"
										]
									}
								]
							},
							"                         ",
							{
								"comment": " Distance between vertices in bytes (0 = no advancement) "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkVertexInputRate"
										]
									},
									"      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"inputRate"
										]
									}
								]
							},
							"                      ",
							{
								"comment": " The rate at which the vertex data is consumed "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:binding must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxVertexInputBindings"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:stride must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxVertexInputBindingStride"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkVertexInputAttributeDescription"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"location"
										]
									}
								]
							},
							"                       ",
							{
								"comment": " location of the shader vertex attrib "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"binding"
										]
									}
								]
							},
							"                        ",
							{
								"comment": " Vertex buffer binding id "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFormat"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"format"
										]
									}
								]
							},
							"                         ",
							{
								"comment": " format of source data "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"offset"
										]
									}
								]
							},
							"                         ",
							{
								"comment": " Offset of first element in bytes from base of vertex "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:binding must: be less than sname:VkPhysicalDeviceLimits::pname:maxVertexInputBindings"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:offset must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxVertexInputAttributeOffset"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:format must: be allowed as a vertex buffer format, as specified by the ename:VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT flag in sname:VkFormatProperties::pname:bufferFeatures returned by fname:vkGetPhysicalDeviceFormatProperties"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkPipelineVertexInputStateCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Should be VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineVertexInputStateCreateFlags"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"        ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vertexBindingDescriptionCount"
										]
									}
								]
							},
							"  ",
							{
								"comment": " number of bindings "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "vertexBindingDescriptionCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkVertexInputBindingDescription"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pVertexBindingDescriptions"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vertexAttributeDescriptionCount"
										]
									}
								]
							},
							" ",
							{
								"comment": " number of attributes "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "vertexAttributeDescriptionCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkVertexInputAttributeDescription"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pVertexAttributeDescriptions"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:vertexBindingDescriptionCount must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxVertexInputBindings"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:vertexAttributeDescriptionCount must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxVertexInputAttributes"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"For every value of pname:binding specified by any given element of pname:pVertexAttributeDescriptions, a sname:VkVertexInputBindingDescription must: exist in pname:pVertexBindingDescriptions with the same value of pname:binding"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All elements of pname:pVertexBindingDescriptions must: describe distinct binding numbers"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All elements of pname:pVertexAttributeDescriptions must: describe distinct attribute locations"
										]
									},
									"\n\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkPipelineInputAssemblyStateCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_PIPELINE_IINPUT_ASSEMBLY_STATE_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineInputAssemblyStateCreateFlags"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"      ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPrimitiveTopology"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"topology"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"primitiveRestartEnable"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:topology is ename:VK_PRIMITIVE_TOPOLOGY_POINT_LIST, ename:VK_PRIMITIVE_TOPOLOGY_LINE_LIST, ename:VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST, ename:VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY, ename:VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY or ename:VK_PRIMITIVE_TOPOLOGY_PATCH_LIST, the value of pname:primitiveRestartEnable must: be ename:VK_FALSE"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-geometryShader,geometry shaders>> feature is not enabled, pname:topology mustnot: be any of ename:VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY, ename:VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY, ename:VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY or ename:VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-tessellationShader,tessellation shaders>> feature is not enabled, pname:topology mustnot: be ename:VK_PRIMITIVE_TOPOLOGY_PATCH_LIST"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkPipelineTessellationStateCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineTessellationStateCreateFlags"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"        ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"patchControlPoints"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:patchControlPoints must: be greater than zero and less than or equal to sname:VkPhysicalDeviceLimits::pname:maxTessellationPatchSize"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkPipelineViewportStateCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineViewportStateCreateFlags"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"           ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"viewportCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "noautovalidity",
										"value": "true"
									},
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "viewportCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkViewport"
										]
									},
									"*      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pViewports"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"scissorCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "noautovalidity",
										"value": "true"
									},
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "scissorCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkRect2D"
										]
									},
									"*        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pScissors"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-multiViewport,multiple viewports>> feature is not enabled, pname:viewportCount must: be `1`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-multiViewport,multiple viewports>> feature is not enabled, pname:scissorCount must: be `1`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:viewportCount must: be between `1` and sname:VkPhysicalDeviceLimits::pname:maxViewports, inclusive"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:scissorCount must: be between `1` and sname:VkPhysicalDeviceLimits::pname:maxViewports, inclusive"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The values of pname:scissorCount and pname:viewportCount must: be identical"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkPipelineRasterizationStateCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineRasterizationStateCreateFlags"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"             ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"depthClampEnable"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"rasterizerDiscardEnable"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPolygonMode"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"polygonMode"
										]
									}
								]
							},
							"                       ",
							{
								"comment": " optional (GL45) "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCullModeFlags"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"cullMode"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFrontFace"
										]
									},
									"            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"frontFace"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"depthBiasEnable"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"depthBiasConstantFactor"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"depthBiasClamp"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"depthBiasSlopeFactor"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"lineWidth"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-depthClamp,depth clamping>> feature is not enabled, the value of pname:depthClampEnable must: be ename:VK_FALSE"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-fillModeNonSolid,non-solid fill modes>> feature is not enabled, the value of pname:polygonMode must: be ename:VK_POLYGON_MODE_FILL"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkPipelineMultisampleStateCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineMultisampleStateCreateFlags"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"        ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSampleCountFlagBits"
										]
									},
									"  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"rasterizationSamples"
										]
									}
								]
							},
							"           ",
							{
								"comment": " Number of samples used for rasterization "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sampleShadingEnable"
										]
									}
								]
							},
							"            ",
							{
								"comment": " optional (GL45) "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"minSampleShading"
										]
									}
								]
							},
							"               ",
							{
								"comment": " optional (GL45) "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "latexmath:[$\\lceil{\\mathit{rasterizationSamples} \\over 32}\\rceil$]"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSampleMask"
										]
									},
									"*    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSampleMask"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Array of sampleMask words "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"alphaToCoverageEnable"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"alphaToOneEnable"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-sampleRateShading,sample rate shading>> feature is not enabled, pname:sampleShadingEnable must: be ename:VK_FALSE"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-alphaToOne,alpha to one>> feature is not enabled, pname:alphaToOneEnable must: be ename:VK_FALSE"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:minSampleShading must: be in the range latexmath:[$[0,1\\]$]"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkPipelineColorBlendAttachmentState"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"blendEnable"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBlendFactor"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcColorBlendFactor"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBlendFactor"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstColorBlendFactor"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBlendOp"
										]
									},
									"              ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"colorBlendOp"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBlendFactor"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcAlphaBlendFactor"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBlendFactor"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstAlphaBlendFactor"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBlendOp"
										]
									},
									"              ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"alphaBlendOp"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkColorComponentFlags"
										]
									},
									"  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"colorWriteMask"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-dualSrcBlend,dual source blending>> feature is not enabled, pname:srcColorBlendFactor mustnot: be ename:VK_BLEND_SRC1_COLOR, ename:VK_BLEND_ONE_MINUS_SRC1_COLOR, ename:VK_BLEND_SRC1_ALPHA, or ename:VK_BLEND_ONE_MINUS_SRC1_ALPHA"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-dualSrcBlend,dual source blending>> feature is not enabled, pname:dstColorBlendFactor mustnot: be ename:VK_BLEND_SRC1_COLOR, ename:VK_BLEND_ONE_MINUS_SRC1_COLOR, ename:VK_BLEND_SRC1_ALPHA, or ename:VK_BLEND_ONE_MINUS_SRC1_ALPHA"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-dualSrcBlend,dual source blending>> feature is not enabled, pname:srcAlphaBlendFactor mustnot: be ename:VK_BLEND_SRC1_COLOR, ename:VK_BLEND_ONE_MINUS_SRC1_COLOR, ename:VK_BLEND_SRC1_ALPHA, or ename:VK_BLEND_ONE_MINUS_SRC1_ALPHA"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-dualSrcBlend,dual source blending>> feature is not enabled, pname:dstAlphaBlendFactor mustnot: be ename:VK_BLEND_SRC1_COLOR, ename:VK_BLEND_ONE_MINUS_SRC1_COLOR, ename:VK_BLEND_SRC1_ALPHA, or ename:VK_BLEND_ONE_MINUS_SRC1_ALPHA"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkPipelineColorBlendStateCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineColorBlendStateCreateFlags"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"         ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"logicOpEnable"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "noautovalidity",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkLogicOp"
										]
									},
									"              ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"logicOp"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"attachmentCount"
										]
									}
								]
							},
							"                ",
							{
								"comment": " # of pAttachments "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "attachmentCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineColorBlendAttachmentState"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAttachments"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"blendConstants"
										]
									},
									"[4]"
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-independentBlend,independent blending>> feature is not enabled, all elements of pname:pAttachments must: be identical"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-logicOp,logic operations>> feature is not enabled, pname:logicOpEnable must: be ename:VK_FALSE"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:logicOpEnable is ename:VK_TRUE, pname:logicOp must: be a valid elink:VkLogicOp value"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkPipelineDynamicStateCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineDynamicStateCreateFlags"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"            ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dynamicStateCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "dynamicStateCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDynamicState"
										]
									},
									"*  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pDynamicStates"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkStencilOpState"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStencilOp"
										]
									},
									"            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"failOp"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStencilOp"
										]
									},
									"            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"passOp"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStencilOp"
										]
									},
									"            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"depthFailOp"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCompareOp"
										]
									},
									"            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"compareOp"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"compareMask"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"writeMask"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"reference"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkPipelineDepthStencilStateCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineDepthStencilStateCreateFlags"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"       ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"depthTestEnable"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"depthWriteEnable"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCompareOp"
										]
									},
									"            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"depthCompareOp"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"depthBoundsTestEnable"
										]
									}
								]
							},
							"          ",
							{
								"comment": " optional (depth_bounds_test) "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"stencilTestEnable"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStencilOpState"
										]
									},
									"       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"front"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStencilOpState"
										]
									},
									"       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"back"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"minDepthBounds"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxDepthBounds"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-depthBounds,depth bounds testing>> feature is not enabled, the value of pname:depthBoundsTestEnable must: be ename:VK_FALSE"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkGraphicsPipelineCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineCreateFlags"
										]
									},
									"  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pipeline creation flags "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"stageCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "stageCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineShaderStageCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pStages"
										]
									}
								]
							},
							"        ",
							{
								"comment": " One entry for each active shader stage "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineVertexInputStateCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pVertexInputState"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineInputAssemblyStateCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pInputAssemblyState"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "noautovalidity",
										"value": "true"
									},
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineTessellationStateCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pTessellationState"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "noautovalidity",
										"value": "true"
									},
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineViewportStateCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pViewportState"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineRasterizationStateCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pRasterizationState"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "noautovalidity",
										"value": "true"
									},
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineMultisampleStateCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pMultisampleState"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "noautovalidity",
										"value": "true"
									},
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineDepthStencilStateCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pDepthStencilState"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "noautovalidity",
										"value": "true"
									},
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineColorBlendStateCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pColorBlendState"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineDynamicStateCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pDynamicState"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineLayout"
										]
									},
									"       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"layout"
										]
									}
								]
							},
							"                         ",
							{
								"comment": " Interface layout of the pipeline "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkRenderPass"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"renderPass"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"subpass"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "noautovalidity",
										"value": "true"
									},
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipeline"
										]
									},
									"      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"basePipelineHandle"
										]
									}
								]
							},
							"             ",
							{
								"comment": " If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is nonzero, it specifies the handle of the base pipeline this is a derivative of "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"int32_t"
										]
									},
									"                ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"basePipelineIndex"
										]
									}
								]
							},
							"              ",
							{
								"comment": " If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is not -1, it specifies an index into pCreateInfos of the base pipeline this is a derivative of "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:flags contains the ename:VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and pname:basePipelineIndex is not `-1`, pname:basePipelineHandle must: be sname:VK_NULL_HANDLE"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:flags contains the ename:VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and pname:basePipelineIndex is not `-1`, it must: be a valid index into the calling command's pname:pCreateInfos parameter"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:flags contains the ename:VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and pname:basePipelineHandle is not sname:VK_NULL_HANDLE, pname:basePipelineIndex must: be `-1`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:flags contains the ename:VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and pname:basePipelineHandle is not sname:VK_NULL_HANDLE, pname:basePipelineHandle must: be a valid sname:VkPipeline handle"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:flags contains the ename:VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and pname:basePipelineHandle is not sname:VK_NULL_HANDLE, it must: be a valid handle to a graphics sname:VkPipeline"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:stageCount must: be greater than or equal to `1`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The pname:stage member of each element of pname:pStages must: be unique"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The pname:stage member of one element of pname:pStages must: be ename:VK_SHADER_STAGE_VERTEX_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The pname:stage member of any given element of pname:pStages mustnot: be ename:VK_SHADER_STAGE_COMPUTE_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:pStages includes a tessellation control shader stage, it must: include a tessellation evaluation shader stage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:pStages includes a tessellation evaluation shader stage, it must: include a tessellation control shader stage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:pStages includes a tessellation control shader stage and a tessellation evaluation shader stage, pname:pTessellationState mustnot: be `NULL`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:pStages includes both a tessellation control shader stage and a tessellation evaluation shader stage, the shader code of at least one must: contain an code:OpExecutionMode instruction that specifies the type of subdivision in the pipeline"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:pStages includes both a tessellation control shader stage and a tessellation evaluation shader stage, and the shader code of both contain an code:OpExecutionMode instruction that specifies the type of subdivision in the pipeline, they must: both specify the same subdivision mode"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:pStages includes both a tessellation control shader stage and a tessellation evaluation shader stage, the shader code of at least one must: contain an code:OpExecutionMode instruction that specifies the output patch size in the pipeline"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:pStages includes both a tessellation control shader stage and a tessellation evaluation shader stage, and the shader code of both contain an code:OpExecutionMode instruction that specifies the out patch size in the pipeline, they must: both specify the same patch size"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:pStages includes tessellation shader stages, the pname:topology member of pname:pInputAssembly must: be ename:VK_PRIMITIVE_TOPOLOGY_PATCH_LIST"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:pStages includes a geometry shader stage, and doesn't include any tessellation shader stages, its shader code must: contain an code:OpExecutionMode instruction that specifies an input primitive type that is <<shaders-geometry-execution, compatible>> with the primitive topology specified in pname:pInputAssembly"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:pStages includes a geometry shader stage, and also includes tessellation shader stages, its shader code must: contain an code:OpExecutionMode instruction that specifies an input primitive type that is <<shaders-geometry-execution, compatible>> with the primitive topology that is output by the tessellation stages"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:pStages includes a fragment shader stage and a geometry shader stage, and the fragment shader code reads from an input variable that is decorated with code:PrimitiveID, then the geometry shader code must: write to a matching output variable, decorated with code:PrimitiveID, in all execution paths"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:pStages includes a fragment shader stage, its shader code mustnot: read from any input attachment that is defined as ename:VK_ATTACHMENT_UNUSED in pname:subpass"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The shader code for the entry points identified by pname:pStages, and the rest of the state identified by this structure must: adhere to the pipeline linking rules described in the <<interfaces,Shader Interfaces>> chapter"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:subpass uses a depth/stencil attachment in pname:renderpass that has a layout of ename:VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL in the sname:VkAttachmentReference defined by pname:subpass, and pname:pDepthStencilState is not `NULL`, the pname:depthWriteEnable member of pname:pDepthStencilState must: be ename:VK_FALSE"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:subpass uses a depth/stencil attachment in pname:renderpass that has a layout of ename:VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL in the sname:VkAttachmentReference defined by pname:subpass, and pname:pDepthStencilState is not `NULL`, the value of the pname:failOp, pname:passOp and pname:depthFailOp members of each of the pname:front and pname:back members of pname:pDepthStencilState must: be ename:VK_STENCIL_OP_KEEP"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:pColorBlendState is not `NULL`, the value of the pname:blendEnable member of each element of the pname:pAttachment member of pname:pColorBlendState must: be ename:VK_FALSE if the pname:format of the attachment referred to in pname:subpass of pname:renderPass does not support color blend operations, as specified by the ename:VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT flag in sname:VkFormatProperties::pname:linearTilingFeatures or sname:VkFormatProperties::pname:optimalTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:pColorBlendState is not `NULL`, The pname:attachmentCount member of pname:pColorBlendState must: be equal to the value of pname:colorAttachmentCount used to create pname:subpass"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If no element of the pname:pDynamicStates member of pname:pDynamicState is ename:VK_DYNAMIC_STATE_VIEWPORT, the pname:pViewports member of pname:pViewportState must: be a pointer to an array of pname:pViewportState->viewportCount sname:VkViewport structures"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If no element of the pname:pDynamicStates member of pname:pDynamicState is ename:VK_DYNAMIC_STATE_SCISSOR, the pname:pScissors member of pname:pViewportState must: be a pointer to an array of pname:pViewportState->scissorCount sname:VkRect2D structures"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the wide lines feature is not enabled, and no element of the pname:pDynamicStates member of pname:pDynamicState is ename:VK_DYNAMIC_STATE_LINE_WIDTH, the pname:lineWidth member of pname:pRasterizationState must: be `1.0`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the pname:rasterizerDiscardEnable member of pname:pRasterizationState is ename:VK_FALSE, pname:pViewportState must: be a pointer to a valid sname:VkPipelineViewportStateCreateInfo structure"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the pname:rasterizerDiscardEnable member of pname:pRasterizationState is ename:VK_FALSE, pname:pMultisampleState must: be a pointer to a valid sname:VkPipelineMultisampleStateCreateInfo structure"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the pname:rasterizerDiscardEnable member of pname:pRasterizationState is ename:VK_FALSE, and pname:subpass uses a depth/stencil attachment, pname:pDepthStencilState must: be a pointer to a valid sname:VkPipelineDepthStencilStateCreateInfo structure"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the pname:rasterizerDiscardEnable member of pname:pRasterizationState is ename:VK_FALSE, and pname:subpass uses color attachments, pname:pColorBlendState must: be a pointer to a valid sname:VkPipelineColorBlendStateCreateInfo structure"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the depth bias clamping feature is not enabled, no element of the pname:pDynamicStates member of pname:pDynamicState is ename:VK_DYNAMIC_STATE_DEPTH_BIAS, and the pname:depthBiasEnable member of pname:pDepthStencil is ename:VK_TRUE, the pname:depthBiasClamp member of pname:pDepthStencil must: be `0.0`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If no element of the pname:pDynamicStates member of pname:pDynamicState is ename:VK_DYNAMIC_STATE_DEPTH_BOUNDS, and the pname:depthBoundsTestEnable member of pname:pDepthStencil is ename:VK_TRUE, the value of the pname:minDepthBounds and pname:maxDepthBounds members of pname:pDepthStencil must: be between `0.0` and `1.0`, inclusive"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:layout must: be <<descriptorsets-pipelinelayout-consistency,consistent>> with all shaders specified in pname:pStages"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:subpass uses color and/or depth/stencil attachments, then the pname:rasterizationSamples member of pname:pMultisampleState must: be the same as the sample count for those subpass attachments"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:subpass does not use any color and/or depth/stencil attachments, then the pname:rasterizationSamples member of pname:pMultisampleState must: follow the rules for a <<renderpass-noattachments, zero-attachment subpass>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:subpass must: be a valid subpass within pname:renderpass"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkPipelineCacheCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineCacheCreateFlags"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                   ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"size_t"
										]
									},
									"                 ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"initialDataSize"
										]
									}
								]
							},
							"                ",
							{
								"comment": " Size of initial data to populate cache, in bytes "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "initialDataSize"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pInitialData"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Initial data to populate cache "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:initialDataSize is not `0`, it must: be equal to the size of pname:pInitialData, as returned by fname:vkGetPipelineCacheData when pname:pInitialData was originally retrieved"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:initialDataSize is not `0`, pname:pInitialData must: have been retrieved from a previous call to fname:vkGetPipelineCacheData"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkPushConstantRange"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkShaderStageFlags"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"stageFlags"
										]
									}
								]
							},
							"                     ",
							{
								"comment": " Which stages use the range "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"offset"
										]
									}
								]
							},
							"                         ",
							{
								"comment": " Start of the range, in bytes "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"size"
										]
									}
								]
							},
							"                           ",
							{
								"comment": " Size of the range, in bytes "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The sum of pname:offset and pname:size must: be less than or equal to the value of sname:VkPhysicalDeviceLimits::pname:maxPushConstantsSize"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:size must: be greater than `0`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:size must: be a multiple of `4`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkPipelineLayoutCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineLayoutCreateFlags"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                  ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"setLayoutCount"
										]
									}
								]
							},
							"                 ",
							{
								"comment": " Number of descriptor sets interfaced by the pipeline "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "setLayoutCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorSetLayout"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSetLayouts"
										]
									}
								]
							},
							"              ",
							{
								"comment": " Array of setCount number of descriptor set layout objects defining the layout of the "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pushConstantRangeCount"
										]
									}
								]
							},
							"         ",
							{
								"comment": " Number of push-constant ranges used by the pipeline "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "pushConstantRangeCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPushConstantRange"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pPushConstantRanges"
										]
									}
								]
							},
							"        ",
							{
								"comment": " Array of pushConstantRangeCount number of ranges used by various shader stages "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:setLayoutCount must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxBoundDescriptorSets"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The total number of descriptors of the type ename:VK_DESCRIPTOR_TYPE_SAMPLER and ename:VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER accessible to any given shader stage across all elements of pname:pSetLayouts must: be less than or equal to the value of sname:VkPhysicalDeviceLimits::pname:maxPerStageDescriptorSamplers"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The total number of descriptors of the type ename:VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER and ename:VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC accessible to any given shader stage across all elements of pname:pSetLayouts must: be less than or equal to the value of sname:VkPhysicalDeviceLimits::pname:maxPerStageDescriptorUniformBuffers"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The total number of descriptors of the type ename:VK_DESCRIPTOR_TYPE_STORAGE_BUFFER and ename:VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC accessible to any given shader stage across all elements of pname:pSetLayouts must: be less than or equal to the value of sname:VkPhysicalDeviceLimits::pname:maxPerStageDescriptorStorageBuffers"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The total number of descriptors of the type ename:VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, ename:VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, and ename:VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER accessible to any given shader stage across all elements of pname:pSetLayouts must: be less than or equal to the value of sname:VkPhysicalDeviceLimits::pname:maxPerStageDescriptorSampledImages"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The total number of descriptors of the type ename:VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, and ename:VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER accessible to any given shader stage across all elements of pname:pSetLayouts must: be less than or equal to the value of sname:VkPhysicalDeviceLimits::pname:maxPerStageDescriptorStorageImages"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkSamplerCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSamplerCreateFlags"
										]
									},
									"   ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFilter"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"magFilter"
										]
									}
								]
							},
							"                      ",
							{
								"comment": " Filter mode for magnification "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFilter"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"minFilter"
										]
									}
								]
							},
							"                      ",
							{
								"comment": " Filter mode for minifiation "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSamplerMipmapMode"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"mipmapMode"
										]
									}
								]
							},
							"                     ",
							{
								"comment": " Mipmap selection mode "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSamplerAddressMode"
										]
									},
									"   ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"addressModeU"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSamplerAddressMode"
										]
									},
									"   ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"addressModeV"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSamplerAddressMode"
										]
									},
									"   ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"addressModeW"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"mipLodBias"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"anisotropyEnable"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxAnisotropy"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"compareEnable"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "noautovalidity",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCompareOp"
										]
									},
									"            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"compareOp"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"minLod"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxLod"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "noautovalidity",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBorderColor"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"borderColor"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"unnormalizedCoordinates"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The absolute value of pname:mipLodBias must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxSamplerLodBias"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-samplerAnisotropy,anisotropic sampling>> feature is not enabled, pname:anisotropyEnable must: be ename:VK_FALSE"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:anisotropyEnable is ename:VK_TRUE, the value of pname:maxAnisotropy must: be between `1.0` and sname:VkPhysicalDeviceLimits::pname:maxSamplerAnisotropy, inclusive"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:unnormalizedCoordinates is ename:VK_TRUE, pname:minFilter and pname:magFilter must: be equal"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:unnormalizedCoordinates is ename:VK_TRUE, pname:mipmapMode must: be ename:VK_SAMPLER_MIPMAP_MODE_NEAREST"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:unnormalizedCoordinates is ename:VK_TRUE, pname:minLod and pname:maxLod must: be zero"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:unnormalizedCoordinates is ename:VK_TRUE, pname:addressModeU and pname:addressModeV must: each be either ename:VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE or ename:VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:unnormalizedCoordinates is ename:VK_TRUE, pname:anisotropyEnable must: be ename:VK_FALSE"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:unnormalizedCoordinates is ename:VK_TRUE, pname:compareEnable must: be ename:VK_FALSE"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any of pname:addressModeU, pname:addressModeV or pname:addressModeW are ename:VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER, pname:borderColor must: be a valid elink:VkBorderColor value"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the VK_KHR_mirror_clamp_to_edge extension is not enabled, pname:addressModeU, pname:addressModeV and pname:addressModeW mustnot: be ename:VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:compareEnable is ename:VK_TRUE, pname:compareOp must: be a valid elink:VkCompareOp value"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkCommandPoolCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandPoolCreateFlags"
										]
									},
									"   ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Command pool creation flags "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queueFamilyIndex"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:queueFamilyIndex must: be the index of a queue family available in the calling command's pname:device parameter"
										]
									},
									"\n            "
								]
							},
							"\n         "
						]
					},
					"\n         ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkCommandBufferAllocateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandPool"
										]
									},
									"  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandPool"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBufferLevel"
										]
									},
									"       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"level"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBufferCount"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkCommandBufferInheritanceInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "noautovalidity",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkRenderPass"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"renderPass"
										]
									}
								]
							},
							"                     ",
							{
								"comment": " Render pass for secondary command buffers "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"subpass"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "noautovalidity",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFramebuffer"
										]
									},
									"   ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"framebuffer"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Framebuffer for secondary command buffers "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"occlusionQueryEnable"
										]
									}
								]
							},
							"           ",
							{
								"comment": " Whether this secondary command buffer may be executed during an occlusion query "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "noautovalidity",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkQueryControlFlags"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queryFlags"
										]
									}
								]
							},
							"                     ",
							{
								"comment": " Query flags used by this secondary command buffer, if executed during an occlusion query "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "noautovalidity",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkQueryPipelineStatisticFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pipelineStatistics"
										]
									}
								]
							},
							"      ",
							{
								"comment": " Pipeline statistics that may be counted for this secondary command buffer "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-inheritedQueries,inherited queries>> feature is not enabled, pname:occlusionQueryEnable must: be ename:VK_FALSE"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-inheritedQueries,inherited queries>> feature is enabled, pname:queryFlags must: be a valid combination of elink:VkQueryControlFlagBits values"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-pipelineStatisticsQuery,pipeline statistics queries>> feature is not enabled, pname:pipelineStatistics must: be code:0"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkCommandBufferBeginInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBufferUsageFlags"
										]
									},
									"  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Command buffer usage flags "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "noautovalidity",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBufferInheritanceInfo"
										]
									},
									"*       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pInheritanceInfo"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to inheritance info for secondary command buffers "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:flags contains ename:VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT, the pname:renderPass member of pname:pInheritanceInfo must: be a valid sname:VkRenderPass"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:flags contains ename:VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT, the pname:subpass member of pname:pInheritanceInfo must: be a valid subpass index within the pname:renderPass member of pname:pInheritanceInfo"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:flags contains ename:VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT, the pname:framebuffer member of pname:pInheritanceInfo must: be either sname:VK_NULL_HANDLE, or a valid sname:VkFramebuffer that is compatible with the pname:renderPass member of pname:pInheritanceInfo"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkRenderPassBeginInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkRenderPass"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"renderPass"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFramebuffer"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"framebuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkRect2D"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"renderArea"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"clearValueCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "clearValueCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkClearValue"
										]
									},
									"*    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pClearValues"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:clearValueCount must: be greater than or equal to the number of attachments in pname:renderPass that specify a pname:loadOp of ename:VK_ATTACHMENT_LOAD_OP_CLEAR"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "union"
							},
							{
								"name": "name",
								"value": "VkClearColorValue"
							},
							{
								"name": "comment",
								"value": "// Union allowing specification of floating point, integer, or unsigned integer color data. Actual value selected is based on image/attachment being cleared."
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"float32"
										]
									},
									"[4]"
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"int32_t"
										]
									},
									"                ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"int32"
										]
									},
									"[4]"
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"uint32"
										]
									},
									"[4]"
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkClearDepthStencilValue"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"depth"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"stencil"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "union"
							},
							{
								"name": "name",
								"value": "VkClearValue"
							},
							{
								"name": "comment",
								"value": "// Union allowing specification of color or depth and stencil values. Actual value selected is based on attachment being cleared."
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkClearColorValue"
										]
									},
									"      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"color"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkClearDepthStencilValue"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"depthStencil"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkClearAttachment"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageAspectFlags"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"aspectMask"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"colorAttachment"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkClearValue"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"clearValue"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:aspectMask includes ename:VK_IMAGE_ASPECT_COLOR_BIT, it mustnot: include ename:VK_IMAGE_ASPECT_DEPTH_BIT or ename:VK_IMAGE_ASPECT_STENCIL_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:aspectMask mustnot: include ename:VK_IMAGE_ASPECT_METADATA_BIT"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkAttachmentDescription"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAttachmentDescriptionFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFormat"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"format"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSampleCountFlagBits"
										]
									},
									"  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"samples"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAttachmentLoadOp"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"loadOp"
										]
									}
								]
							},
							"                         ",
							{
								"comment": " Load operation for color or depth data "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAttachmentStoreOp"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"storeOp"
										]
									}
								]
							},
							"                        ",
							{
								"comment": " Store operation for color or depth data "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAttachmentLoadOp"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"stencilLoadOp"
										]
									}
								]
							},
							"                  ",
							{
								"comment": " Load operation for stencil data "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAttachmentStoreOp"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"stencilStoreOp"
										]
									}
								]
							},
							"                 ",
							{
								"comment": " Store operation for stencil data "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageLayout"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"initialLayout"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageLayout"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"finalLayout"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkAttachmentReference"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"attachment"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageLayout"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"layout"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkSubpassDescription"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSubpassDescriptionFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineBindPoint"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pipelineBindPoint"
										]
									}
								]
							},
							"              ",
							{
								"comment": " Must be VK_PIPELINE_BIND_POINT_GRAPHICS for now "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"inputAttachmentCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "inputAttachmentCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAttachmentReference"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pInputAttachments"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"colorAttachmentCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "colorAttachmentCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAttachmentReference"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pColorAttachments"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "colorAttachmentCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAttachmentReference"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pResolveAttachments"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAttachmentReference"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pDepthStencilAttachment"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"preserveAttachmentCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "preserveAttachmentCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pPreserveAttachments"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:pipelineBindPoint must: be ename:VK_PIPELINE_BIND_POINT_GRAPHICS"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:colorCount must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxColorAttachments"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the first use of an attachment in this render pass is as an input attachment, and the attachment is not also used as a color or depth/stencil attachment in the same subpass, then pname:loadOp mustnot: be ename:VK_ATTACHMENT_LOAD_OP_CLEAR"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:pResolveAttachments is not `NULL`, for each resolve attachment that does not have the value ename:VK_ATTACHMENT_UNUSED, the corresponding color attachment mustnot: have the value ename:VK_ATTACHMENT_UNUSED"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:pResolveAttachments is not `NULL`, the sample count of each element of pname:pColorAttachments must: be anything other than ename:VK_SAMPLE_COUNT_1_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pResolveAttachments must: have a sample count of ename:VK_SAMPLE_COUNT_1_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pResolveAttachments must: have the same elink:VkFormat as its corresponding color attachment"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All attachments in pname:pColorAttachments and pname:pDepthStencilAttachment that are not ename:VK_ATTACHMENT_UNUSED must: have the same sample count"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any input attachments are ename:VK_ATTACHMENT_UNUSED, then any pipelines bound during the subpass mustnot: accesss those input attachments from the fragment shader"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The pname:attachment member of any element of pname:pPreserveAttachments mustnot: be ename:VK_ATTACHMENT_UNUSED"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pPreserveAttachments mustnot: also be an element of any other member of the subpass description"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any attachment is used as both an input attachment and a color or depth/stencil attachment, then each use must use the same pname:layout"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkSubpassDependency"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcSubpass"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstSubpass"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineStageFlags"
										]
									},
									"   ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcStageMask"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineStageFlags"
										]
									},
									"   ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstStageMask"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAccessFlags"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcAccessMask"
										]
									}
								]
							},
							"                  ",
							{
								"comment": " Memory accesses from the source of the dependency to synchronize "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAccessFlags"
										]
									},
									"          ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstAccessMask"
										]
									}
								]
							},
							"                  ",
							{
								"comment": " Memory accesses from the destination of the dependency to synchronize "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDependencyFlags"
										]
									},
									"      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dependencyFlags"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-geometryShader,geometry shaders>> feature is not enabled, pname:srcStageMask mustnot: contain ename:VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-geometryShader,geometry shaders>> feature is not enabled, pname:dstStageMask mustnot: contain ename:VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-tessellationShader,tessellation shaders>> feature is not enabled, pname:srcStageMask mustnot: contain ename:VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or ename:VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-tessellationShader,tessellation shaders>> feature is not enabled, pname:dstStageMask mustnot: contain ename:VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or ename:VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:srcSubpass must: be less than or equal to pname:dstSubpass, unless one of them is ename:VK_SUBPASS_EXTERNAL, to avoid cyclic dependencies and ensure a valid execution order"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The values of pname:srcSubpass and pname:dstSubpass mustnot: both be equal to ename:VK_SUBPASS_EXTERNAL"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkRenderPassCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkRenderPassCreateFlags"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                      ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"   ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"attachmentCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "attachmentCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAttachmentDescription"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAttachments"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"subpassCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "subpassCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSubpassDescription"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSubpasses"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dependencyCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "dependencyCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSubpassDependency"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pDependencies"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any two subpasses operate on attachments with overlapping ranges of the same sname:VkDeviceMemory object, and at least one subpass writes to that area of sname:VkDeviceMemory, a subpass dependency must: be included (either directly or via some intermediate subpasses) between them"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the pname:attachment member of any element of pname:pInputAttachments, pname:pColorAttachments, pname:pResolveAttachments or pname:pDepthStencilAttachment, or the attachment indexed by any element of pname:pPreserveAttachments in any given element of pname:pSubpasses is bound to a range of a sname:VkDeviceMemory object that overlaps with any other attachment in any subpass (including the same subpass), the sname:VkAttachmentDescription structures describing them must: include ename:VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT in pname:flags"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the pname:attachment member of any element of pname:pInputAttachments, pname:pColorAttachments, pname:pResolveAttachments or pname:pDepthStencilAttachment, or the value of any element of pname:pPreserveAttachments in any given element of pname:pSubpasses is not ename:VK_ATTACHMENT_UNUSED, it must: be less than the value of pname:attachmentCount"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of any element of the pname:pPreserveAttachments member in any given element of pname:pSubpasses mustnot: be ename:VK_ATTACHMENT_UNUSED"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkEventCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_EVENT_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkEventCreateFlags"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Event creation flags "
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkFenceCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_FENCE_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFenceCreateFlags"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Fence creation flags "
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkPhysicalDeviceFeatures"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"robustBufferAccess"
										]
									}
								]
							},
							"                ",
							{
								"comment": " out of bounds buffer accesses are well defined "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"fullDrawIndexUint32"
										]
									}
								]
							},
							"               ",
							{
								"comment": " full 32-bit range of indices for indexed draw calls "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"imageCubeArray"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " image views which are arrays of cube maps "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"independentBlend"
										]
									}
								]
							},
							"                  ",
							{
								"comment": " blending operations are controlled per-attachment "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"geometryShader"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " geometry stage "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"tessellationShader"
										]
									}
								]
							},
							"                ",
							{
								"comment": " tessellation control and evaluation stage "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sampleRateShading"
										]
									}
								]
							},
							"                 ",
							{
								"comment": " per-sample shading and interpolation "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dualSrcBlend"
										]
									}
								]
							},
							"                      ",
							{
								"comment": " blend operations which take two sources "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"logicOp"
										]
									}
								]
							},
							"                           ",
							{
								"comment": " logic operations "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"multiDrawIndirect"
										]
									}
								]
							},
							"                 ",
							{
								"comment": " multi draw indirect "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"drawIndirectFirstInstance"
										]
									}
								]
							},
							"         ",
							{
								"comment": " indirect draws can use non-zero firstInstance "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"depthClamp"
										]
									}
								]
							},
							"                        ",
							{
								"comment": " depth clamping "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"depthBiasClamp"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " depth bias clamping "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"fillModeNonSolid"
										]
									}
								]
							},
							"                  ",
							{
								"comment": " point and wireframe fill modes "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"depthBounds"
										]
									}
								]
							},
							"                       ",
							{
								"comment": " depth bounds test "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"wideLines"
										]
									}
								]
							},
							"                         ",
							{
								"comment": " lines with width greater than 1 "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"largePoints"
										]
									}
								]
							},
							"                       ",
							{
								"comment": " points with size greater than 1 "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"alphaToOne"
										]
									}
								]
							},
							"                        ",
							{
								"comment": " the fragment alpha component can be forced to maximum representable alpha value "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"multiViewport"
										]
									}
								]
							},
							"                     ",
							{
								"comment": " viewport arrays "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"samplerAnisotropy"
										]
									}
								]
							},
							"                 ",
							{
								"comment": " anisotropic sampler filtering "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"textureCompressionETC2"
										]
									}
								]
							},
							"            ",
							{
								"comment": " ETC texture compression formats "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"textureCompressionASTC_LDR"
										]
									}
								]
							},
							"        ",
							{
								"comment": " ASTC LDR texture compression formats "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"textureCompressionBC"
										]
									}
								]
							},
							"              ",
							{
								"comment": " BC1-7 texture compressed formats "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"occlusionQueryPrecise"
										]
									}
								]
							},
							"             ",
							{
								"comment": " precise occlusion queries returning actual sample counts "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pipelineStatisticsQuery"
										]
									}
								]
							},
							"           ",
							{
								"comment": " pipeline statistics query "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vertexPipelineStoresAndAtomics"
										]
									}
								]
							},
							"    ",
							{
								"comment": " stores and atomic ops on storage buffers and images are supported in vertex, tessellation, and geometry stages "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"fragmentStoresAndAtomics"
										]
									}
								]
							},
							"          ",
							{
								"comment": " stores and atomic ops on storage buffers and images are supported in the fragment stage "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"shaderTessellationAndGeometryPointSize"
										]
									}
								]
							},
							{
								"comment": " tessellation and geometry stages can export point size "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"shaderImageGatherExtended"
										]
									}
								]
							},
							"         ",
							{
								"comment": " image gather with run-time values and independent offsets "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"shaderStorageImageExtendedFormats"
										]
									}
								]
							},
							" ",
							{
								"comment": " the extended set of formats can be used for storage images "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"shaderStorageImageMultisample"
										]
									}
								]
							},
							"     ",
							{
								"comment": " multisample images can be used for storage images "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"shaderStorageImageReadWithoutFormat"
										]
									}
								]
							},
							"       ",
							{
								"comment": " read from storage image does not require format qualifier "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"shaderStorageImageWriteWithoutFormat"
										]
									}
								]
							},
							"      ",
							{
								"comment": " write to storage image does not require format qualifier "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"shaderUniformBufferArrayDynamicIndexing"
										]
									}
								]
							},
							"   ",
							{
								"comment": " arrays of uniform buffers can be accessed with dynamically uniform indices "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"shaderSampledImageArrayDynamicIndexing"
										]
									}
								]
							},
							"    ",
							{
								"comment": " arrays of sampled images can be accessed with dynamically uniform indices "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"shaderStorageBufferArrayDynamicIndexing"
										]
									}
								]
							},
							"   ",
							{
								"comment": " arrays of storage buffers can be accessed with dynamically uniform indices "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"shaderStorageImageArrayDynamicIndexing"
										]
									}
								]
							},
							"    ",
							{
								"comment": " arrays of storage images can be accessed with dynamically uniform indices "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"shaderClipDistance"
										]
									}
								]
							},
							"                ",
							{
								"comment": " clip distance in shaders "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"shaderCullDistance"
										]
									}
								]
							},
							"                ",
							{
								"comment": " cull distance in shaders "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"shaderFloat64"
										]
									}
								]
							},
							"                     ",
							{
								"comment": " 64-bit floats (doubles) in shaders "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"shaderInt64"
										]
									}
								]
							},
							"                       ",
							{
								"comment": " 64-bit integers in shaders "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"shaderInt16"
										]
									}
								]
							},
							"                       ",
							{
								"comment": " 16-bit integers in shaders "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"shaderResourceResidency"
										]
									}
								]
							},
							"           ",
							{
								"comment": " shader can use texture operations that return resource residency information (requires sparseNonResident support) "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"shaderResourceMinLod"
										]
									}
								]
							},
							"              ",
							{
								"comment": " shader can use texture operations that specify minimum resource level of detail "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sparseBinding"
										]
									}
								]
							},
							"                     ",
							{
								"comment": " Sparse resources support: Resource memory can be managed at opaque page level rather than object level "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sparseResidencyBuffer"
										]
									}
								]
							},
							"             ",
							{
								"comment": " Sparse resources support: GPU can access partially resident buffers  "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sparseResidencyImage2D"
										]
									}
								]
							},
							"            ",
							{
								"comment": " Sparse resources support: GPU can access partially resident 2D (non-MSAA non-depth/stencil) images  "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sparseResidencyImage3D"
										]
									}
								]
							},
							"            ",
							{
								"comment": " Sparse resources support: GPU can access partially resident 3D images  "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sparseResidency2Samples"
										]
									}
								]
							},
							"           ",
							{
								"comment": " Sparse resources support: GPU can access partially resident MSAA 2D images with 2 samples "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sparseResidency4Samples"
										]
									}
								]
							},
							"           ",
							{
								"comment": " Sparse resources support: GPU can access partially resident MSAA 2D images with 4 samples "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sparseResidency8Samples"
										]
									}
								]
							},
							"           ",
							{
								"comment": " Sparse resources support: GPU can access partially resident MSAA 2D images with 8 samples "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sparseResidency16Samples"
										]
									}
								]
							},
							"          ",
							{
								"comment": " Sparse resources support: GPU can access partially resident MSAA 2D images with 16 samples "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sparseResidencyAliased"
										]
									}
								]
							},
							"            ",
							{
								"comment": " Sparse resources support: GPU can correctly access data aliased into multiple locations (opt-in) "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"variableMultisampleRate"
										]
									}
								]
							},
							"           ",
							{
								"comment": " multisample rate must be the same for all pipelines in a subpass "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"inheritedQueries"
										]
									}
								]
							},
							"                  ",
							{
								"comment": " Queries may be inherited from primary to secondary command buffers "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the value of any member of this structure is ename:VK_FALSE, as returned by flink:vkGetPhysicalDeviceFeatures, then it must: be ename:VK_FALSE when passed as part of the sname:VkDeviceCreateInfo struct when creating a device"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkPhysicalDeviceSparseProperties"
							},
							{
								"name": "returnedonly",
								"value": "true"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"residencyStandard2DBlockShape"
										]
									}
								]
							},
							" ",
							{
								"comment": " Sparse resources support: GPU will access all 2D (single sample) sparse resources using the standard block shapes (based on pixel format) "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"residencyStandard2DMultisampleBlockShape"
										]
									}
								]
							},
							" ",
							{
								"comment": " Sparse resources support: GPU will access all 2D (multisample) sparse resources using the standard block shapes (based on pixel format) "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"residencyStandard3DBlockShape"
										]
									}
								]
							},
							" ",
							{
								"comment": " Sparse resources support: GPU will access all 3D sparse resources using the standard block shapes (based on pixel format) "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"residencyAlignedMipSize"
										]
									}
								]
							},
							"     ",
							{
								"comment": " Sparse resources support: Images with mip-level dimensions that are NOT a multiple of the block size will be placed in the mip tail "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"residencyNonResidentStrict"
										]
									}
								]
							},
							"  ",
							{
								"comment": " Sparse resources support: GPU can consistently access non-resident regions of a resource, all reads return as if data is 0, writes are discarded "
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkPhysicalDeviceLimits"
							},
							{
								"name": "returnedonly",
								"value": "true"
							}
						],
						"childNodes": [
							"\n                ",
							{
								"comment": " resource maximum sizes "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxImageDimension1D"
										]
									}
								]
							},
							"               ",
							{
								"comment": " max 1D image dimension "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxImageDimension2D"
										]
									}
								]
							},
							"               ",
							{
								"comment": " max 2D image dimension "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxImageDimension3D"
										]
									}
								]
							},
							"               ",
							{
								"comment": " max 3D image dimension "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxImageDimensionCube"
										]
									}
								]
							},
							"             ",
							{
								"comment": " max cubemap image dimension "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxImageArrayLayers"
										]
									}
								]
							},
							"               ",
							{
								"comment": " max layers for image arrays "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxTexelBufferElements"
										]
									}
								]
							},
							"            ",
							{
								"comment": " max texel buffer size (fstexels) "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxUniformBufferRange"
										]
									}
								]
							},
							"             ",
							{
								"comment": " max uniform buffer range (bytes) "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxStorageBufferRange"
										]
									}
								]
							},
							"             ",
							{
								"comment": " max storage buffer range (bytes) "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxPushConstantsSize"
										]
									}
								]
							},
							"              ",
							{
								"comment": " max size of the push constants pool (bytes) "
							},
							"\n                ",
							{
								"comment": " memory limits "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxMemoryAllocationCount"
										]
									}
								]
							},
							"          ",
							{
								"comment": " max number of device memory allocations supported "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxSamplerAllocationCount"
										]
									}
								]
							},
							"         ",
							{
								"comment": " max number of samplers that can be allocated on a device "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"bufferImageGranularity"
										]
									}
								]
							},
							"            ",
							{
								"comment": " Granularity (in bytes) at which buffers and images can be bound to adjacent memory for simultaneous usage "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sparseAddressSpaceSize"
										]
									}
								]
							},
							"            ",
							{
								"comment": " Total address space available for sparse allocations (bytes) "
							},
							"\n                ",
							{
								"comment": " descriptor set limits "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxBoundDescriptorSets"
										]
									}
								]
							},
							"                ",
							{
								"comment": " max number of descriptors sets that can be bound to a pipeline "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxPerStageDescriptorSamplers"
										]
									}
								]
							},
							"         ",
							{
								"comment": " max number of samplers allowed per-stage in a descriptor set "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxPerStageDescriptorUniformBuffers"
										]
									}
								]
							},
							"   ",
							{
								"comment": " max number of uniform buffers allowed per-stage in a descriptor set "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxPerStageDescriptorStorageBuffers"
										]
									}
								]
							},
							"   ",
							{
								"comment": " max number of storage buffers allowed per-stage in a descriptor set "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxPerStageDescriptorSampledImages"
										]
									}
								]
							},
							"    ",
							{
								"comment": " max number of sampled images allowed per-stage in a descriptor set "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxPerStageDescriptorStorageImages"
										]
									}
								]
							},
							"    ",
							{
								"comment": " max number of storage images allowed per-stage in a descriptor set "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxPerStageDescriptorInputAttachments"
										]
									}
								]
							},
							" ",
							{
								"comment": " max number of input attachments allowed per-stage in a descriptor set "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxPerStageResources"
										]
									}
								]
							},
							"                  ",
							{
								"comment": " max number of resources allowed by a single stage "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxDescriptorSetSamplers"
										]
									}
								]
							},
							"              ",
							{
								"comment": " max number of samplers allowed in all stages in a descriptor set "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxDescriptorSetUniformBuffers"
										]
									}
								]
							},
							"        ",
							{
								"comment": " max number of uniform buffers allowed in all stages in a descriptor set "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxDescriptorSetUniformBuffersDynamic"
										]
									}
								]
							},
							" ",
							{
								"comment": " max number of dynamic uniform buffers allowed in all stages in a descriptor set "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxDescriptorSetStorageBuffers"
										]
									}
								]
							},
							"        ",
							{
								"comment": " max number of storage buffers allowed in all stages in a descriptor set "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxDescriptorSetStorageBuffersDynamic"
										]
									}
								]
							},
							" ",
							{
								"comment": " max number of dynamic storage buffers allowed in all stages in a descriptor set "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxDescriptorSetSampledImages"
										]
									}
								]
							},
							"         ",
							{
								"comment": " max number of sampled images allowed in all stages in a descriptor set "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxDescriptorSetStorageImages"
										]
									}
								]
							},
							"         ",
							{
								"comment": " max number of storage images allowed in all stages in a descriptor set "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxDescriptorSetInputAttachments"
										]
									}
								]
							},
							"      ",
							{
								"comment": " max number of input attachments allowed in all stages in a descriptor set "
							},
							"\n                ",
							{
								"comment": " vertex stage limits "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxVertexInputAttributes"
										]
									}
								]
							},
							"          ",
							{
								"comment": " max number of vertex input attribute slots "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxVertexInputBindings"
										]
									}
								]
							},
							"            ",
							{
								"comment": " max number of vertex input binding slots "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxVertexInputAttributeOffset"
										]
									}
								]
							},
							"     ",
							{
								"comment": " max vertex input attribute offset added to vertex buffer offset "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxVertexInputBindingStride"
										]
									}
								]
							},
							"       ",
							{
								"comment": " max vertex input binding stride "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxVertexOutputComponents"
										]
									}
								]
							},
							"         ",
							{
								"comment": " max number of output components written by vertex shader "
							},
							"\n                ",
							{
								"comment": " tessellation control stage limits "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxTessellationGenerationLevel"
										]
									}
								]
							},
							"                   ",
							{
								"comment": " max level supported by tessellation primitive generator "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxTessellationPatchSize"
										]
									}
								]
							},
							"                  ",
							{
								"comment": " max patch size (vertices) "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxTessellationControlPerVertexInputComponents"
										]
									}
								]
							},
							"    ",
							{
								"comment": " max number of input components per-vertex in TCS "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxTessellationControlPerVertexOutputComponents"
										]
									}
								]
							},
							"   ",
							{
								"comment": " max number of output components per-vertex in TCS "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxTessellationControlPerPatchOutputComponents"
										]
									}
								]
							},
							"    ",
							{
								"comment": " max number of output components per-patch in TCS "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxTessellationControlTotalOutputComponents"
										]
									}
								]
							},
							"       ",
							{
								"comment": " max total number of per-vertex and per-patch output components in TCS "
							},
							"\n                ",
							{
								"comment": " tessellation evaluation stage limits "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxTessellationEvaluationInputComponents"
										]
									}
								]
							},
							"  ",
							{
								"comment": " max number of input components per vertex in TES "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxTessellationEvaluationOutputComponents"
										]
									}
								]
							},
							" ",
							{
								"comment": " max number of output components per vertex in TES "
							},
							"\n                ",
							{
								"comment": " geometry stage limits "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxGeometryShaderInvocations"
										]
									}
								]
							},
							"      ",
							{
								"comment": " max invocation count supported in geometry shader "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxGeometryInputComponents"
										]
									}
								]
							},
							"        ",
							{
								"comment": " max number of input components read in geometry stage "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxGeometryOutputComponents"
										]
									}
								]
							},
							"       ",
							{
								"comment": " max number of output components written in geometry stage "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxGeometryOutputVertices"
										]
									}
								]
							},
							"         ",
							{
								"comment": " max number of vertices that can be emitted in geometry stage "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxGeometryTotalOutputComponents"
										]
									}
								]
							},
							"  ",
							{
								"comment": " max total number of components (all vertices) written in geometry stage "
							},
							"\n                ",
							{
								"comment": " fragment stage limits "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxFragmentInputComponents"
										]
									}
								]
							},
							"        ",
							{
								"comment": " max number of input compontents read in fragment stage "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxFragmentOutputAttachments"
										]
									}
								]
							},
							"      ",
							{
								"comment": " max number of output attachments written in fragment stage "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxFragmentDualSrcAttachments"
										]
									}
								]
							},
							"     ",
							{
								"comment": " max number of output attachments written when using dual source blending "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxFragmentCombinedOutputResources"
										]
									}
								]
							},
							{
								"comment": " max total number of storage buffers, storage images and output buffers "
							},
							"\n                ",
							{
								"comment": " compute stage limits "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxComputeSharedMemorySize"
										]
									}
								]
							},
							"        ",
							{
								"comment": " max total storage size of work group local storage (bytes) "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxComputeWorkGroupCount"
										]
									},
									"[3]"
								]
							},
							"       ",
							{
								"comment": " max num of compute work groups that may be dispatched\n                                                                                                                     by a single command (x,y,z) "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxComputeWorkGroupInvocations"
										]
									}
								]
							},
							"    ",
							{
								"comment": " max total compute invocations in a single local work group "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxComputeWorkGroupSize"
										]
									},
									"[3]"
								]
							},
							"        ",
							{
								"comment": " max local size of a compute work group (x,y,z) "
							},
							"\n\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"subPixelPrecisionBits"
										]
									}
								]
							},
							"             ",
							{
								"comment": " number bits of subpixel precision in screen x and y"
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"subTexelPrecisionBits"
										]
									}
								]
							},
							"             ",
							{
								"comment": " number bits of precision for selecting texel weights"
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"mipmapPrecisionBits"
										]
									}
								]
							},
							"               ",
							{
								"comment": " number bits of precision for selecting mipmap weights "
							},
							"\n\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxDrawIndexedIndexValue"
										]
									}
								]
							},
							"          ",
							{
								"comment": " max index value for indexed draw calls (for 32-bit indices) "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxDrawIndirectCount"
										]
									}
								]
							},
							"              ",
							{
								"comment": " max draw count for indirect draw calls "
							},
							"\n\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxSamplerLodBias"
										]
									}
								]
							},
							"                 ",
							{
								"comment": " max absolute sampler level of detail bias "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxSamplerAnisotropy"
										]
									}
								]
							},
							"              ",
							{
								"comment": " max degree of sampler anisotropy "
							},
							"\n\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxViewports"
										]
									}
								]
							},
							"                      ",
							{
								"comment": " max number of active viewports "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxViewportDimensions"
										]
									},
									"[2]"
								]
							},
							"          ",
							{
								"comment": " max viewport dimensions (x,y) "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"viewportBoundsRange"
										]
									},
									"[2]"
								]
							},
							"            ",
							{
								"comment": " viewport bounds range (min,max) "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"viewportSubPixelBits"
										]
									}
								]
							},
							"              ",
							{
								"comment": " number bits of subpixel precision for viewport "
							},
							"\n\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"size_t"
										]
									},
									"                 ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"minMemoryMapAlignment"
										]
									}
								]
							},
							"             ",
							{
								"comment": " min required alignment of pointers returned by MapMemory (bytes) "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"minTexelBufferOffsetAlignment"
										]
									}
								]
							},
							"     ",
							{
								"comment": " min required alignment for texel buffer offsets (bytes)  "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"minUniformBufferOffsetAlignment"
										]
									}
								]
							},
							"   ",
							{
								"comment": " min required alignment for uniform buffer sizes and offsets (bytes) "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"minStorageBufferOffsetAlignment"
										]
									}
								]
							},
							"   ",
							{
								"comment": " min required alignment for storage buffer offsets (bytes) "
							},
							"\n\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"int32_t"
										]
									},
									"                ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"minTexelOffset"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " min texel offset for OpTextureSampleOffset "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxTexelOffset"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " max texel offset for OpTextureSampleOffset "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"int32_t"
										]
									},
									"                ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"minTexelGatherOffset"
										]
									}
								]
							},
							"              ",
							{
								"comment": " min texel offset for OpTextureGatherOffset "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxTexelGatherOffset"
										]
									}
								]
							},
							"              ",
							{
								"comment": " max texel offset for OpTextureGatherOffset "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"minInterpolationOffset"
										]
									}
								]
							},
							"            ",
							{
								"comment": " furthest negative offset for interpolateAtOffset "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxInterpolationOffset"
										]
									}
								]
							},
							"            ",
							{
								"comment": " furthest positive offset for interpolateAtOffset "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"subPixelInterpolationOffsetBits"
										]
									}
								]
							},
							"   ",
							{
								"comment": " number of subpixel bits for interpolateAtOffset "
							},
							"\n\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxFramebufferWidth"
										]
									}
								]
							},
							"               ",
							{
								"comment": " max width for a framebuffer "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxFramebufferHeight"
										]
									}
								]
							},
							"              ",
							{
								"comment": " max height for a framebuffer "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxFramebufferLayers"
										]
									}
								]
							},
							"              ",
							{
								"comment": " max layer count for a layered framebuffer "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSampleCountFlags"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"framebufferColorSampleCounts"
										]
									}
								]
							},
							"      ",
							{
								"comment": " supported color sample counts for a framebuffer "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSampleCountFlags"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"framebufferDepthSampleCounts"
										]
									}
								]
							},
							"      ",
							{
								"comment": " supported depth sample counts for a framebuffer "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSampleCountFlags"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"framebufferStencilSampleCounts"
										]
									}
								]
							},
							"    ",
							{
								"comment": " supported stencil sample counts for a framebuffer "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSampleCountFlags"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"framebufferNoAttachmentsSampleCounts"
										]
									}
								]
							},
							" ",
							{
								"comment": " supported sample counts for a framebuffer with no attachments "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxColorAttachments"
										]
									}
								]
							},
							"               ",
							{
								"comment": " max number of color attachments per subpass "
							},
							"\n\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSampleCountFlags"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sampledImageColorSampleCounts"
										]
									}
								]
							},
							"     ",
							{
								"comment": " supported color sample counts for a non-integer sampled image "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSampleCountFlags"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sampledImageIntegerSampleCounts"
										]
									}
								]
							},
							"   ",
							{
								"comment": " supported sample counts for an integer image "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSampleCountFlags"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sampledImageDepthSampleCounts"
										]
									}
								]
							},
							"     ",
							{
								"comment": " supported depth sample counts for a sampled image "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSampleCountFlags"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sampledImageStencilSampleCounts"
										]
									}
								]
							},
							"   ",
							{
								"comment": " supported stencil sample counts for a sampled image "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSampleCountFlags"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"storageImageSampleCounts"
										]
									}
								]
							},
							"          ",
							{
								"comment": " supported sample counts for a storage image "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxSampleMaskWords"
										]
									}
								]
							},
							"                ",
							{
								"comment": " max number of sample mask words "
							},
							"\n\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"timestampComputeAndGraphics"
										]
									}
								]
							},
							"       ",
							{
								"comment": " timestamps on graphics and compute queues "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"timestampPeriod"
										]
									}
								]
							},
							"                   ",
							{
								"comment": " number of nanoseconds it takes for timestamp query value to increment by 1 "
							},
							"\n\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxClipDistances"
										]
									}
								]
							},
							"                  ",
							{
								"comment": " max number of clip distances "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxCullDistances"
										]
									}
								]
							},
							"                  ",
							{
								"comment": " max number of cull distances "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxCombinedClipAndCullDistances"
										]
									}
								]
							},
							"   ",
							{
								"comment": " max combined number of user clipping "
							},
							"\n\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"discreteQueuePriorities"
										]
									}
								]
							},
							"           ",
							{
								"comment": " distinct queue priorities available  "
							},
							"\n\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pointSizeRange"
										]
									},
									"[2]"
								]
							},
							"                 ",
							{
								"comment": " range (min,max) of supported point sizes "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"lineWidthRange"
										]
									},
									"[2]"
								]
							},
							"                 ",
							{
								"comment": " range (min,max) of supported line widths "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pointSizeGranularity"
										]
									}
								]
							},
							"              ",
							{
								"comment": " granularity of supported point sizes "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"lineWidthGranularity"
										]
									}
								]
							},
							"              ",
							{
								"comment": " granularity of supported line widths "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"strictLines"
										]
									}
								]
							},
							"                       ",
							{
								"comment": " line rasterization follows preferred rules "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"standardSampleLocations"
										]
									}
								]
							},
							"           ",
							{
								"comment": " supports standard sample locations for all supported sample counts "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"optimalBufferCopyOffsetAlignment"
										]
									}
								]
							},
							"  ",
							{
								"comment": " optimal offset of buffer copies "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"optimalBufferCopyRowPitchAlignment"
										]
									}
								]
							},
							{
								"comment": " optimal pitch of buffer copies "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"nonCoherentAtomSize"
										]
									}
								]
							},
							"               ",
							{
								"comment": " minimum size and alignment for non-coherent host-mapped device memory access "
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkSemaphoreCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSemaphoreCreateFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Semaphore creation flags "
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkQueryPoolCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkQueryPoolCreateFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkQueryType"
										]
									},
									"            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queryType"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queryCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "noautovalidity",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkQueryPipelineStatisticFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pipelineStatistics"
										]
									}
								]
							},
							"      ",
							{
								"comment": " Optional "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-pipelineStatisticsQuery,pipeline statistics queries>> feature is not enabled, pname:queryType mustnot: be ename:VK_QUERY_TYPE_PIPELINE_STATISTICS"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:queryType is ename:VK_QUERY_TYPE_PIPELINE_STATISTICS, pname:pipelineStatistics must: be a valid combination of elink:VkQueryPipelineStatisticFlagBits values"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkFramebufferCreateInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFramebufferCreateFlags"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                     ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkRenderPass"
										]
									},
									"           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"renderPass"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"attachmentCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "attachmentCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageView"
										]
									},
									"*     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAttachments"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"width"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"height"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"layers"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:attachmentCount must: be equal to the attachment count specified in pname:renderPass"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pAttachments that is used as a color attachment or resolve attachment by pname:renderPass must: have been created with a pname:usage value including ename:VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pAttachments that is used as a depth/stencil attachment by pname:renderPass must: have been created with a pname:usage value including ename:VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pAttachments that is used as an input attachment by pname:renderPass must: have been created with a pname:usage value including ename:VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pAttachments must: have been created with an elink:VkFormat value that matches the elink:VkFormat specified by the corresponding sname:VkAttachmentDescription in pname:renderPass"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pAttachments must: have been created with a pname:samples value that matches the pname:samples value specified by the corresponding sname:VkAttachmentDescription in pname:renderPass"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pAttachments must: have dimensions at least as large as the corresponding framebuffer dimension"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pAttachments must: only specify a single mip-level"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pAttachments must: have been created with identity swizzle"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:width must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxFramebufferWidth"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:height must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxFramebufferHeight"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:layers must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxFramebufferLayers"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkDrawIndirectCommand"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vertexCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"instanceCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"firstVertex"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"firstInstance"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"For a given vertex buffer binding, any attribute data fetched must: be entirely contained within the corresponding vertex buffer binding, as described in <<fxvertex-input>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-drawIndirectFirstInstance,drawIndirectFirstInstance>> feature is not enabled, pname:firstInstance must: be code:0"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkDrawIndexedIndirectCommand"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"indexCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"instanceCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"firstIndex"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"int32_t"
										]
									},
									"                ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vertexOffset"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"firstInstance"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"For a given vertex buffer binding, any attribute data fetched must: be entirely contained within the corresponding vertex buffer binding, as described in <<fxvertex-input>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The total value of (pname:indexSize * (pname:firstIndex + pname:indexCount) + pname:offset) must: be less than or equal to the size of the currently bound index buffer, with indexSize being based on the type specified by pname:indexType, where the index buffer, pname:indexType, and pname:offset are specified via fname:vkCmdBindIndexBuffer"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-drawIndirectFirstInstance,drawIndirectFirstInstance>> feature is not enabled, pname:firstInstance must: be code:0"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkDispatchIndirectCommand"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"x"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"y"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"z"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:x must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxComputeWorkGroupCount[0]"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:y must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxComputeWorkGroupCount[1]"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:z must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxComputeWorkGroupCount[2]"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkSubmitInfo"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Type of structure. Should be VK_STRUCTURE_TYPE_SUBMIT_INFO "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                          ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"waitSemaphoreCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "waitSemaphoreCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSemaphore"
										]
									},
									"*     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pWaitSemaphores"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "waitSemaphoreCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineStageFlags"
										]
									},
									"*           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pWaitDstStageMask"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBufferCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "commandBufferCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									"*     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCommandBuffers"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"signalSemaphoreCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "signalSemaphoreCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSemaphore"
										]
									},
									"*     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSignalSemaphores"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pSignalSemaphores must: currently be unsignalled"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pCommandBuffers must: either have been recorded with the ename:VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT, or not currently be executing on the device"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pCommandBuffers must: be in the executable state"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any given element of pname:pCommandBuffers contains commands that execute secondary command buffers, those secondary command buffers must: have been recorded with the ename:VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT, or not currently be executing on the device"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any given element of pname:pCommandBuffers was created with ename:VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT, it mustnot: have been previously submitted without re-recording that command buffer"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pCommandBuffers mustnot: contain commands that execute a secondary command buffer, if that secondary command buffer has been recorded in another primary command buffer after it was recorded into this sname:VkCommandBuffer"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pCommandBuffers must: have been created on a sname:VkCommandPool that was created for the same queue family that the calling command's pname:queue belongs to"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pCommandBuffers mustnot: have been created with ename:VK_COMMAND_BUFFER_LEVEL_SECONDARY"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of sname:VkSemaphore in pname:pWaitSemaphores must: refer to a prior signal of that sname:VkSemaphore that won't be consumed by any other wait on that semaphore"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-geometryShader,geometry shaders>> feature is not enabled, any given element of pname:pWaitDstStageMask mustnot: contain ename:VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-tessellationShader,tessellation shaders>> feature is not enabled, any given element of pname:pWaitDstStageMask mustnot: contain ename:VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or ename:VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"comment": " WSI extensions "
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkDisplayPropertiesKHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDisplayKHR"
										]
									},
									"                     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"display"
										]
									}
								]
							},
							"                  ",
							{
								"comment": " Handle of the display object "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "null-terminated"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"char"
										]
									},
									"*                      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"displayName"
										]
									}
								]
							},
							"              ",
							{
								"comment": " Name of the display "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkExtent2D"
										]
									},
									"                       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalDimensions"
										]
									}
								]
							},
							"       ",
							{
								"comment": " In millimeters? "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkExtent2D"
										]
									},
									"                       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalResolution"
										]
									}
								]
							},
							"       ",
							{
								"comment": " Max resolution for CRT? "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSurfaceTransformFlagsKHR"
										]
									},
									"       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"supportedTransforms"
										]
									}
								]
							},
							"      ",
							{
								"comment": " one or more bits from VkSurfaceTransformFlagsKHR "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"                         ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"planeReorderPossible"
										]
									}
								]
							},
							"     ",
							{
								"comment": " VK_TRUE if the overlay plane's z-order can be changed on this display. "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"                         ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"persistentContent"
										]
									}
								]
							},
							"        ",
							{
								"comment": " VK_TRUE if this is a \"smart\" display that supports self-refresh/internal buffering. "
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkDisplayPlanePropertiesKHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDisplayKHR"
										]
									},
									"                     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"currentDisplay"
										]
									}
								]
							},
							"           ",
							{
								"comment": " Display the plane is currently associated with.  Will be VK_NULL_HANDLE if the plane is not in use. "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"                         ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"currentStackIndex"
										]
									}
								]
							},
							"        ",
							{
								"comment": " Current z-order of the plane. "
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkDisplayModeParametersKHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkExtent2D"
										]
									},
									"                       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"visibleRegion"
										]
									}
								]
							},
							"            ",
							{
								"comment": " Visible scannout region. "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"                         ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"refreshRate"
										]
									}
								]
							},
							"              ",
							{
								"comment": " Number of times per second the display is updated. "
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkDisplayModePropertiesKHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDisplayModeKHR"
										]
									},
									"                 ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"displayMode"
										]
									}
								]
							},
							"              ",
							{
								"comment": " Handle of this display mode. "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDisplayModeParametersKHR"
										]
									},
									"       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"parameters"
										]
									}
								]
							},
							"               ",
							{
								"comment": " The parameters this mode uses. "
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkDisplayModeCreateInfoKHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*                      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDisplayModeCreateFlagsKHR"
										]
									},
									"      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDisplayModeParametersKHR"
										]
									},
									"       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"parameters"
										]
									}
								]
							},
							"               ",
							{
								"comment": " The parameters this mode uses. "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The pname:width and pname:height members of the pname:visibleRegion member of pname:parameters must be greater than `0`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The pname:refreshRate member of pname:parameters must be greater than `0`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkDisplayPlaneCapabilitiesKHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDisplayPlaneAlphaFlagsKHR"
										]
									},
									"      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"supportedAlpha"
										]
									}
								]
							},
							"           ",
							{
								"comment": " Types of alpha blending supported, if any. "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkOffset2D"
										]
									},
									"                       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"minSrcPosition"
										]
									}
								]
							},
							"           ",
							{
								"comment": " Does the plane have any position and extent restrictions? "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkOffset2D"
										]
									},
									"                       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxSrcPosition"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkExtent2D"
										]
									},
									"                       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"minSrcExtent"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkExtent2D"
										]
									},
									"                       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxSrcExtent"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkOffset2D"
										]
									},
									"                       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"minDstPosition"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkOffset2D"
										]
									},
									"                       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxDstPosition"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkExtent2D"
										]
									},
									"                       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"minDstExtent"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkExtent2D"
										]
									},
									"                       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxDstExtent"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkDisplaySurfaceCreateInfoKHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*                      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDisplaySurfaceCreateFlagsKHR"
										]
									},
									"   ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDisplayModeKHR"
										]
									},
									"                 ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"displayMode"
										]
									}
								]
							},
							"              ",
							{
								"comment": " The mode to use when displaying this surface "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"                         ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"planeIndex"
										]
									}
								]
							},
							"               ",
							{
								"comment": " The plane on which this surface appears.  Must be between 0 and the value returned by vkGetPhysicalDeviceDisplayPlanePropertiesKHR() in pPropertyCount. "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"                         ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"planeStackIndex"
										]
									}
								]
							},
							"          ",
							{
								"comment": " The z-order of the plane. "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSurfaceTransformFlagBitsKHR"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"transform"
										]
									}
								]
							},
							"                ",
							{
								"comment": " Transform to apply to the images as part of the scannout operation "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									"                            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"globalAlpha"
										]
									}
								]
							},
							"              ",
							{
								"comment": " Global alpha value.  Must be between 0 and 1, inclusive.  Ignored if alphaMode is not VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDisplayPlaneAlphaFlagBitsKHR"
										]
									},
									"   ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"alphaMode"
										]
									}
								]
							},
							"                ",
							{
								"comment": " What type of alpha blending to use.  Must be a bit from vkGetDisplayPlanePropertiesKHR::supportedAlpha. "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkExtent2D"
										]
									},
									"                       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"imageExtent"
										]
									}
								]
							},
							"              ",
							{
								"comment": " size of the images to use with this surface "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:planeIndex must: be less than the number of display planes supported by the device as determined by calling fname:vkGetPhysicalDeviceDisplayPlanePropertiesKHR"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the pname:planeReorderPossible member of the sname:VkDisplayPropertiesKHR structure returned by fname:vkGetPhysicalDeviceDisplayPropertiesKHR for the display corresponding to pname:displayMode is ename:VK_TRUE then pname:planeStackIndex must: be less than the number of display planes supported by the device as determined by calling fname:vkGetPhysicalDeviceDisplayPlanePropertiesKHR; otherwise pname:planeStackIndex must: equal the pname:currentStackIndex member of sname:VkDisplayPlanePropertiesKHR returned by fname:vkGetPhysicalDeviceDisplayPlanePropertiesKHR for the display plane corresponding to pname:displayMode"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:alphaMode is ename:VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR then pname:globalAlpha must: be between `0` and `1`, inclusive"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:alphaMode must: be `0` or one of the bits present in the pname:supportedAlpha member of sname:VkDisplayPlaneCapabilitiesKHR returned by fname:vkGetDisplayPlaneCapabilitiesKHR for the display plane corresponding to pname:displayMode"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The pname:width and pname:height members of pname:imageExtent must be less than the pname:maxImageDimensions2D member of sname:VkPhysicalDeviceLimits"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkDisplayPresentInfoKHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*                      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkRect2D"
										]
									},
									"                         ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcRect"
										]
									}
								]
							},
							"                  ",
							{
								"comment": " Rectangle within the presentable image to read pixel data from when presenting to the display. "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkRect2D"
										]
									},
									"                         ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstRect"
										]
									}
								]
							},
							"                  ",
							{
								"comment": " Rectangle within the current display mode's visible region to display srcRectangle in. "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"                         ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"persistent"
										]
									}
								]
							},
							"               ",
							{
								"comment": " For smart displays, use buffered mode.  If the display properties member \"persistentMode\" is VK_FALSE, this member must always be VK_FALSE. "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:srcRect must: specify a rectangular region that is a subset of the image being presented"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstRect must: specify a rectangular region that is a subset of the pname:visibleRegion parameter of the display mode the swapchain being presented uses"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the pname:persistentContent member of the sname:VkDisplayPropertiesKHR structure returned by fname:vkGetPhysicalDeviceDisplayPropertiesKHR for the display the present operation targets then pname:persistent must: be ename:VK_FALSE"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkSurfaceCapabilitiesKHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"                         ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"minImageCount"
										]
									}
								]
							},
							"            ",
							{
								"comment": " Supported minimum number of images for the surface "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"                         ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxImageCount"
										]
									}
								]
							},
							"            ",
							{
								"comment": " Supported maximum number of images for the surface, 0 for unlimited "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkExtent2D"
										]
									},
									"                       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"currentExtent"
										]
									}
								]
							},
							"            ",
							{
								"comment": " Current image width and height for the surface, (0, 0) if undefined "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkExtent2D"
										]
									},
									"                       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"minImageExtent"
										]
									}
								]
							},
							"           ",
							{
								"comment": " Supported minimum image width and height for the surface "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkExtent2D"
										]
									},
									"                       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxImageExtent"
										]
									}
								]
							},
							"           ",
							{
								"comment": " Supported maximum image width and height for the surface "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"                         ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxImageArrayLayers"
										]
									}
								]
							},
							"      ",
							{
								"comment": " Supported maximum number of image layers for the surface "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSurfaceTransformFlagsKHR"
										]
									},
									"       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"supportedTransforms"
										]
									}
								]
							},
							"      ",
							{
								"comment": " 1 or more bits representing the transforms supported "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSurfaceTransformFlagBitsKHR"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"currentTransform"
										]
									}
								]
							},
							"         ",
							{
								"comment": " The surface's current transform relative to the device's natural orientation "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCompositeAlphaFlagsKHR"
										]
									},
									"         ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"supportedCompositeAlpha"
										]
									}
								]
							},
							"  ",
							{
								"comment": " 1 or more bits representing the alpha compositing modes supported "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageUsageFlags"
										]
									},
									"                ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"supportedUsageFlags"
										]
									}
								]
							},
							"      ",
							{
								"comment": " Supported image usage flags for the surface "
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkAndroidSurfaceCreateInfoKHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*                      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAndroidSurfaceCreateFlagsKHR"
										]
									},
									"   ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"    ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"ANativeWindow"
										]
									},
									"*                   ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"window"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:window mustnot: be in a connected state"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkMirSurfaceCreateInfoKHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*                      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkMirSurfaceCreateFlagsKHR"
										]
									},
									"   ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"        ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"MirConnection"
										]
									},
									"*                   ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"connection"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"MirSurface"
										]
									},
									"*                      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"mirSurface"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkWaylandSurfaceCreateInfoKHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*                      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkWaylandSurfaceCreateFlagsKHR"
										]
									},
									"   ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"    ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"struct ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"wl_display"
										]
									},
									"*               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"display"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"struct ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"wl_surface"
										]
									},
									"*               ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"surface"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkWin32SurfaceCreateInfoKHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*                      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkWin32SurfaceCreateFlagsKHR"
										]
									},
									"   ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"      ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"HINSTANCE"
										]
									},
									"                        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"hinstance"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"HWND"
										]
									},
									"                             ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"hwnd"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkXlibSurfaceCreateInfoKHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*                      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkXlibSurfaceCreateFlagsKHR"
										]
									},
									"   ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"       ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"Display"
										]
									},
									"*                         ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dpy"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"Window"
										]
									},
									"                           ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"window"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkXcbSurfaceCreateInfoKHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*                      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkXcbSurfaceCreateFlagsKHR"
										]
									},
									"   ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"        ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"xcb_connection_t"
										]
									},
									"*                ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"connection"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"xcb_window_t"
										]
									},
									"                     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"window"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkSurfaceFormatKHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFormat"
										]
									},
									"                         ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"format"
										]
									}
								]
							},
							"                   ",
							{
								"comment": " Supported pair of rendering format "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkColorSpaceKHR"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"colorSpace"
										]
									}
								]
							},
							"               ",
							{
								"comment": " and colorspace for the surface "
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkSwapchainCreateInfoKHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*                      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSwapchainCreateFlagsKHR"
										]
									},
									"        ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Reserved "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSurfaceKHR"
										]
									},
									"                     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"surface"
										]
									}
								]
							},
							"                  ",
							{
								"comment": " The swapchain's target surface "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"                         ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"minImageCount"
										]
									}
								]
							},
							"            ",
							{
								"comment": " Minimum number of presentation images the application needs "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFormat"
										]
									},
									"                         ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"imageFormat"
										]
									}
								]
							},
							"              ",
							{
								"comment": " Format of the presentation images "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkColorSpaceKHR"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"imageColorSpace"
										]
									}
								]
							},
							"          ",
							{
								"comment": " Colorspace of the presentation images "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkExtent2D"
										]
									},
									"                       ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"imageExtent"
										]
									}
								]
							},
							"              ",
							{
								"comment": " Dimensions of the presentation images "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"                         ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"imageArrayLayers"
										]
									}
								]
							},
							"         ",
							{
								"comment": " Determines the number of views for multiview/stereo presentation "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageUsageFlags"
										]
									},
									"                ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"imageUsage"
										]
									}
								]
							},
							"               ",
							{
								"comment": " Bits indicating how the presentation images will be used "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSharingMode"
										]
									},
									"                    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"imageSharingMode"
										]
									}
								]
							},
							"         ",
							{
								"comment": " Sharing mode used for the presentation images "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"         ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queueFamilyIndexCount"
										]
									}
								]
							},
							"    ",
							{
								"comment": " Number of queue families having access to the images in case of concurrent sharing mode "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "noautovalidity",
										"value": "true"
									},
									{
										"name": "len",
										"value": "queueFamilyIndexCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"*                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pQueueFamilyIndices"
										]
									}
								]
							},
							"      ",
							{
								"comment": " Array of queue family indices having access to the images in case of concurrent sharing mode "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSurfaceTransformFlagBitsKHR"
										]
									},
									"    ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"preTransform"
										]
									}
								]
							},
							"             ",
							{
								"comment": " The transform, relative to the device's natural orientation, applied to the image content prior to presentation "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCompositeAlphaFlagBitsKHR"
										]
									},
									"      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"compositeAlpha"
										]
									}
								]
							},
							"           ",
							{
								"comment": " The alpha blending mode used when compositing this surface with other surfaces in the window system "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPresentModeKHR"
										]
									},
									"                 ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"presentMode"
										]
									}
								]
							},
							"              ",
							{
								"comment": " Which presentation mode to use for presents on this swap chain "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"                         ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"clipped"
										]
									}
								]
							},
							"                  ",
							{
								"comment": " Specifies whether presentable images may be affected by window clip regions "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSwapchainKHR"
										]
									},
									"   ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"oldSwapchain"
										]
									}
								]
							},
							"             ",
							{
								"comment": " Existing swap chain to replace, if any "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:surface must: be a surface that is supported by the device as determined using fname:vkGetPhysicalDeviceSurfaceSupportKHR"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The native window referred to by pname:surface mustnot: already be associated with a swapchain other than pname:oldSwapchain, or with a non-{apiname} graphics API surface"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:minImageCount must: be greater than or equal to the value returned in the pname:minImageCount member of the sname:VkSurfaceCapabilitiesKHR structure returned by fname:vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:minImageCount must: be less than or equal to the value returned in the pname:maxImageCount member of the sname:VkSurfaceCapabilitiesKHR structure returned by fname:vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface if the returned value of pname:maxImageCount is not zero"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:imageFormat and pname:imageColorspace must: match the pname:format and pname:colorSpace members, respectively, of one of the sname:VkSurfaceFormatKHR structures returned by fname:vkGetPhysicalDeviceSurfaceFormatsKHR for the surface"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:imageExtent must: be between pname:minImageExtent and pname:maxImageExtent, inclusive, where pname:minImageExtent and pname:maxImageExtent are members of the sname:VkSurfaceCapabilitiesKHR structure returned by fname:vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:imageArrayLayers must: be greater than `0` and less than or equal to the pname:maxImageArrayLayers member of the sname:VkSurfaceCapabilitiesKHR structure returned by fname:vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:imageUsage must: be a subset of the supported usage flags present in the pname:supportedUsageFlags member of the sname:VkSurfaceCapabilitiesKHR structure returned by fname:vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:imageSharingMode is ename:VK_SHARING_MODE_CONCURRENT, pname:pQueueFamilyIndices must: be a pointer to an array of pname:queueFamilyIndexCount basetype:uint32_t values"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:imageSharingMode is ename:VK_SHARING_MODE_CONCURRENT, pname:queueFamilyIndexCount must: be greater than `1`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:preTransform must: be one of the bits present in the pname:supportedTransforms member of the sname:VkSurfaceCapabilitiesKHR structure returned by fname:vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:compositeAlpha must: be one of the bits present in the pname:supportedCompositeAlpha member of the sname:VkSurfaceCapabilitiesKHR structure returned by fname:vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:presentMode must: be one of the ename:VkPresentModeKHR values returned by fname:vkGetPhysicalDeviceSurfacePresentModesKHR for the surface"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkPresentInfoKHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_PRESENT_INFO_KHR "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*                      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"                         ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"waitSemaphoreCount"
										]
									}
								]
							},
							"       ",
							{
								"comment": " Number of semaphores to wait for before presenting "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "waitSemaphoreCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSemaphore"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pWaitSemaphores"
										]
									}
								]
							},
							" ",
							{
								"comment": " Semaphores to wait for before presenting "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"                         ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"swapchainCount"
										]
									}
								]
							},
							"           ",
							{
								"comment": " Number of swap chains to present in this call "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "swapchainCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSwapchainKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSwapchains"
										]
									}
								]
							},
							"    ",
							{
								"comment": " Swapchains to present an image from "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "len",
										"value": "swapchainCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pImageIndices"
										]
									}
								]
							},
							"        ",
							{
								"comment": " Indices of which swapchain images to present "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "swapchainCount"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pResults"
										]
									}
								]
							},
							"   ",
							{
								"comment": " Optional (i.e. if non-NULL) VkResult for each swapchain "
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pImageIndices must: be the index of a presentable image acquired from the swapchain specified by the corresponding element of the pname:pSwapchains array that is owned by the application"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of sname:VkSemaphore in pname:pWaitSemaphores must: refer to a prior signal of that sname:VkSemaphore that won't be consumed by any other wait on that semaphore"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "type",
						"attributes": [
							{
								"name": "category",
								"value": "struct"
							},
							{
								"name": "name",
								"value": "VkDebugReportCallbackCreateInfoEXT"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStructureType"
										]
									},
									"                  ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sType"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Must be VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*                      ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pNext"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Pointer to next structure "
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDebugReportFlagsEXT"
										]
									},
									"            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"                    ",
							{
								"comment": " Indicates which events call this callback"
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"PFN_vkDebugReportCallbackEXT"
										]
									},
									"     ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pfnCallback"
										]
									}
								]
							},
							"              ",
							{
								"comment": " Function pointer of a callback function"
							},
							"\n            ",
							{
								"nodeName": "member",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"*            ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pUserData"
										]
									}
								]
							},
							"                ",
							{
								"comment": " User data provided to callback function "
							},
							"\n        "
						]
					},
					"\n    "
				]
			},
			"\n\n    ",
			{
				"comment": " SECTION: Vulkan enumerant (token) definitions. "
			},
			"\n\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "API Constants"
					},
					{
						"name": "comment",
						"value": "Misc. hardcoded constants - not an enumerated type"
					}
				],
				"childNodes": [
					"\n            ",
					{
						"comment": " This is part of the header boilerplate "
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "256"
							},
							{
								"name": "name",
								"value": "VK_MAX_PHYSICAL_DEVICE_NAME_SIZE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "16"
							},
							{
								"name": "name",
								"value": "VK_UUID_SIZE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "256"
							},
							{
								"name": "name",
								"value": "VK_MAX_EXTENSION_NAME_SIZE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "256"
							},
							{
								"name": "name",
								"value": "VK_MAX_DESCRIPTION_SIZE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "32"
							},
							{
								"name": "name",
								"value": "VK_MAX_MEMORY_TYPES"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "16"
							},
							{
								"name": "name",
								"value": "VK_MAX_MEMORY_HEAPS"
							}
						],
						"childNodes": []
					},
					" ",
					{
						"comment": " The maximum number of unique memory heaps, each of which supporting 1 or more memory types. "
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1000.0f"
							},
							{
								"name": "name",
								"value": "VK_LOD_CLAMP_NONE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "(~0U)"
							},
							{
								"name": "name",
								"value": "VK_REMAINING_MIP_LEVELS"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "(~0U)"
							},
							{
								"name": "name",
								"value": "VK_REMAINING_ARRAY_LAYERS"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "(~0ULL)"
							},
							{
								"name": "name",
								"value": "VK_WHOLE_SIZE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "(~0U)"
							},
							{
								"name": "name",
								"value": "VK_ATTACHMENT_UNUSED"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_TRUE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_FALSE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "(~0U)"
							},
							{
								"name": "name",
								"value": "VK_QUEUE_FAMILY_IGNORED"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "(~0U)"
							},
							{
								"name": "name",
								"value": "VK_SUBPASS_EXTERNAL"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n\n    ",
			{
				"comment": " Unlike OpenGL, most tokens in Vulkan are actual typed enumerants in\n         their own numeric namespaces. The \"name\" attribute is the C enum\n         type name, and is pulled in from a <type> definition above\n         (slightly clunky, but retains the type / enum distinction). \"type\"\n         attributes of \"enum\" or \"bitmask\" indicate that these values should\n         be generated inside an appropriate definition. "
			},
			"\n\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkImageLayout"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_IMAGE_LAYOUT"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_LAYOUT_UNDEFINED"
							},
							{
								"name": "comment",
								"value": "Implicit layout an image is when its contents are undefined due to various reasons (e.g. right after creation)"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_LAYOUT_GENERAL"
							},
							{
								"name": "comment",
								"value": "General layout when image can be used for any kind of access"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL"
							},
							{
								"name": "comment",
								"value": "Optimal layout when image is only used for color attachment read/write"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL"
							},
							{
								"name": "comment",
								"value": "Optimal layout when image is only used for depth/stencil attachment read/write"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL"
							},
							{
								"name": "comment",
								"value": "Optimal layout when image is used for read only depth/stencil attachment and shader access"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "5"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL"
							},
							{
								"name": "comment",
								"value": "Optimal layout when image is used for read only shader access"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "6"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL"
							},
							{
								"name": "comment",
								"value": "Optimal layout when image is used only as source of transfer operations"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "7"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL"
							},
							{
								"name": "comment",
								"value": "Optimal layout when image is used only as destination of transfer operations"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "8"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_LAYOUT_PREINITIALIZED"
							},
							{
								"name": "comment",
								"value": "Initial layout used when the data is populated by the CPU"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkAttachmentLoadOp"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_ATTACHMENT_LOAD_OP"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_ATTACHMENT_LOAD_OP_LOAD"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_ATTACHMENT_LOAD_OP_CLEAR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_ATTACHMENT_LOAD_OP_DONT_CARE"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkAttachmentStoreOp"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_ATTACHMENT_STORE_OP"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_ATTACHMENT_STORE_OP_STORE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_ATTACHMENT_STORE_OP_DONT_CARE"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkImageType"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_IMAGE_TYPE"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_TYPE_1D"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_TYPE_2D"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_TYPE_3D"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkImageTiling"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_IMAGE_TILING"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_TILING_OPTIMAL"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_TILING_LINEAR"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkImageViewType"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_IMAGE_VIEW_TYPE"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_VIEW_TYPE_1D"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_VIEW_TYPE_2D"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_VIEW_TYPE_3D"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_VIEW_TYPE_CUBE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_VIEW_TYPE_1D_ARRAY"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "5"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_VIEW_TYPE_2D_ARRAY"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "6"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_VIEW_TYPE_CUBE_ARRAY"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkCommandBufferLevel"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_COMMAND_BUFFER_LEVEL"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_COMMAND_BUFFER_LEVEL_PRIMARY"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_COMMAND_BUFFER_LEVEL_SECONDARY"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkComponentSwizzle"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_COMPONENT_SWIZZLE"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_COMPONENT_SWIZZLE_IDENTITY"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_COMPONENT_SWIZZLE_ZERO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_COMPONENT_SWIZZLE_ONE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_COMPONENT_SWIZZLE_R"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_COMPONENT_SWIZZLE_G"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "5"
							},
							{
								"name": "name",
								"value": "VK_COMPONENT_SWIZZLE_B"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "6"
							},
							{
								"name": "name",
								"value": "VK_COMPONENT_SWIZZLE_A"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkDescriptorType"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_DESCRIPTOR_TYPE"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_DESCRIPTOR_TYPE_SAMPLER"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_DESCRIPTOR_TYPE_STORAGE_IMAGE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "5"
							},
							{
								"name": "name",
								"value": "VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "6"
							},
							{
								"name": "name",
								"value": "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "7"
							},
							{
								"name": "name",
								"value": "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "8"
							},
							{
								"name": "name",
								"value": "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "9"
							},
							{
								"name": "name",
								"value": "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "10"
							},
							{
								"name": "name",
								"value": "VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkQueryType"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_QUERY_TYPE"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_QUERY_TYPE_OCCLUSION"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_QUERY_TYPE_PIPELINE_STATISTICS"
							},
							{
								"name": "comment",
								"value": "Optional"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_QUERY_TYPE_TIMESTAMP"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkBorderColor"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_BORDER_COLOR"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_BORDER_COLOR_INT_TRANSPARENT_BLACK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_BORDER_COLOR_INT_OPAQUE_BLACK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "5"
							},
							{
								"name": "name",
								"value": "VK_BORDER_COLOR_INT_OPAQUE_WHITE"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkPipelineBindPoint"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_PIPELINE_BIND_POINT"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_PIPELINE_BIND_POINT_GRAPHICS"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_PIPELINE_BIND_POINT_COMPUTE"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkPipelineCacheHeaderVersion"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_PIPELINE_CACHE_HEADER_VERSION"
					}
				],
				"childNodes": [
					"\n       ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_PIPELINE_CACHE_HEADER_VERSION_ONE"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkPrimitiveTopology"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_PRIMITIVE_TOPOLOGY"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_PRIMITIVE_TOPOLOGY_POINT_LIST"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_PRIMITIVE_TOPOLOGY_LINE_LIST"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "5"
							},
							{
								"name": "name",
								"value": "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "6"
							},
							{
								"name": "name",
								"value": "VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "7"
							},
							{
								"name": "name",
								"value": "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "8"
							},
							{
								"name": "name",
								"value": "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "9"
							},
							{
								"name": "name",
								"value": "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "10"
							},
							{
								"name": "name",
								"value": "VK_PRIMITIVE_TOPOLOGY_PATCH_LIST"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkSharingMode"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_SHARING_MODE"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_SHARING_MODE_EXCLUSIVE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_SHARING_MODE_CONCURRENT"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkIndexType"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_INDEX_TYPE"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_INDEX_TYPE_UINT16"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_INDEX_TYPE_UINT32"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkFilter"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_FILTER"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_FILTER_NEAREST"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_FILTER_LINEAR"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkSamplerMipmapMode"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_SAMPLER_MIPMAP_MODE"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_SAMPLER_MIPMAP_MODE_NEAREST"
							},
							{
								"name": "comment",
								"value": "Choose nearest mip level"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_SAMPLER_MIPMAP_MODE_LINEAR"
							},
							{
								"name": "comment",
								"value": "Linear filter between mip levels"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkSamplerAddressMode"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_SAMPLER_ADDRESS_MODE"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_SAMPLER_ADDRESS_MODE_REPEAT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"comment": " <enum value=\"4\"     name=\"VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE\" comment=\"Reserved for VK_KHR_sampler_mirror_clamp_to_edge, do not alias!\"/> "
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkCompareOp"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_COMPARE_OP"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_COMPARE_OP_NEVER"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_COMPARE_OP_LESS"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_COMPARE_OP_EQUAL"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_COMPARE_OP_LESS_OR_EQUAL"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_COMPARE_OP_GREATER"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "5"
							},
							{
								"name": "name",
								"value": "VK_COMPARE_OP_NOT_EQUAL"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "6"
							},
							{
								"name": "name",
								"value": "VK_COMPARE_OP_GREATER_OR_EQUAL"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "7"
							},
							{
								"name": "name",
								"value": "VK_COMPARE_OP_ALWAYS"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkPolygonMode"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_POLYGON_MODE"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_POLYGON_MODE_FILL"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_POLYGON_MODE_LINE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_POLYGON_MODE_POINT"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkCullModeFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_CULL_MODE_NONE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_CULL_MODE_FRONT_BIT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_CULL_MODE_BACK_BIT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0x00000003"
							},
							{
								"name": "name",
								"value": "VK_CULL_MODE_FRONT_AND_BACK"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkFrontFace"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_FRONT_FACE"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_FRONT_FACE_COUNTER_CLOCKWISE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_FRONT_FACE_CLOCKWISE"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkBlendFactor"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_BLEND_FACTOR"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_BLEND_FACTOR_ZERO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_BLEND_FACTOR_ONE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_BLEND_FACTOR_SRC_COLOR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_BLEND_FACTOR_DST_COLOR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "5"
							},
							{
								"name": "name",
								"value": "VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "6"
							},
							{
								"name": "name",
								"value": "VK_BLEND_FACTOR_SRC_ALPHA"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "7"
							},
							{
								"name": "name",
								"value": "VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "8"
							},
							{
								"name": "name",
								"value": "VK_BLEND_FACTOR_DST_ALPHA"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "9"
							},
							{
								"name": "name",
								"value": "VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "10"
							},
							{
								"name": "name",
								"value": "VK_BLEND_FACTOR_CONSTANT_COLOR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "11"
							},
							{
								"name": "name",
								"value": "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "12"
							},
							{
								"name": "name",
								"value": "VK_BLEND_FACTOR_CONSTANT_ALPHA"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "13"
							},
							{
								"name": "name",
								"value": "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "14"
							},
							{
								"name": "name",
								"value": "VK_BLEND_FACTOR_SRC_ALPHA_SATURATE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "15"
							},
							{
								"name": "name",
								"value": "VK_BLEND_FACTOR_SRC1_COLOR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "16"
							},
							{
								"name": "name",
								"value": "VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "17"
							},
							{
								"name": "name",
								"value": "VK_BLEND_FACTOR_SRC1_ALPHA"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "18"
							},
							{
								"name": "name",
								"value": "VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkBlendOp"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_BLEND_OP"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_BLEND_OP_ADD"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_BLEND_OP_SUBTRACT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_BLEND_OP_REVERSE_SUBTRACT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_BLEND_OP_MIN"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_BLEND_OP_MAX"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkStencilOp"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_STENCIL_OP"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_STENCIL_OP_KEEP"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_STENCIL_OP_ZERO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_STENCIL_OP_REPLACE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_STENCIL_OP_INCREMENT_AND_CLAMP"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_STENCIL_OP_DECREMENT_AND_CLAMP"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "5"
							},
							{
								"name": "name",
								"value": "VK_STENCIL_OP_INVERT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "6"
							},
							{
								"name": "name",
								"value": "VK_STENCIL_OP_INCREMENT_AND_WRAP"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "7"
							},
							{
								"name": "name",
								"value": "VK_STENCIL_OP_DECREMENT_AND_WRAP"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkLogicOp"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_LOGIC_OP"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_LOGIC_OP_CLEAR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_LOGIC_OP_AND"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_LOGIC_OP_AND_REVERSE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_LOGIC_OP_COPY"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_LOGIC_OP_AND_INVERTED"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "5"
							},
							{
								"name": "name",
								"value": "VK_LOGIC_OP_NO_OP"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "6"
							},
							{
								"name": "name",
								"value": "VK_LOGIC_OP_XOR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "7"
							},
							{
								"name": "name",
								"value": "VK_LOGIC_OP_OR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "8"
							},
							{
								"name": "name",
								"value": "VK_LOGIC_OP_NOR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "9"
							},
							{
								"name": "name",
								"value": "VK_LOGIC_OP_EQUIVALENT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "10"
							},
							{
								"name": "name",
								"value": "VK_LOGIC_OP_INVERT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "11"
							},
							{
								"name": "name",
								"value": "VK_LOGIC_OP_OR_REVERSE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "12"
							},
							{
								"name": "name",
								"value": "VK_LOGIC_OP_COPY_INVERTED"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "13"
							},
							{
								"name": "name",
								"value": "VK_LOGIC_OP_OR_INVERTED"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "14"
							},
							{
								"name": "name",
								"value": "VK_LOGIC_OP_NAND"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "15"
							},
							{
								"name": "name",
								"value": "VK_LOGIC_OP_SET"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkInternalAllocationType"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_INTERNAL_ALLOCATION_TYPE"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkSystemAllocationScope"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_SYSTEM_ALLOCATION_SCOPE"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_SYSTEM_ALLOCATION_SCOPE_COMMAND"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_SYSTEM_ALLOCATION_SCOPE_OBJECT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_SYSTEM_ALLOCATION_SCOPE_CACHE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_SYSTEM_ALLOCATION_SCOPE_DEVICE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkPhysicalDeviceType"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_PHYSICAL_DEVICE_TYPE"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_PHYSICAL_DEVICE_TYPE_OTHER"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_PHYSICAL_DEVICE_TYPE_CPU"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkVertexInputRate"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_VERTEX_INPUT_RATE"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_VERTEX_INPUT_RATE_VERTEX"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_VERTEX_INPUT_RATE_INSTANCE"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkFormat"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_FORMAT"
					},
					{
						"name": "comment",
						"value": "Vulkan format definitions"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_UNDEFINED"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R4G4_UNORM_PACK8"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R4G4B4A4_UNORM_PACK16"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_B4G4R4A4_UNORM_PACK16"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R5G6B5_UNORM_PACK16"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "5"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_B5G6R5_UNORM_PACK16"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "6"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R5G5B5A1_UNORM_PACK16"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "7"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_B5G5R5A1_UNORM_PACK16"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "8"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_A1R5G5B5_UNORM_PACK16"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "9"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8_UNORM"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "10"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8_SNORM"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "11"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8_USCALED"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "12"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8_SSCALED"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "13"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8_UINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "14"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8_SINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "15"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8_SRGB"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "16"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8G8_UNORM"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "17"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8G8_SNORM"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "18"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8G8_USCALED"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "19"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8G8_SSCALED"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "20"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8G8_UINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "21"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8G8_SINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "22"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8G8_SRGB"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "23"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8G8B8_UNORM"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "24"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8G8B8_SNORM"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "25"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8G8B8_USCALED"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "26"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8G8B8_SSCALED"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "27"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8G8B8_UINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "28"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8G8B8_SINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "29"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8G8B8_SRGB"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "30"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_B8G8R8_UNORM"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "31"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_B8G8R8_SNORM"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "32"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_B8G8R8_USCALED"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "33"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_B8G8R8_SSCALED"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "34"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_B8G8R8_UINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "35"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_B8G8R8_SINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "36"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_B8G8R8_SRGB"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "37"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8G8B8A8_UNORM"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "38"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8G8B8A8_SNORM"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "39"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8G8B8A8_USCALED"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "40"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8G8B8A8_SSCALED"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "41"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8G8B8A8_UINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "42"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8G8B8A8_SINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "43"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R8G8B8A8_SRGB"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "44"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_B8G8R8A8_UNORM"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "45"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_B8G8R8A8_SNORM"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "46"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_B8G8R8A8_USCALED"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "47"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_B8G8R8A8_SSCALED"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "48"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_B8G8R8A8_UINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "49"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_B8G8R8A8_SINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "50"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_B8G8R8A8_SRGB"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "51"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_A8B8G8R8_UNORM_PACK32"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "52"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_A8B8G8R8_SNORM_PACK32"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "53"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_A8B8G8R8_USCALED_PACK32"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "54"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_A8B8G8R8_SSCALED_PACK32"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "55"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_A8B8G8R8_UINT_PACK32"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "56"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_A8B8G8R8_SINT_PACK32"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "57"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_A8B8G8R8_SRGB_PACK32"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "58"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_A2R10G10B10_UNORM_PACK32"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "59"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_A2R10G10B10_SNORM_PACK32"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "60"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_A2R10G10B10_USCALED_PACK32"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "61"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_A2R10G10B10_SSCALED_PACK32"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "62"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_A2R10G10B10_UINT_PACK32"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "63"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_A2R10G10B10_SINT_PACK32"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "64"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_A2B10G10R10_UNORM_PACK32"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "65"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_A2B10G10R10_SNORM_PACK32"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "66"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_A2B10G10R10_USCALED_PACK32"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "67"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_A2B10G10R10_SSCALED_PACK32"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "68"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_A2B10G10R10_UINT_PACK32"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "69"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_A2B10G10R10_SINT_PACK32"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "70"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16_UNORM"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "71"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16_SNORM"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "72"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16_USCALED"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "73"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16_SSCALED"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "74"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16_UINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "75"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16_SINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "76"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16_SFLOAT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "77"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16G16_UNORM"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "78"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16G16_SNORM"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "79"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16G16_USCALED"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "80"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16G16_SSCALED"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "81"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16G16_UINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "82"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16G16_SINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "83"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16G16_SFLOAT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "84"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16G16B16_UNORM"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "85"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16G16B16_SNORM"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "86"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16G16B16_USCALED"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "87"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16G16B16_SSCALED"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "88"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16G16B16_UINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "89"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16G16B16_SINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "90"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16G16B16_SFLOAT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "91"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16G16B16A16_UNORM"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "92"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16G16B16A16_SNORM"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "93"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16G16B16A16_USCALED"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "94"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16G16B16A16_SSCALED"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "95"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16G16B16A16_UINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "96"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16G16B16A16_SINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "97"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R16G16B16A16_SFLOAT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "98"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R32_UINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "99"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R32_SINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "100"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R32_SFLOAT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "101"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R32G32_UINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "102"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R32G32_SINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "103"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R32G32_SFLOAT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "104"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R32G32B32_UINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "105"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R32G32B32_SINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "106"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R32G32B32_SFLOAT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "107"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R32G32B32A32_UINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "108"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R32G32B32A32_SINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "109"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R32G32B32A32_SFLOAT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "110"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R64_UINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "111"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R64_SINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "112"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R64_SFLOAT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "113"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R64G64_UINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "114"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R64G64_SINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "115"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R64G64_SFLOAT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "116"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R64G64B64_UINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "117"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R64G64B64_SINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "118"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R64G64B64_SFLOAT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "119"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R64G64B64A64_UINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "120"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R64G64B64A64_SINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "121"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_R64G64B64A64_SFLOAT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "122"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_B10G11R11_UFLOAT_PACK32"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "123"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "124"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_D16_UNORM"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "125"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_X8_D24_UNORM_PACK32"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "126"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_D32_SFLOAT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "127"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_S8_UINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "128"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_D16_UNORM_S8_UINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "129"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_D24_UNORM_S8_UINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "130"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_D32_SFLOAT_S8_UINT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "131"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_BC1_RGB_UNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "132"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_BC1_RGB_SRGB_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "133"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_BC1_RGBA_UNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "134"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_BC1_RGBA_SRGB_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "135"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_BC2_UNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "136"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_BC2_SRGB_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "137"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_BC3_UNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "138"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_BC3_SRGB_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "139"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_BC4_UNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "140"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_BC4_SNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "141"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_BC5_UNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "142"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_BC5_SNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "143"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_BC6H_UFLOAT_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "144"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_BC6H_SFLOAT_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "145"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_BC7_UNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "146"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_BC7_SRGB_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "147"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "148"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "149"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "150"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "151"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "152"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "153"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_EAC_R11_UNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "154"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_EAC_R11_SNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "155"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_EAC_R11G11_UNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "156"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_EAC_R11G11_SNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "157"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_4x4_UNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "158"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_4x4_SRGB_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "159"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_5x4_UNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "160"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_5x4_SRGB_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "161"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_5x5_UNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "162"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_5x5_SRGB_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "163"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_6x5_UNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "164"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_6x5_SRGB_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "165"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_6x6_UNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "166"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_6x6_SRGB_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "167"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_8x5_UNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "168"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_8x5_SRGB_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "169"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_8x6_UNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "170"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_8x6_SRGB_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "171"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_8x8_UNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "172"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_8x8_SRGB_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "173"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_10x5_UNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "174"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_10x5_SRGB_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "175"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_10x6_UNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "176"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_10x6_SRGB_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "177"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_10x8_UNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "178"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_10x8_SRGB_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "179"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_10x10_UNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "180"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_10x10_SRGB_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "181"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_12x10_UNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "182"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_12x10_SRGB_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "183"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_12x12_UNORM_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "184"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_ASTC_12x12_SRGB_BLOCK"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkStructureType"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_STRUCTURE_TYPE"
					},
					{
						"name": "comment",
						"value": "Structure type enumerant"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_APPLICATION_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_SUBMIT_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "5"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "6"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "7"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_BIND_SPARSE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "8"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_FENCE_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "9"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "10"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_EVENT_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "11"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "12"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "13"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "14"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "15"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "16"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "17"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "18"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "19"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "20"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "21"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "22"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "23"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "24"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "25"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "26"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "27"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "28"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "29"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "30"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "31"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "32"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "33"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "34"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "35"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "36"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "37"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "38"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "39"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "40"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "41"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "42"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "43"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "44"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "45"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "46"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_MEMORY_BARRIER"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "47"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					" ",
					{
						"comment": " Reserved for internal use by the loader, layers, and ICDs "
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "48"
							},
							{
								"name": "name",
								"value": "VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO"
							}
						],
						"childNodes": []
					},
					" ",
					{
						"comment": " Reserved for internal use by the loader, layers, and ICDs "
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkSubpassContents"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_SUBPASS_CONTENTS"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_SUBPASS_CONTENTS_INLINE"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkResult"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_RESULT"
					},
					{
						"name": "comment",
						"value": "Error and return codes"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"comment": " Return codes for successful operation execution (positive values) "
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_SUCCESS"
							},
							{
								"name": "comment",
								"value": "Command completed successfully"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_NOT_READY"
							},
							{
								"name": "comment",
								"value": "A fence or query has not yet completed"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_TIMEOUT"
							},
							{
								"name": "comment",
								"value": "A wait operation has not completed in the specified time"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_EVENT_SET"
							},
							{
								"name": "comment",
								"value": "An event is signaled"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_EVENT_RESET"
							},
							{
								"name": "comment",
								"value": "An event is unsignalled"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "5"
							},
							{
								"name": "name",
								"value": "VK_INCOMPLETE"
							},
							{
								"name": "comment",
								"value": "A return array was too small for the resul"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"comment": " Error codes (negative values) "
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "-1"
							},
							{
								"name": "name",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY"
							},
							{
								"name": "comment",
								"value": "A host memory allocation has failed"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "-2"
							},
							{
								"name": "name",
								"value": "VK_ERROR_OUT_OF_DEVICE_MEMORY"
							},
							{
								"name": "comment",
								"value": "A device memory allocation has failed"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "-3"
							},
							{
								"name": "name",
								"value": "VK_ERROR_INITIALIZATION_FAILED"
							},
							{
								"name": "comment",
								"value": "The logical device has been lost. See <<devsandqueues-lost-device>>"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "-4"
							},
							{
								"name": "name",
								"value": "VK_ERROR_DEVICE_LOST"
							},
							{
								"name": "comment",
								"value": "Initialization of a object has failed"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "-5"
							},
							{
								"name": "name",
								"value": "VK_ERROR_MEMORY_MAP_FAILED"
							},
							{
								"name": "comment",
								"value": "Mapping of a memory object has failed"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "-6"
							},
							{
								"name": "name",
								"value": "VK_ERROR_LAYER_NOT_PRESENT"
							},
							{
								"name": "comment",
								"value": "Layer specified does not exist"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "-7"
							},
							{
								"name": "name",
								"value": "VK_ERROR_EXTENSION_NOT_PRESENT"
							},
							{
								"name": "comment",
								"value": "Extension specified does not exist"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "-8"
							},
							{
								"name": "name",
								"value": "VK_ERROR_FEATURE_NOT_PRESENT"
							},
							{
								"name": "comment",
								"value": "Requested feature is not available on this device"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "-9"
							},
							{
								"name": "name",
								"value": "VK_ERROR_INCOMPATIBLE_DRIVER"
							},
							{
								"name": "comment",
								"value": "Unable to find a Vulkan driver"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "-10"
							},
							{
								"name": "name",
								"value": "VK_ERROR_TOO_MANY_OBJECTS"
							},
							{
								"name": "comment",
								"value": "Too many objects of the type have already been created"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "-11"
							},
							{
								"name": "name",
								"value": "VK_ERROR_FORMAT_NOT_SUPPORTED"
							},
							{
								"name": "comment",
								"value": "Requested format is not supported on this device"
							}
						],
						"childNodes": []
					},
					"\n            ",
					{
						"nodeName": "unused",
						"attributes": [
							{
								"name": "start",
								"value": "-12"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkDynamicState"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_DYNAMIC_STATE"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_DYNAMIC_STATE_VIEWPORT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_DYNAMIC_STATE_SCISSOR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_DYNAMIC_STATE_LINE_WIDTH"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_DYNAMIC_STATE_DEPTH_BIAS"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_DYNAMIC_STATE_BLEND_CONSTANTS"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "5"
							},
							{
								"name": "name",
								"value": "VK_DYNAMIC_STATE_DEPTH_BOUNDS"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "6"
							},
							{
								"name": "name",
								"value": "VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "7"
							},
							{
								"name": "name",
								"value": "VK_DYNAMIC_STATE_STENCIL_WRITE_MASK"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "8"
							},
							{
								"name": "name",
								"value": "VK_DYNAMIC_STATE_STENCIL_REFERENCE"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n\n    ",
			{
				"comment": " Flags "
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkQueueFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_QUEUE_GRAPHICS_BIT"
							},
							{
								"name": "comment",
								"value": "Queue supports graphics operations"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_QUEUE_COMPUTE_BIT"
							},
							{
								"name": "comment",
								"value": "Queue supports compute operations"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_QUEUE_TRANSFER_BIT"
							},
							{
								"name": "comment",
								"value": "Queue supports transfer operations"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_QUEUE_SPARSE_BINDING_BIT"
							},
							{
								"name": "comment",
								"value": "Queue supports sparse resource memory management operations"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkMemoryPropertyFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT"
							},
							{
								"name": "comment",
								"value": "If otherwise stated, then allocate memory on device"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT"
							},
							{
								"name": "comment",
								"value": "Memory is mappable by host"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_MEMORY_PROPERTY_HOST_COHERENT_BIT"
							},
							{
								"name": "comment",
								"value": "Memory will have i/o coherency. If not set, application may need to use vkFlushMappedMemoryRanges and vkInvalidateMappedMemoryRanges to flush/invalidate host cache"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_MEMORY_PROPERTY_HOST_CACHED_BIT"
							},
							{
								"name": "comment",
								"value": "Memory will be cached by the host"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT"
							},
							{
								"name": "comment",
								"value": "Memory may be allocated by the driver when it is required"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkMemoryHeapFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_MEMORY_HEAP_DEVICE_LOCAL_BIT"
							},
							{
								"name": "comment",
								"value": "If set, heap represents device memory"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkAccessFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_ACCESS_INDIRECT_COMMAND_READ_BIT"
							},
							{
								"name": "comment",
								"value": "Controls coherency of indirect command reads"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_ACCESS_INDEX_READ_BIT"
							},
							{
								"name": "comment",
								"value": "Controls coherency of index reads"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT"
							},
							{
								"name": "comment",
								"value": "Controls coherency of vertex attribute reads"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_ACCESS_UNIFORM_READ_BIT"
							},
							{
								"name": "comment",
								"value": "Controls coherency of uniform buffer reads"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_ACCESS_INPUT_ATTACHMENT_READ_BIT"
							},
							{
								"name": "comment",
								"value": "Controls coherency of input attachment reads"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "5"
							},
							{
								"name": "name",
								"value": "VK_ACCESS_SHADER_READ_BIT"
							},
							{
								"name": "comment",
								"value": "Controls coherency of shader reads"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "6"
							},
							{
								"name": "name",
								"value": "VK_ACCESS_SHADER_WRITE_BIT"
							},
							{
								"name": "comment",
								"value": "Controls coherency of shader writes"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "7"
							},
							{
								"name": "name",
								"value": "VK_ACCESS_COLOR_ATTACHMENT_READ_BIT"
							},
							{
								"name": "comment",
								"value": "Controls coherency of color attachment reads"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "8"
							},
							{
								"name": "name",
								"value": "VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT"
							},
							{
								"name": "comment",
								"value": "Controls coherency of color attachment writes"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "9"
							},
							{
								"name": "name",
								"value": "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT"
							},
							{
								"name": "comment",
								"value": "Controls coherency of depth/stencil attachment reads"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "10"
							},
							{
								"name": "name",
								"value": "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT"
							},
							{
								"name": "comment",
								"value": "Controls coherency of depth/stencil attachment writes"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "11"
							},
							{
								"name": "name",
								"value": "VK_ACCESS_TRANSFER_READ_BIT"
							},
							{
								"name": "comment",
								"value": "Controls coherency of transfer reads"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "12"
							},
							{
								"name": "name",
								"value": "VK_ACCESS_TRANSFER_WRITE_BIT"
							},
							{
								"name": "comment",
								"value": "Controls coherency of transfer writes"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "13"
							},
							{
								"name": "name",
								"value": "VK_ACCESS_HOST_READ_BIT"
							},
							{
								"name": "comment",
								"value": "Controls coherency of host reads"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "14"
							},
							{
								"name": "name",
								"value": "VK_ACCESS_HOST_WRITE_BIT"
							},
							{
								"name": "comment",
								"value": "Controls coherency of host writes"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "15"
							},
							{
								"name": "name",
								"value": "VK_ACCESS_MEMORY_READ_BIT"
							},
							{
								"name": "comment",
								"value": "Controls coherency of memory reads"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "16"
							},
							{
								"name": "name",
								"value": "VK_ACCESS_MEMORY_WRITE_BIT"
							},
							{
								"name": "comment",
								"value": "Controls coherency of memory writes"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkBufferUsageFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_BUFFER_USAGE_TRANSFER_SRC_BIT"
							},
							{
								"name": "comment",
								"value": "Can be used as a source of transfer operations"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_BUFFER_USAGE_TRANSFER_DST_BIT"
							},
							{
								"name": "comment",
								"value": "Can be used as a destination of transfer operations"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT"
							},
							{
								"name": "comment",
								"value": "Can be used as TBO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT"
							},
							{
								"name": "comment",
								"value": "Can be used as IBO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT"
							},
							{
								"name": "comment",
								"value": "Can be used as UBO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "5"
							},
							{
								"name": "name",
								"value": "VK_BUFFER_USAGE_STORAGE_BUFFER_BIT"
							},
							{
								"name": "comment",
								"value": "Can be used as SSBO"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "6"
							},
							{
								"name": "name",
								"value": "VK_BUFFER_USAGE_INDEX_BUFFER_BIT"
							},
							{
								"name": "comment",
								"value": "Can be used as source of fixed-function index fetch (index buffer)"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "7"
							},
							{
								"name": "name",
								"value": "VK_BUFFER_USAGE_VERTEX_BUFFER_BIT"
							},
							{
								"name": "comment",
								"value": "Can be used as source of fixed-function vertex fetch (VBO)"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "8"
							},
							{
								"name": "name",
								"value": "VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT"
							},
							{
								"name": "comment",
								"value": "Can be the source of indirect parameters (e.g. indirect buffer, parameter buffer)"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkBufferCreateFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_BUFFER_CREATE_SPARSE_BINDING_BIT"
							},
							{
								"name": "comment",
								"value": "Buffer should support sparse backing"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT"
							},
							{
								"name": "comment",
								"value": "Buffer should support sparse backing with partial residency"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_BUFFER_CREATE_SPARSE_ALIASED_BIT"
							},
							{
								"name": "comment",
								"value": "Buffer should support constent data access to physical memory blocks mapped into multiple locations of sparse buffers"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkShaderStageFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_SHADER_STAGE_VERTEX_BIT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_SHADER_STAGE_GEOMETRY_BIT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_SHADER_STAGE_FRAGMENT_BIT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "5"
							},
							{
								"name": "name",
								"value": "VK_SHADER_STAGE_COMPUTE_BIT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0x1F"
							},
							{
								"name": "name",
								"value": "VK_SHADER_STAGE_ALL_GRAPHICS"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0x7FFFFFFF"
							},
							{
								"name": "name",
								"value": "VK_SHADER_STAGE_ALL"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkImageUsageFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_USAGE_TRANSFER_SRC_BIT"
							},
							{
								"name": "comment",
								"value": "Can be used as a source of transfer operations"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_USAGE_TRANSFER_DST_BIT"
							},
							{
								"name": "comment",
								"value": "Can be used as a destination of transfer operations"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_USAGE_SAMPLED_BIT"
							},
							{
								"name": "comment",
								"value": "Can be sampled from (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_USAGE_STORAGE_BIT"
							},
							{
								"name": "comment",
								"value": "Can be used as storage image (STORAGE_IMAGE descriptor type)"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT"
							},
							{
								"name": "comment",
								"value": "Can be used as framebuffer color attachment"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "5"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT"
							},
							{
								"name": "comment",
								"value": "Can be used as framebuffer depth/stencil attachment"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "6"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT"
							},
							{
								"name": "comment",
								"value": "Image data not needed outside of rendering"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "7"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT"
							},
							{
								"name": "comment",
								"value": "Can be used as framebuffer input attachment"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkImageCreateFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_CREATE_SPARSE_BINDING_BIT"
							},
							{
								"name": "comment",
								"value": "Image should support sparse backing"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT"
							},
							{
								"name": "comment",
								"value": "Image should support sparse backing with partial residency"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_CREATE_SPARSE_ALIASED_BIT"
							},
							{
								"name": "comment",
								"value": "Image should support constent data access to physical memory blocks mapped into multiple locations of sparse images"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT"
							},
							{
								"name": "comment",
								"value": "Allows image views to have different format than the base image"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT"
							},
							{
								"name": "comment",
								"value": "Allows creating image views with cube type from the created image"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkPipelineCreateFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_PIPELINE_CREATE_DERIVATIVE_BIT"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkColorComponentFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_COLOR_COMPONENT_R_BIT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_COLOR_COMPONENT_G_BIT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_COLOR_COMPONENT_B_BIT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_COLOR_COMPONENT_A_BIT"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkFenceCreateFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_FENCE_CREATE_SIGNALED_BIT"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkFormatFeatureFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT"
							},
							{
								"name": "comment",
								"value": "Format can be used for sampled images (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT"
							},
							{
								"name": "comment",
								"value": "Format can be used for storage images (STORAGE_IMAGE descriptor type)"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT"
							},
							{
								"name": "comment",
								"value": "Format supports atomic operations in case it's used for storage images"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT"
							},
							{
								"name": "comment",
								"value": "Format can be used for uniform texel buffers (TBOs)"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT"
							},
							{
								"name": "comment",
								"value": "Format can be used for storage texel buffers (IBOs)"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "5"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT"
							},
							{
								"name": "comment",
								"value": "Format supports atomic operations in case it's used for storage texel buffers"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "6"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT"
							},
							{
								"name": "comment",
								"value": "Format can be used for vertex buffers (VBOs)"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "7"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT"
							},
							{
								"name": "comment",
								"value": "Format can be used for color attachment images"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "8"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT"
							},
							{
								"name": "comment",
								"value": "Format supports blending in case it's used for color attachment images"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "9"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT"
							},
							{
								"name": "comment",
								"value": "Format can be used for depth/stencil attachment images"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "10"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_FEATURE_BLIT_SRC_BIT"
							},
							{
								"name": "comment",
								"value": "Format can be used as the source image of blits with vkCmdBlitImage"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "11"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_FEATURE_BLIT_DST_BIT"
							},
							{
								"name": "comment",
								"value": "Format can be used as the destination image of blits with vkCmdBlitImage"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "12"
							},
							{
								"name": "name",
								"value": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT"
							},
							{
								"name": "comment",
								"value": "Format can be filtered with VK_FILTER_LINEAR when being sampled"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkQueryControlFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_QUERY_CONTROL_PRECISE_BIT"
							},
							{
								"name": "comment",
								"value": "Require precise results to be collected by the query"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkQueryResultFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_QUERY_RESULT_64_BIT"
							},
							{
								"name": "comment",
								"value": "Results of the queries are written to the destination buffer as 64-bit values"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_QUERY_RESULT_WAIT_BIT"
							},
							{
								"name": "comment",
								"value": "Results of the queries are waited on before proceeding with the result copy"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_QUERY_RESULT_WITH_AVAILABILITY_BIT"
							},
							{
								"name": "comment",
								"value": "Besides the results of the query, the availability of the results is also written"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_QUERY_RESULT_PARTIAL_BIT"
							},
							{
								"name": "comment",
								"value": "Copy the partial results of the query even if the final results aren't available"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkCommandBufferUsageFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT"
							},
							{
								"name": "comment",
								"value": "Command buffer may be submitted/executed more than once simultaneously"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkQueryPipelineStatisticFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT"
							},
							{
								"name": "comment",
								"value": "Optional"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT"
							},
							{
								"name": "comment",
								"value": "Optional"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT"
							},
							{
								"name": "comment",
								"value": "Optional"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT"
							},
							{
								"name": "comment",
								"value": "Optional"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT"
							},
							{
								"name": "comment",
								"value": "Optional"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "5"
							},
							{
								"name": "name",
								"value": "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT"
							},
							{
								"name": "comment",
								"value": "Optional"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "6"
							},
							{
								"name": "name",
								"value": "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT"
							},
							{
								"name": "comment",
								"value": "Optional"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "7"
							},
							{
								"name": "name",
								"value": "VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT"
							},
							{
								"name": "comment",
								"value": "Optional"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "8"
							},
							{
								"name": "name",
								"value": "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT"
							},
							{
								"name": "comment",
								"value": "Optional"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "9"
							},
							{
								"name": "name",
								"value": "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT"
							},
							{
								"name": "comment",
								"value": "Optional"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "10"
							},
							{
								"name": "name",
								"value": "VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT"
							},
							{
								"name": "comment",
								"value": "Optional"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkImageAspectFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_ASPECT_COLOR_BIT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_ASPECT_DEPTH_BIT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_ASPECT_STENCIL_BIT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_IMAGE_ASPECT_METADATA_BIT"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkSparseImageFormatFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT"
							},
							{
								"name": "comment",
								"value": "Image uses a single miptail region for all array layers"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT"
							},
							{
								"name": "comment",
								"value": "Image requires mip levels to be an exact multiple of the sparse image block size for non-miptail levels."
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT"
							},
							{
								"name": "comment",
								"value": "Image uses a non-standard sparse block size"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkSparseMemoryBindFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_SPARSE_MEMORY_BIND_METADATA_BIT"
							},
							{
								"name": "comment",
								"value": "Operation binds resource metadata to memory"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkPipelineStageFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT"
							},
							{
								"name": "comment",
								"value": "Before subsequent commands are processed"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT"
							},
							{
								"name": "comment",
								"value": "Draw/DispatchIndirect command fetch"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_PIPELINE_STAGE_VERTEX_INPUT_BIT"
							},
							{
								"name": "comment",
								"value": "Vertex/index fetch"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_PIPELINE_STAGE_VERTEX_SHADER_BIT"
							},
							{
								"name": "comment",
								"value": "Vertex shading"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT"
							},
							{
								"name": "comment",
								"value": "Tessellation control shading"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "5"
							},
							{
								"name": "name",
								"value": "VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT"
							},
							{
								"name": "comment",
								"value": "Tessellation evaluation shading"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "6"
							},
							{
								"name": "name",
								"value": "VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT"
							},
							{
								"name": "comment",
								"value": "Geometry shading"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "7"
							},
							{
								"name": "name",
								"value": "VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT"
							},
							{
								"name": "comment",
								"value": "Fragment shading"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "8"
							},
							{
								"name": "name",
								"value": "VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT"
							},
							{
								"name": "comment",
								"value": "Early fragment (depth and stencil) tests"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "9"
							},
							{
								"name": "name",
								"value": "VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT"
							},
							{
								"name": "comment",
								"value": "Late fragment (depth and stencil) tests"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "10"
							},
							{
								"name": "name",
								"value": "VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT"
							},
							{
								"name": "comment",
								"value": "Color attachment writes"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "11"
							},
							{
								"name": "name",
								"value": "VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT"
							},
							{
								"name": "comment",
								"value": "Compute shading"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "12"
							},
							{
								"name": "name",
								"value": "VK_PIPELINE_STAGE_TRANSFER_BIT"
							},
							{
								"name": "comment",
								"value": "Transfer/copy operations"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "13"
							},
							{
								"name": "name",
								"value": "VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT"
							},
							{
								"name": "comment",
								"value": "After previous commands have completed"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "14"
							},
							{
								"name": "name",
								"value": "VK_PIPELINE_STAGE_HOST_BIT"
							},
							{
								"name": "comment",
								"value": "Indicates host (CPU) is a source/sink of the dependency"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "15"
							},
							{
								"name": "name",
								"value": "VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT"
							},
							{
								"name": "comment",
								"value": "All stages of the graphics pipeline"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "16"
							},
							{
								"name": "name",
								"value": "VK_PIPELINE_STAGE_ALL_COMMANDS_BIT"
							},
							{
								"name": "comment",
								"value": "All stages supported on the queue"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkCommandPoolCreateFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_COMMAND_POOL_CREATE_TRANSIENT_BIT"
							},
							{
								"name": "comment",
								"value": "Command buffers have a short lifetime"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT"
							},
							{
								"name": "comment",
								"value": "Command buffers may release their memory individually"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkCommandPoolResetFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT"
							},
							{
								"name": "comment",
								"value": "Release resources owned by the pool"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkCommandBufferResetFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT"
							},
							{
								"name": "comment",
								"value": "Release resources owned by the buffer"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkSampleCountFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_SAMPLE_COUNT_1_BIT"
							},
							{
								"name": "comment",
								"value": "Sample count 1 supported"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_SAMPLE_COUNT_2_BIT"
							},
							{
								"name": "comment",
								"value": "Sample count 2 supported"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_SAMPLE_COUNT_4_BIT"
							},
							{
								"name": "comment",
								"value": "Sample count 4 supported"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_SAMPLE_COUNT_8_BIT"
							},
							{
								"name": "comment",
								"value": "Sample count 8 supported"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_SAMPLE_COUNT_16_BIT"
							},
							{
								"name": "comment",
								"value": "Sample count 16 supported"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "5"
							},
							{
								"name": "name",
								"value": "VK_SAMPLE_COUNT_32_BIT"
							},
							{
								"name": "comment",
								"value": "Sample count 32 supported"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "6"
							},
							{
								"name": "name",
								"value": "VK_SAMPLE_COUNT_64_BIT"
							},
							{
								"name": "comment",
								"value": "Sample count 64 supported"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkAttachmentDescriptionFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT"
							},
							{
								"name": "comment",
								"value": "The attachment may alias physical memory of another attachment in the same render pass"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkStencilFaceFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_STENCIL_FACE_FRONT_BIT"
							},
							{
								"name": "comment",
								"value": "Front face"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_STENCIL_FACE_BACK_BIT"
							},
							{
								"name": "comment",
								"value": "Back face"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0x00000003"
							},
							{
								"name": "name",
								"value": "VK_STENCIL_FRONT_AND_BACK"
							},
							{
								"name": "comment",
								"value": "Front and back faces"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkDescriptorPoolCreateFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT"
							},
							{
								"name": "comment",
								"value": "Descriptor sets may be freed individually"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkDependencyFlagBits"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_DEPENDENCY_BY_REGION_BIT"
							},
							{
								"name": "comment",
								"value": "Dependency is per pixel region "
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n        ",
			{
				"comment": " WSI extensions "
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkPresentModeKHR"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_PRESENT_MODE"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_PRESENT_MODE_IMMEDIATE_KHR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_PRESENT_MODE_MAILBOX_KHR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_PRESENT_MODE_FIFO_KHR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_PRESENT_MODE_FIFO_RELAXED_KHR"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkColorSpaceKHR"
					},
					{
						"name": "type",
						"value": "enum"
					},
					{
						"name": "expand",
						"value": "VK_COLORSPACE"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_COLORSPACE_SRGB_NONLINEAR_KHR"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkDisplayPlaneAlphaFlagBitsKHR"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkCompositeAlphaFlagBitsKHR"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkSurfaceTransformFlagBitsKHR"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "5"
							},
							{
								"name": "name",
								"value": "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "6"
							},
							{
								"name": "name",
								"value": "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "7"
							},
							{
								"name": "name",
								"value": "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "8"
							},
							{
								"name": "name",
								"value": "VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkDebugReportFlagBitsEXT"
					},
					{
						"name": "type",
						"value": "bitmask"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_INFORMATION_BIT_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_WARNING_BIT_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_ERROR_BIT_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "bitpos",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_DEBUG_BIT_EXT"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkDebugReportObjectTypeEXT"
					},
					{
						"name": "type",
						"value": "enum"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "2"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "3"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "4"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "5"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "6"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "7"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "8"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "9"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "10"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "11"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "12"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "13"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "14"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "15"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "16"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "17"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "18"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "19"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "20"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "21"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "22"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "23"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "24"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "25"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "26"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "27"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT"
							}
						],
						"childNodes": []
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "28"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT"
							}
						],
						"childNodes": []
					},
					"\n    "
				]
			},
			"\n    ",
			{
				"nodeName": "enums",
				"attributes": [
					{
						"name": "name",
						"value": "VkDebugReportErrorEXT"
					},
					{
						"name": "type",
						"value": "enum"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "0"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_ERROR_NONE_EXT"
							}
						],
						"childNodes": []
					},
					"         ",
					{
						"comment": " Used for INFO & other non-error messages "
					},
					"\n        ",
					{
						"nodeName": "enum",
						"attributes": [
							{
								"name": "value",
								"value": "1"
							},
							{
								"name": "name",
								"value": "VK_DEBUG_REPORT_ERROR_CALLBACK_REF_EXT"
							}
						],
						"childNodes": []
					},
					" ",
					{
						"comment": " Callbacks were not destroyed prior to calling DestroyInstance "
					},
					"\n    "
				]
			},
			"\n\n    ",
			{
				"comment": " SECTION: Vulkan command definitions "
			},
			"\n    ",
			{
				"nodeName": "commands",
				"attributes": [],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_LAYER_NOT_PRESENT,VK_ERROR_EXTENSION_NOT_PRESENT,VK_ERROR_INCOMPATIBLE_DRIVER"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateInstance"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkInstanceCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkInstance"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pInstance"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkDestroyInstance"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkInstance"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"instance"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All child objects created using pname:instance must: have been destroyed prior to destroying pname:instance"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If sname:VkAllocationCallbacks were provided when pname:instance was created, a compatible set of callbacks must: be provided here"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If no sname:VkAllocationCallbacks were provided when pname:instance was created, pname:pAllocator must: be `NULL`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkEnumeratePhysicalDevices"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkInstance"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"instance"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "false,true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pPhysicalDeviceCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "pPhysicalDeviceCount"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDevice"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pPhysicalDevices"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"PFN_vkVoidFunction"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetDeviceProcAddr"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "null-terminated"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"char"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pName"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:pName must: be the name of a supported command that has a first parameter of type sname:VkDevice, sname:VkQueue or sname:VkCommandBuffer, either in the core API or an enabled extension"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"PFN_vkVoidFunction"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetInstanceProcAddr"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkInstance"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"instance"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "null-terminated"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"char"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pName"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:instance is `NULL`, pname:pName must: be one of: fname:vkEnumerateInstanceExtensionProperties, fname:vkEnumerateInstanceLayerProperties or fname:vkCreateInstance"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:instance is not `NULL`, pname:pName must: be the name of a core command or a command from an enabled extension, other than: fname:vkEnumerateInstanceExtensionProperties, fname:vkEnumerateInstanceLayerProperties or fname:vkCreateInstance"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetPhysicalDeviceProperties"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDeviceProperties"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pProperties"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetPhysicalDeviceQueueFamilyProperties"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "false,true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pQueueFamilyPropertyCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "pQueueFamilyPropertyCount"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkQueueFamilyProperties"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pQueueFamilyProperties"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetPhysicalDeviceMemoryProperties"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDeviceMemoryProperties"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pMemoryProperties"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetPhysicalDeviceFeatures"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDeviceFeatures"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pFeatures"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetPhysicalDeviceFormatProperties"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFormat"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"format"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFormatProperties"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pFormatProperties"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_FORMAT_NOT_SUPPORTED"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetPhysicalDeviceImageFormatProperties"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFormat"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"format"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageType"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"type"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageTiling"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"tiling"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageUsageFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"usage"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageCreateFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageFormatProperties"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pImageFormatProperties"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_LAYER_NOT_PRESENT,VK_ERROR_EXTENSION_NOT_PRESENT,VK_ERROR_FEATURE_NOT_PRESENT,VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_DEVICE_LOST"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pDevice"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkDestroyDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All child objects created on pname:device must: have been destroyed prior to destroying pname:device"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If sname:VkAllocationCallbacks were provided when pname:device was created, a compatible set of callbacks must: be provided here"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If no sname:VkAllocationCallbacks were provided when pname:device was created, pname:pAllocator must: be `NULL`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS,VK_INCOMPLETE"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkEnumerateInstanceLayerProperties"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "false,true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pPropertyCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "pPropertyCount"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkLayerProperties"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pProperties"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS,VK_INCOMPLETE"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkEnumerateInstanceExtensionProperties"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "null-terminated"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"char"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pLayerName"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "false,true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pPropertyCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "pPropertyCount"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkExtensionProperties"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pProperties"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:pLayerName is not `NULL`, it must: be the name of an instance layer returned by flink:vkEnumerateInstanceLayerProperties"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS,VK_INCOMPLETE"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkEnumerateDeviceLayerProperties"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "false,true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pPropertyCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "pPropertyCount"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkLayerProperties"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pProperties"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS,VK_INCOMPLETE"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkEnumerateDeviceExtensionProperties"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "null-terminated"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"char"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pLayerName"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "false,true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pPropertyCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "pPropertyCount"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkExtensionProperties"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pProperties"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:pLayerName is not `NULL`, it must: be the name of a device layer returned by flink:vkEnumerateDeviceLayerProperties"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetDeviceQueue"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queueFamilyIndex"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queueIndex"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkQueue"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pQueue"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:queueFamilyIndex must: be one of the queue family indexes specified when pname:device was created, via the sname:VkDeviceQueueCreateInfo structure"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:queueIndex must: be less than the number of queues created for the specified queue family index when pname:device was created, via the pname:queueCount member of the sname:VkDeviceQueueCreateInfo structure"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkQueueSubmit"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkQueue"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queue"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"submitCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "submitCount"
									},
									{
										"name": "externsync",
										"value": "pSubmits[].pWaitSemaphores[],pSubmits[].pSignalSemaphores[]"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSubmitInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSubmits"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFence"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"fence"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:fence must: be unsignalled"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:fence mustnot: be associated with any other queue command that has not yet completed execution on that queue"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkQueueWaitIdle"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkQueue"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queue"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkDeviceWaitIdle"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "implicitexternsyncparams",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "param",
										"attributes": [],
										"childNodes": [
											"all sname:VkQueue objects created from pname:device"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_TOO_MANY_OBJECTS"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkAllocateMemory"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkMemoryAllocateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceMemory"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pMemory"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The number of currently valid memory objects, allocated from pname:device, must: be less than sname:VkPhysicalDeviceLimits::pname:maxMemoryAllocationCount"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkFreeMemory"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceMemory"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"memory"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All submitted commands that refer to pname:memory (via images or buffers) must: have completed execution"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_MEMORY_MAP_FAILED"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkMapMemory"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceMemory"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"memory"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"offset"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"size"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkMemoryMapFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"** ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"ppData"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:memory mustnot: currently be mapped"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:offset must: be less than the size of pname:memory"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:size is not equal to ename:VK_WHOLE_SIZE, the sum of pname:offset and pname:size must: be less than or equal to the pname:size of the pname:memory"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:memory must: have been created with a memory type that reports ename:VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkUnmapMemory"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceMemory"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"memory"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:memory must: currently be mapped"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkFlushMappedMemoryRanges"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"memoryRangeCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "memoryRangeCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkMappedMemoryRange"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pMemoryRanges"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The memory ranges specified by pname:pMemoryRanges must: all currently be mapped"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkInvalidateMappedMemoryRanges"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"memoryRangeCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "memoryRangeCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkMappedMemoryRange"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pMemoryRanges"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The memory ranges specified by pname:pMemoryRanges must: all currently be mapped"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetDeviceMemoryCommitment"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceMemory"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"memory"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCommittedMemoryInBytes"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:memory must: have been created with a memory type that reports ename:VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetBufferMemoryRequirements"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"buffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkMemoryRequirements"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pMemoryRequirements"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkBindBufferMemory"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"buffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceMemory"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"memory"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"memoryOffset"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:buffer mustnot: already be backed by a memory object"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:buffer mustnot: have been created with any sparse memory binding flags"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:memoryOffset must: be less than the size of pname:memory"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:buffer was created with the ename:VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT or ename:VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT, pname:memoryOffset must: be a multiple of the value of sname:VkPhysicalDeviceLimits::pname:minTexelBufferOffsetAlignment"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:buffer was created with the ename:VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT, pname:memoryOffset must: be a multiple of the value of sname:VkPhysicalDeviceLimits::pname:minUniformBufferOffsetAlignment"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:buffer was created with the ename:VK_BUFFER_USAGE_STORAGE_BUFFER_BIT, pname:memoryOffset must: be a multiple of the value of sname:VkPhysicalDeviceLimits::pname:minStorageBufferOffsetAlignment"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:memory must: have been allocated using one of the memory types allowed in the pname:memoryTypeBits member of the sname:VkMemoryRequirements structure returned from a call to fname:vkGetBufferMemoryRequirements with pname:buffer"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The sum of pname:memoryOffset and the size of pname:buffer must: be less than or equal to the size of pname:memory"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:memoryOffset must: be an integer multiple of the pname:alignment member of the sname:VkMemoryRequirements structure returned from a call to fname:vkGetBufferMemoryRequirements with pname:buffer"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetImageMemoryRequirements"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImage"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"image"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkMemoryRequirements"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pMemoryRequirements"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkBindImageMemory"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImage"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"image"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceMemory"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"memory"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"memoryOffset"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:image mustnot: already be backed by a memory object"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:image mustnot: have been created with any sparse memory binding flags"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:memoryOffset must: be less than the size of pname:memory"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:memory must: have been allocated using one of the memory types allowed in the pname:memoryTypeBits member of the sname:VkMemoryRequirements structure returned from a call to fname:vkGetImageMemoryRequirements with pname:image"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:memoryOffset must: be an integer multiple of the pname:alignment member of the sname:VkMemoryRequirements structure returned from a call to fname:vkGetImageMemoryRequirements with pname:image"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:memory must: have storage from pname:memoryOffset onwards equal to or greater than the pname:size member of the sname:VkMemoryRequirements structure returned from a call to fname:vkGetImageMemoryRequirements with pname:image"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetImageSparseMemoryRequirements"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImage"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"image"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "false,true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSparseMemoryRequirementCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "pSparseMemoryRequirementCount"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSparseImageMemoryRequirements"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSparseMemoryRequirements"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:image must: have been created with the ename:VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT flag"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetPhysicalDeviceSparseImageFormatProperties"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFormat"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"format"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageType"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"type"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSampleCountFlagBits"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"samples"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageUsageFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"usage"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageTiling"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"tiling"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "false,true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pPropertyCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "pPropertyCount"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSparseImageFormatProperties"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pProperties"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:format is an integer format, samples must: be one of the bit flag values specified in the value of sname:VkPhysicalDeviceLimits::pname:sampledImageIntegerSampleCounts"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:format is a non-integer color format, samples must: be one of the bit flag values specified in the value of sname:VkPhysicalDeviceLimits::pname:sampledImageColorSampleCounts"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:format is a depth format, samples must: be one of the bit flag values specified in the value of sname:VkPhysicalDeviceLimits::pname:sampledImageDepthSampleCounts"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:format is a stencil format, samples must: be one of the bit flag values specified in the value of sname:VkPhysicalDeviceLimits::pname:sampledImageStencilSampleCounts"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:usage includes ename:VK_IMAGE_USAGE_STORAGE_BIT, samples must: be one of the bit flag values specified in the value of sname:VkPhysicalDeviceLimits::pname:storageImageSampleCounts"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "sparse_binding"
							},
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkQueueBindSparse"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkQueue"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queue"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"bindInfoCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "bindInfoCount"
									},
									{
										"name": "externsync",
										"value": "pBindInfo[].pWaitSemaphores[],pBindInfo[].pSignalSemaphores[],pBindInfo[].pBufferBinds[].buffer,pBindInfo[].pImageOpaqueBinds[].image,pBindInfo[].pImageBinds[].image"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBindSparseInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pBindInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFence"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"fence"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:fence must: be unsignalled"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:fence mustnot: be associated with any other queue command that has not yet completed execution on that queue"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateFence"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFenceCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFence"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pFence"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkDestroyFence"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFence"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"fence"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:fence mustnot: be associated with any queue command that has not yet completed execution on that queue"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If sname:VkAllocationCallbacks were provided when pname:fence was created, a compatible set of callbacks must: be provided here"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If no sname:VkAllocationCallbacks were provided when pname:fence was created, pname:pAllocator must: be `NULL`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkResetFences"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"fenceCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "fenceCount"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFence"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pFences"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pFences mustnot: currently be associated with any queue command that has not yet completed execution on that queue"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS,VK_NOT_READY"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetFenceStatus"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFence"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"fence"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS,VK_TIMEOUT"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkWaitForFences"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"fenceCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "fenceCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFence"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pFences"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"waitAll"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint64_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"timeout"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateSemaphore"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSemaphoreCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSemaphore"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSemaphore"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkDestroySemaphore"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSemaphore"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"semaphore"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:semaphore mustnot: be associated with any queue command that has not yet completed execution on that queue"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If sname:VkAllocationCallbacks were provided when pname:semaphore was created, a compatible set of callbacks must: be provided here"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If no sname:VkAllocationCallbacks were provided when pname:semaphore was created, pname:pAllocator must: be `NULL`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateEvent"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkEventCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkEvent"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pEvent"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkDestroyEvent"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkEvent"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"event"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All submitted commands that refer to pname:event must: have completed execution"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If sname:VkAllocationCallbacks were provided when pname:event was created, a compatible set of callbacks must: be provided here"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If no sname:VkAllocationCallbacks were provided when pname:event was created, pname:pAllocator must: be `NULL`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_EVENT_SET,VK_EVENT_RESET"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetEventStatus"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkEvent"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"event"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkSetEvent"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkEvent"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"event"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkResetEvent"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkEvent"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"event"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateQueryPool"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkQueryPoolCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkQueryPool"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pQueryPool"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkDestroyQueryPool"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkQueryPool"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queryPool"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All submitted commands that refer to pname:queryPool must: have completed execution"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If sname:VkAllocationCallbacks were provided when pname:queryPool was created, a compatible set of callbacks must: be provided here"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If no sname:VkAllocationCallbacks were provided when pname:queryPool was created, pname:pAllocator must: be `NULL`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS,VK_NOT_READY"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetQueryPoolResults"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkQueryPool"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queryPool"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"firstQuery"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queryCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"size_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dataSize"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "dataSize"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pData"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"stride"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkQueryResultFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:firstQuery must: be less than the number of queries in pname:queryPool"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If ename:VK_QUERY_RESULT_64_BIT is not set in pname:flags then pname:pData and pname:stride must be multiples of `4`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If ename:VK_QUERY_RESULT_64_BIT is set in pname:flags then pname:pData and pname:stride must be multiples of `8`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The sum of pname:firstQuery and pname:queryCount must: be less than or equal to the number of queries in pname:queryPool"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dataSize must: be large enough to contain the result of each query, as described <<queries-operation-memorylayout,here>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the pname:queryType used to create pname:queryPool was ename:VK_QUERY_TYPE_TIMESTAMP, pname:flags mustnot: contain ename:VK_QUERY_RESULT_PARTIAL_BIT"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBufferCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBuffer"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the pname:flags member of pname:pCreateInfo includes ename:VK_BUFFER_CREATE_SPARSE_BINDING_BIT or ename:VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT, creating this sname:VkBuffer mustnot: cause the total required sparse memory for all currently valid sparse resources on the device to exceed sname:VkPhysicalDeviceLimits::pname:sparseAddressSpaceSize"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkDestroyBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"buffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All submitted commands that refer to pname:buffer, either directly or via a sname:VkBufferView, must: have completed execution"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If sname:VkAllocationCallbacks were provided when pname:buffer was created, a compatible set of callbacks must: be provided here"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If no sname:VkAllocationCallbacks were provided when pname:buffer was created, pname:pAllocator must: be `NULL`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateBufferView"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBufferViewCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBufferView"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pView"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkDestroyBufferView"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBufferView"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"bufferView"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All submitted commands that refer to pname:bufferView must: have completed execution"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If sname:VkAllocationCallbacks were provided when pname:bufferView was created, a compatible set of callbacks must: be provided here"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If no sname:VkAllocationCallbacks were provided when pname:bufferView was created, pname:pAllocator must: be `NULL`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateImage"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImage"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pImage"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the pname:flags member of pname:pCreateInfo includes ename:VK_IMAGE_CREATE_SPARSE_BINDING_BIT or ename:VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT, creating this sname:VkImage mustnot: cause the total required sparse memory for all currently valid sparse resources on the device to exceed sname:VkPhysicalDeviceLimits::pname:sparseAddressSpaceSize"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkDestroyImage"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImage"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"image"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All submitted commands that refer to pname:image, either directly or via a sname:VkImageView, must: have completed execution"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If sname:VkAllocationCallbacks were provided when pname:image was created, a compatible set of callbacks must: be provided here"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If no sname:VkAllocationCallbacks were provided when pname:image was created, pname:pAllocator must: be `NULL`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetImageSubresourceLayout"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImage"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"image"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageSubresource"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSubresource"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSubresourceLayout"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pLayout"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:image must: have been created with pname:tiling equal to ename:VK_IMAGE_TILING_LINEAR"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The pname:aspectMask member of pname:pSubresource must: only have a single bit set"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateImageView"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageViewCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageView"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pView"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkDestroyImageView"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageView"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"imageView"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All submitted commands that refer to pname:imageView must: have completed execution"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If sname:VkAllocationCallbacks were provided when pname:imageView was created, a compatible set of callbacks must: be provided here"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If no sname:VkAllocationCallbacks were provided when pname:imageView was created, pname:pAllocator must: be `NULL`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateShaderModule"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkShaderModuleCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkShaderModule"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pShaderModule"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkDestroyShaderModule"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkShaderModule"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"shaderModule"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If sname:VkAllocationCallbacks were provided when pname:shaderModule was created, a compatible set of callbacks must: be provided here"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If no sname:VkAllocationCallbacks were provided when pname:shaderModule was created, pname:pAllocator must: be `NULL`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreatePipelineCache"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineCacheCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineCache"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pPipelineCache"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkDestroyPipelineCache"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineCache"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pipelineCache"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If sname:VkAllocationCallbacks were provided when pname:pipelineCache was created, a compatible set of callbacks must: be provided here"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If no sname:VkAllocationCallbacks were provided when pname:pipelineCache was created, pname:pAllocator must: be `NULL`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetPipelineCacheData"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineCache"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pipelineCache"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "false,true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"size_t"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pDataSize"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "pDataSize"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pData"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkMergePipelineCaches"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineCache"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstCache"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcCacheCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "srcCacheCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineCache"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSrcCaches"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstCache mustnot: appear in the list of source caches"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateGraphicsPipelines"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineCache"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pipelineCache"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"createInfoCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "createInfoCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkGraphicsPipelineCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfos"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "createInfoCount"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipeline"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pPipelines"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the value of the pname:flags member of any given element of pname:pCreateInfos contains the ename:VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and the pname:basePipelineIndex member of that same element is not `-1`, the value of pname:basePipelineIndex must: be less than the index into pname:pCreateInfos that corresponds to that element"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateComputePipelines"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineCache"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pipelineCache"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"createInfoCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "createInfoCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkComputePipelineCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfos"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "createInfoCount"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipeline"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pPipelines"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the value of the pname:flags member of any given element of pname:pCreateInfos contains the ename:VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and the pname:basePipelineIndex member of that same element is not `-1`, the value of pname:basePipelineIndex must: be less than the index into pname:pCreateInfos that corresponds to that element"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkDestroyPipeline"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipeline"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pipeline"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All submitted commands that refer to pname:pipeline must: have completed execution"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If sname:VkAllocationCallbacks were provided when pname:pipeline was created, a compatible set of callbacks must: be provided here"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If no sname:VkAllocationCallbacks were provided when pname:pipeline was created, pname:pAllocator must: be `NULL`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreatePipelineLayout"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineLayoutCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineLayout"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pPipelineLayout"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkDestroyPipelineLayout"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineLayout"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pipelineLayout"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If sname:VkAllocationCallbacks were provided when pname:pipelineLayout was created, a compatible set of callbacks must: be provided here"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If no sname:VkAllocationCallbacks were provided when pname:pipelineLayout was created, pname:pAllocator must: be `NULL`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_TOO_MANY_OBJECTS"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateSampler"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSamplerCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSampler"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSampler"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkDestroySampler"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSampler"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"sampler"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All submitted commands that refer to pname:sampler must: have completed execution"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If sname:VkAllocationCallbacks were provided when pname:sampler was created, a compatible set of callbacks must: be provided here"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If no sname:VkAllocationCallbacks were provided when pname:sampler was created, pname:pAllocator must: be `NULL`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateDescriptorSetLayout"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorSetLayoutCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorSetLayout"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSetLayout"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkDestroyDescriptorSetLayout"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorSetLayout"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"descriptorSetLayout"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If sname:VkAllocationCallbacks were provided when pname:descriptorSetLayout was created, a compatible set of callbacks must: be provided here"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If no sname:VkAllocationCallbacks were provided when pname:descriptorSetLayout was created, pname:pAllocator must: be `NULL`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateDescriptorPool"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorPoolCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorPool"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pDescriptorPool"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkDestroyDescriptorPool"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorPool"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"descriptorPool"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All submitted commands that refer to pname:descriptorPool (via any allocated descriptor sets) must: have completed execution"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If sname:VkAllocationCallbacks were provided when pname:descriptorPool was created, a compatible set of callbacks must: be provided here"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If no sname:VkAllocationCallbacks were provided when pname:descriptorPool was created, pname:pAllocator must: be `NULL`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkResetDescriptorPool"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorPool"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"descriptorPool"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorPoolResetFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "implicitexternsyncparams",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "param",
										"attributes": [],
										"childNodes": [
											"any sname:VkDescriptorSet objects allocated from pname:descriptorPool"
										]
									},
									"\n            "
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All uses of pname:descriptorPool (via any allocated descriptor sets) must: have completed execution"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkAllocateDescriptorSets"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "pAllocateInfo->descriptorPool"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorSetAllocateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "pAllocateInfo->descriptorSetCount"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorSet"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pDescriptorSets"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkFreeDescriptorSets"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorPool"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"descriptorPool"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"descriptorSetCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "noautovalidity",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									},
									{
										"name": "len",
										"value": "descriptorSetCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorSet"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pDescriptorSets"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All submitted commands that refer to any element of pname:pDesciptorSets must: have completed execution"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:pDescriptorSets must: be a pointer to an array of pname:descriptorSetCount sname:VkDescriptorSet handles, each element of which must: either be a valid handle or sname:VK_NULL_HANDLE"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:descriptorPool must: have been created with the ename:VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT flag"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkUpdateDescriptorSets"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"descriptorWriteCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "descriptorWriteCount"
									},
									{
										"name": "externsync",
										"value": "pDescriptorWrites[].dstSet"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkWriteDescriptorSet"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pDescriptorWrites"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"descriptorCopyCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "descriptorCopyCount"
									},
									{
										"name": "externsync",
										"value": "pDescriptorCopies[].dstSet"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCopyDescriptorSet"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pDescriptorCopies"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateFramebuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFramebufferCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFramebuffer"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pFramebuffer"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkDestroyFramebuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFramebuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"framebuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All submitted commands that refer to pname:framebuffer must: have completed execution"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If sname:VkAllocationCallbacks were provided when pname:framebuffer was created, a compatible set of callbacks must: be provided here"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If no sname:VkAllocationCallbacks were provided when pname:framebuffer was created, pname:pAllocator must: be `NULL`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateRenderPass"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkRenderPassCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkRenderPass"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pRenderPass"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkDestroyRenderPass"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkRenderPass"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"renderPass"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All submitted commands that refer to pname:renderPass must: have completed execution"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If sname:VkAllocationCallbacks were provided when pname:renderPass was created, a compatible set of callbacks must: be provided here"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If no sname:VkAllocationCallbacks were provided when pname:renderPass was created, pname:pAllocator must: be `NULL`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetRenderAreaGranularity"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkRenderPass"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"renderPass"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkExtent2D"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pGranularity"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateCommandPool"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandPoolCreateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandPool"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCommandPool"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkDestroyCommandPool"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandPool"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandPool"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All sname:VkCommandBuffer objects allocated from pname:commandPool mustnot: be pending execution"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If sname:VkAllocationCallbacks were provided when pname:commandPool was created, a compatible set of callbacks must: be provided here"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If no sname:VkAllocationCallbacks were provided when pname:commandPool was created, pname:pAllocator must: be `NULL`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkResetCommandPool"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandPool"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandPool"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandPoolResetFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All sname:VkCommandBuffer objects allocated from pname:commandPool mustnot: currently be pending execution"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkAllocateCommandBuffers"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "pAllocateInfo->commandPool"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBufferAllocateInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "pAllocateInfo->commandBufferCount"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCommandBuffers"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkFreeCommandBuffers"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandPool"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandPool"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBufferCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "noautovalidity",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									},
									{
										"name": "len",
										"value": "commandBufferCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCommandBuffers"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All elements of pname:pCommandBuffers mustnot: be pending execution"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:pCommandBuffers must: be a pointer to an array of pname:commandBufferCount sname:VkCommandBuffer handles, each element of which must: either be a valid handle or sname:VK_NULL_HANDLE"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkBeginCommandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBufferBeginInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pBeginInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:commandBuffer mustnot: be in the recording state"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:commandBuffer was allocated from a sname:VkCommandPool which did not have the ename:VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, pname:commandBuffer must: be in the initial state."
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:commandBuffer is a secondary command buffer, the pname:pInheritanceInfo member of pname:pBeginInfo must: be a valid sname:VkCommandBufferInheritanceInfo structure"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:commandBuffer is a secondary command buffer and either the pname:occlusionQueryEnable member of the pname:pInheritanceInfo member of pname:pBeginInfo is ename:VK_FALSE, or the precise occlusion queries feature is not enabled, the pname:queryFlags member of the pname:pInheritanceInfo member pname:pBeginInfo mustnot: contain ename:VK_QUERY_CONTROL_PRECISE_BIT"
										]
									},
									"\n\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkEndCommandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:commandBuffer must: be in the recording state"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"fname:vkEndCommandBuffer mustnot: be called inside a render pass instance"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All queries made <<queries-operation-active,active>> during the recording of pname:commandBuffer must: have been made inactive"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkResetCommandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBufferResetFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:commandBuffer mustnot: currently be pending execution"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:commandBuffer must: have been allocated from a pool that was created with the ename:VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics,compute"
							},
							{
								"name": "renderpass",
								"value": "both"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdBindPipeline"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineBindPoint"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pipelineBindPoint"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipeline"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pipeline"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the value of pname:pipelineBindPoint is ename:VK_PIPELINE_BIND_POINT_COMPUTE, the sname:VkCommandPool that pname:commandBuffer was allocated from must: support compute operations"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the value of pname:pipelineBindPoint is ename:VK_PIPELINE_BIND_POINT_GRAPHICS, the sname:VkCommandPool that pname:commandBuffer was allocated from must: support graphics operations"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the value of pname:pipelineBindPoint is ename:VK_PIPELINE_BIND_POINT_COMPUTE, pname:pipeline must: be a compute pipeline"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the value of pname:pipelineBindPoint is ename:VK_PIPELINE_BIND_POINT_GRAPHICS, pname:pipeline must: be a graphics pipeline"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-variableMultisampleRate,variable multisample rate>> feature is not supported, pname:pipeline is a graphics pipeline, the current subpass has no attachments, and this is not the first call to this function with a graphics pipeline after transitioning to the current subpass, then the sample count specified by this pipeline must: match that set in the previous pipeline"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics"
							},
							{
								"name": "renderpass",
								"value": "both"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdSetViewport"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"firstViewport"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"viewportCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "viewportCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkViewport"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pViewports"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:firstViewport must: be less than sname:VkPhysicalDeviceLimits::pname:maxViewports"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The sum of pname:firstViewport and pname:viewportCount must: be between `1` and sname:VkPhysicalDeviceLimits::pname:maxViewports, inclusive"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics"
							},
							{
								"name": "renderpass",
								"value": "both"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdSetScissor"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"firstScissor"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"scissorCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "scissorCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkRect2D"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pScissors"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:firstScissor must: be less than sname:VkPhysicalDeviceLimits::pname:maxViewports"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The sum of pname:firstScissor and pname:scissorCount must: be between `1` and sname:VkPhysicalDeviceLimits::pname:maxViewports, inclusive"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The pname:x and pname:y members of pname:offset must: be greater than or equal to `0`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Evaluation of (pname:offset.x + pname:extent.width) mustnot: cause a signed integer addition overflow"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Evaluation of (pname:offset.y + pname:extent.height) mustnot: cause a signed integer addition overflow"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics"
							},
							{
								"name": "renderpass",
								"value": "both"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdSetLineWidth"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"lineWidth"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-wideLines,wide lines>> feature is not enabled, the value of pname:lineWidth must: be `1.0`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics"
							},
							{
								"name": "renderpass",
								"value": "both"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdSetDepthBias"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"depthBiasConstantFactor"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"depthBiasClamp"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"depthBiasSlopeFactor"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-depthBiasClamp,depth bias clamping>> feature is not enabled, the value of pname:depthBiasClamp must: be code:0.0"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics"
							},
							{
								"name": "renderpass",
								"value": "both"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdSetBlendConstants"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"blendConstants"
										]
									},
									"[4]"
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics"
							},
							{
								"name": "renderpass",
								"value": "both"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdSetDepthBounds"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"minDepthBounds"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"float"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"maxDepthBounds"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:minDepthBounds must: be between `0.0` and `1.0`, inclusive"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:maxDepthBounds must: be between `0.0` and `1.0`, inclusive"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics"
							},
							{
								"name": "renderpass",
								"value": "both"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdSetStencilCompareMask"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStencilFaceFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"faceMask"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"compareMask"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics"
							},
							{
								"name": "renderpass",
								"value": "both"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdSetStencilWriteMask"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStencilFaceFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"faceMask"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"writeMask"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics"
							},
							{
								"name": "renderpass",
								"value": "both"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdSetStencilReference"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkStencilFaceFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"faceMask"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"reference"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics,compute"
							},
							{
								"name": "renderpass",
								"value": "both"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdBindDescriptorSets"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineBindPoint"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pipelineBindPoint"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineLayout"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"layout"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"firstSet"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"descriptorSetCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "descriptorSetCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDescriptorSet"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pDescriptorSets"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dynamicOffsetCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "dynamicOffsetCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pDynamicOffsets"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pDescriptorSets must: have been created with a sname:VkDescriptorSetLayout that matches the sname:VkDescriptorSetLayout at set _n_ in pname:layout, where _n_ is the sum of the index into pname:pDescriptorSets and pname:firstSet"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dynamicOffsetCount must: be equal to the total number of dynamic descriptors in pname:pDescriptorSets"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:pipelineBindPoint must: be supported by the pname:commandBuffer's parent sname:VkCommandPool's queue family"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pDynamicOffsets must: satisfy the required alignment for the corresponding descriptor binding's descriptor type"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics"
							},
							{
								"name": "renderpass",
								"value": "both"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdBindIndexBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"buffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"offset"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkIndexType"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"indexType"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:offset must: be less than the size of pname:buffer"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The sum of pname:offset, and the address of the range of sname:VkDeviceMemory object that's backing pname:buffer, must: be a multiple of the type indicated by pname:indexType"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:buffer must: have been created with the ename:VK_BUFFER_USAGE_INDEX_BUFFER_BIT flag"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics"
							},
							{
								"name": "renderpass",
								"value": "both"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdBindVertexBuffers"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"firstBinding"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"bindingCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "bindingCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBuffer"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pBuffers"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "bindingCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pOffsets"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:firstBinding must: be less than sname:VkPhysicalDeviceLimits::pname:maxVertexInputBindings"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The sum of pname:firstBinding and pname:bindingCount must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxVertexInputBindings"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All elements of pname:pOffsets must: be less than the size of the corresponding element in pname:pBuffers"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All elements of pname:pBuffers must: have been created with the ename:VK_BUFFER_USAGE_VERTEX_BUFFER_BIT flag"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics"
							},
							{
								"name": "renderpass",
								"value": "inside"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdDraw"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vertexCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"instanceCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"firstVertex"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"firstInstance"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"For each set _n_ that is statically used by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must: have been bound to _n_ at ename:VK_PIPELINE_BIND_POINT_GRAPHICS, with a sname:VkPipelineLayout that is compatible for set _n_, with the sname:VkPipelineLayout used to create the current sname:VkPipeline, as described in <<descriptorsets-compatibility>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"For each push constant that is statically used by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must: have been set for ename:VK_PIPELINE_BIND_POINT_GRAPHICS, with a sname:VkPipelineLayout that is compatible for push constants, with the sname:VkPipelineLayout used to create the current sname:VkPipeline, as described in <<descriptorsets-compatibility>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Descriptors in each bound descriptor set, specified via fname:vkCmdBindDescriptorSets, must: be valid if they are statically used by the currently bound sname:VkPipeline object, specified via fname:vkCmdBindPipeline"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All vertex input bindings accessed via vertex input variables declared in the vertex shader entry point's interface must: have valid buffers bound"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"For a given vertex buffer binding, any attribute data fetched must: be entirely contained within the corresponding vertex buffer binding, as described in <<fxvertex-input>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"A valid graphics pipeline must: be bound to the current command buffer with ename:VK_PIPELINE_BIND_POINT_GRAPHICS"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must: have been set on the current command buffer"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Every input attachment used by the current subpass must: be bound to the pipeline via a descriptor set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it mustnot: be used to sample from any sname:VkImage with a sname:VkImageView of the type ename:VK_IMAGE_VIEW_TYPE_3D, ename:VK_IMAGE_VIEW_TYPE_CUBE, ename:VK_IMAGE_VIEW_TYPE_1D_ARRAY, ename:VK_IMAGE_VIEW_TYPE_2D_ARRAY or ename:VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it mustnot: be used with any of the SPIR-V `OpImageSample*` or `OpImageSparseSample*` instructions with code:ImplicitLod, code:Dref or code:Proj in their name, in any shader stage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it mustnot: be used with any of the SPIR-V `OpImageSample*` or `OpImageSparseSample*` instructions that includes a lod bias or any offset values, in any shader stage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-robustBufferAccess,robust buffer access>> feature is not enabled, and any shader stage in the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it mustnot: access values outside of the range of that buffer specified in the currently bound descriptor set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-robustBufferAccess,robust buffer access>> feature is not enabled, and any shader stage in the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it mustnot: access values outside of the range of that buffer specified in the currently bound descriptor set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any slink:VkImage being sampled with ename:VK_FILTER_LINEAR as a result of this command must: be of a format which supports linear filtering, as specified by the ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT flag in sname:VkFormatProperties::pname:linearTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics"
							},
							{
								"name": "renderpass",
								"value": "inside"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdDrawIndexed"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"indexCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"instanceCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"firstIndex"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"int32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vertexOffset"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"firstInstance"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"For each set _n_ that is statically used by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must: have been bound to _n_ at ename:VK_PIPELINE_BIND_POINT_GRAPHICS, with a sname:VkPipelineLayout that is compatible for set _n_, with the sname:VkPipelineLayout used to create the current sname:VkPipeline, as described in <<descriptorsets-compatibility>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"For each push constant that is statically used by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must: have been set for ename:VK_PIPELINE_BIND_POINT_GRAPHICS, with a sname:VkPipelineLayout that is compatible for push constants, with the sname:VkPipelineLayout used to create the current sname:VkPipeline, as described in <<descriptorsets-compatibility>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Descriptors in each bound descriptor set, specified via fname:vkCmdBindDescriptorSets, must: be valid if they are statically used by the currently bound sname:VkPipeline object, specified via fname:vkCmdBindPipeline"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All vertex input bindings accessed via vertex input variables declared in the vertex shader entry point's interface must: have valid buffers bound"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"For a given vertex buffer binding, any attribute data fetched must: be entirely contained within the corresponding vertex buffer binding, as described in <<fxvertex-input>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"A valid graphics pipeline must: be bound to the current command buffer with ename:VK_PIPELINE_BIND_POINT_GRAPHICS"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must: have been set on the current command buffer"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The total value of (pname:indexSize * (pname:firstIndex + pname:indexCount) + pname:offset) must: be less than or equal to the size of the currently bound index buffer, with indexSize being based on the type specified by pname:indexType, where the index buffer, pname:indexType, and pname:offset are specified via fname:vkCmdBindIndexBuffer"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Every input attachment used by the current subpass must: be bound to the pipeline via a descriptor set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it mustnot: be used to sample from any sname:VkImage with a sname:VkImageView of the type ename:VK_IMAGE_VIEW_TYPE_3D, ename:VK_IMAGE_VIEW_TYPE_CUBE, ename:VK_IMAGE_VIEW_TYPE_1D_ARRAY, ename:VK_IMAGE_VIEW_TYPE_2D_ARRAY or ename:VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it mustnot: be used with any of the SPIR-V `OpImageSample*` or `OpImageSparseSample*` instructions with code:ImplicitLod, code:Dref or code:Proj in their name, in any shader stage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it mustnot: be used with any of the SPIR-V `OpImageSample*` or `OpImageSparseSample*` instructions that includes a lod bias or any offset values, in any shader stage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-robustBufferAccess,robust buffer access>> feature is not enabled, and any shader stage in the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it mustnot: access values outside of the range of that buffer specified in the currently bound descriptor set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-robustBufferAccess,robust buffer access>> feature is not enabled, and any shader stage in the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it mustnot: access values outside of the range of that buffer specified in the currently bound descriptor set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any slink:VkImage being sampled with ename:VK_FILTER_LINEAR as a result of this command must: be of a format which supports linear filtering, as specified by the ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT flag in sname:VkFormatProperties::pname:linearTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics"
							},
							{
								"name": "renderpass",
								"value": "inside"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdDrawIndirect"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"buffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"offset"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"drawCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"stride"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:offset must: be a multiple of `4`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:drawCount is greater than `1`, the value of pname:stride must: be a multiple of `4` and must: be greater than or equal to sizeof(sname:VkDrawIndirectCommand)"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-multiDrawIndirect,multi-draw indirect>> feature is not enabled, the value of pname:drawCount must: be `0` or `1`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-drawIndirectFirstInstance,drawIndirectFirstInstance>> feature is not enabled, all the pname:firstInstance members of the sname:VkDrawIndirectCommand structures accessed by this command must: be code:0"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"For each set _n_ that is statically used by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must: have been bound to _n_ at ename:VK_PIPELINE_BIND_POINT_GRAPHICS, with a sname:VkPipelineLayout that is compatible for set _n_, with the sname:VkPipelineLayout used to create the current sname:VkPipeline, as described in <<descriptorsets-compatibility>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"For each push constant that is statically used by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must: have been set for ename:VK_PIPELINE_BIND_POINT_GRAPHICS, with a sname:VkPipelineLayout that is compatible for push constants, with the sname:VkPipelineLayout used to create the current sname:VkPipeline, as described in <<descriptorsets-compatibility>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Descriptors in each bound descriptor set, specified via fname:vkCmdBindDescriptorSets, must: be valid if they are statically used by the currently bound sname:VkPipeline object, specified via fname:vkCmdBindPipeline"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All vertex input bindings accessed via vertex input variables declared in the vertex shader entry point's interface must: have valid buffers bound"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"A valid graphics pipeline must: be bound to the current command buffer with ename:VK_PIPELINE_BIND_POINT_GRAPHICS"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must: have been set on the current command buffer"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:drawCount is equal to `1`, the total value of (pname:offset + sizeof(sname:VkDrawIndirectCommand)) must: be less than or equal to the size of pname:buffer"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:drawCount is greater than `1`, the total value of (pname:stride x (pname:drawCount - 1) + pname:offset + sizeof(sname:VkDrawIndirectCommand)) must: be less than or equal to the size of pname:buffer"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:drawCount must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxDrawIndirectCount"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Every input attachment used by the current subpass must: be bound to the pipeline via a descriptor set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it mustnot: be used to sample from any sname:VkImage with a sname:VkImageView of the type ename:VK_IMAGE_VIEW_TYPE_3D, ename:VK_IMAGE_VIEW_TYPE_CUBE, ename:VK_IMAGE_VIEW_TYPE_1D_ARRAY, ename:VK_IMAGE_VIEW_TYPE_2D_ARRAY or ename:VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it mustnot: be used with any of the SPIR-V `OpImageSample*` or `OpImageSparseSample*` instructions with code:ImplicitLod, code:Dref or code:Proj in their name, in any shader stage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it mustnot: be used with any of the SPIR-V `OpImageSample*` or `OpImageSparseSample*` instructions that includes a lod bias or any offset values, in any shader stage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-robustBufferAccess,robust buffer access>> feature is not enabled, and any shader stage in the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it mustnot: access values outside of the range of that buffer specified in the currently bound descriptor set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-robustBufferAccess,robust buffer access>> feature is not enabled, and any shader stage in the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it mustnot: access values outside of the range of that buffer specified in the currently bound descriptor set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any slink:VkImage being sampled with ename:VK_FILTER_LINEAR as a result of this command must: be of a format which supports linear filtering, as specified by the ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT flag in sname:VkFormatProperties::pname:linearTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics"
							},
							{
								"name": "renderpass",
								"value": "inside"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdDrawIndexedIndirect"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"buffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"offset"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"drawCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"stride"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:offset must: be a multiple of `4`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:drawCount is greater than `1`, the value of pname:stride must: be a multiple of `4` and must: be greater than or equal to sizeof(sname:VkDrawIndexedIndirectCommand)"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-multiDrawIndirect,multi-draw indirect>> feature is not enabled, the value of pname:drawCount must: be `0` or `1`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-drawIndirectFirstInstance,drawIndirectFirstInstance>> feature is not enabled, all the pname:firstInstance members of the sname:VkDrawIndexedIndirectCommand structures accessed by this command must: be code:0"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"For each set _n_ that is statically used by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must: have been bound to _n_ at ename:VK_PIPELINE_BIND_POINT_GRAPHICS, with a sname:VkPipelineLayout that is compatible for set _n_, with the sname:VkPipelineLayout used to create the current sname:VkPipeline, as described in <<descriptorsets-compatibility>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"For each push constant that is statically used by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must: have been set for ename:VK_PIPELINE_BIND_POINT_GRAPHICS, with a sname:VkPipelineLayout that is compatible for push constants, with the sname:VkPipelineLayout used to create the current sname:VkPipeline, as described in <<descriptorsets-compatibility>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Descriptors in each bound descriptor set, specified via fname:vkCmdBindDescriptorSets, must: be valid if they are statically used by the currently bound sname:VkPipeline object, specified via fname:vkCmdBindPipeline"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All vertex input bindings accessed via vertex input variables declared in the vertex shader entry point's interface must: have valid buffers bound"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"A valid graphics pipeline must: be bound to the current command buffer with ename:VK_PIPELINE_BIND_POINT_GRAPHICS"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must: have been set on the current command buffer"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:drawCount is equal to `1`, the total value of (pname:offset + sizeof(sname:VkDrawIndexedIndirectCommand)) must: be less than or equal to the size of pname:buffer"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:drawCount is greater than `1`, the total value of (pname:stride x (pname:drawCount - 1) + pname:offset + sizeof(sname:VkDrawIndexedIndirectCommand)) must: be less than or equal to the size of pname:buffer"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:drawCount must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxDrawIndirectCount"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Every input attachment used by the current subpass must: be bound to the pipeline via a descriptor set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it mustnot: be used to sample from any sname:VkImage with a sname:VkImageView of the type ename:VK_IMAGE_VIEW_TYPE_3D, ename:VK_IMAGE_VIEW_TYPE_CUBE, ename:VK_IMAGE_VIEW_TYPE_1D_ARRAY, ename:VK_IMAGE_VIEW_TYPE_2D_ARRAY or ename:VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it mustnot: be used with any of the SPIR-V `OpImageSample*` or `OpImageSparseSample*` instructions with code:ImplicitLod, code:Dref or code:Proj in their name, in any shader stage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it mustnot: be used with any of the SPIR-V `OpImageSample*` or `OpImageSparseSample*` instructions that includes a lod bias or any offset values, in any shader stage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-robustBufferAccess,robust buffer access>> feature is not enabled, and any shader stage in the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it mustnot: access values outside of the range of that buffer specified in the currently bound descriptor set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-robustBufferAccess,robust buffer access>> feature is not enabled, and any shader stage in the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it mustnot: access values outside of the range of that buffer specified in the currently bound descriptor set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any slink:VkImage being sampled with ename:VK_FILTER_LINEAR as a result of this command must: be of a format which supports linear filtering, as specified by the ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT flag in sname:VkFormatProperties::pname:linearTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "compute"
							},
							{
								"name": "renderpass",
								"value": "outside"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdDispatch"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"x"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"y"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"z"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:x must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxComputeWorkGroupCount[0]"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:y must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxComputeWorkGroupCount[1]"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:z must: be less than or equal to sname:VkPhysicalDeviceLimits::pname:maxComputeWorkGroupCount[2]"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"For each set _n_ that is statically used by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE, a descriptor set must: have been bound to _n_ at ename:VK_PIPELINE_BIND_POINT_COMPUTE, with a sname:VkPipelineLayout that is compatible for set _n_, with the sname:VkPipelineLayout used to create the current sname:VkPipeline, as described in <<descriptorsets-compatibility>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Descriptors in each bound descriptor set, specified via fname:vkCmdBindDescriptorSets, must: be valid if they are statically used by the currently bound sname:VkPipeline object, specified via fname:vkCmdBindPipeline"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"A valid compute pipeline must: be bound to the current command buffer with ename:VK_PIPELINE_BIND_POINT_COMPUTE"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"For each push constant that is statically used by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE, a push constant value must: have been set for ename:VK_PIPELINE_BIND_POINT_COMPUTE, with a sname:VkPipelineLayout that is compatible for push constants with the one used to create the current sname:VkPipeline, as described in <<descriptorsets-compatibility>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it mustnot: be used to sample from any sname:VkImage with a sname:VkImageView of the type ename:VK_IMAGE_VIEW_TYPE_3D, ename:VK_IMAGE_VIEW_TYPE_CUBE, ename:VK_IMAGE_VIEW_TYPE_1D_ARRAY, ename:VK_IMAGE_VIEW_TYPE_2D_ARRAY or ename:VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it mustnot: be used with any of the SPIR-V `OpImageSample*` or `OpImageSparseSample*` instructions with code:ImplicitLod, code:Dref or code:Proj in their name, in any shader stage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it mustnot: be used with any of the SPIR-V `OpImageSample*` or `OpImageSparseSample*` instructions that includes a lod bias or any offset values, in any shader stage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-robustBufferAccess,robust buffer access>> feature is not enabled, and any shader stage in the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE accesses a uniform buffer, it mustnot: access values outside of the range of that buffer specified in the currently bound descriptor set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-robustBufferAccess,robust buffer access>> feature is not enabled, and any shader stage in the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE accesses a storage buffer, it mustnot: access values outside of the range of that buffer specified in the currently bound descriptor set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any slink:VkImage being sampled with ename:VK_FILTER_LINEAR as a result of this command must: be of a format which supports linear filtering, as specified by the ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT flag in sname:VkFormatProperties::pname:linearTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "compute"
							},
							{
								"name": "renderpass",
								"value": "outside"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdDispatchIndirect"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"buffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"offset"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"For each set _n_ that is statically used by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE, a descriptor set must: have been bound to _n_ at ename:VK_PIPELINE_BIND_POINT_COMPUTE, with a sname:VkPipelineLayout that is compatible for set _n_, with the sname:VkPipelineLayout used to create the current sname:VkPipeline, as described in <<descriptorsets-compatibility>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Descriptors in each bound descriptor set, specified via fname:vkCmdBindDescriptorSets, must: be valid if they are statically used by the currently bound sname:VkPipeline object, specified via fname:vkCmdBindPipeline"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"A valid compute pipeline must: be bound to the current command buffer with ename:VK_PIPELINE_BIND_POINT_COMPUTE"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:buffer must: have been created with the ename:VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:offset must: be a multiple of `4`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The sum of pname:offset and the size of sname:VkDispatchIndirectCommand must: be less than or equal to the size of pname:buffer"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"For each push constant that is statically used by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE, a push constant value must: have been set for ename:VK_PIPELINE_BIND_POINT_COMPUTE, with a sname:VkPipelineLayout that is compatible for push constants with the one used to create the current sname:VkPipeline, as described in <<descriptorsets-compatibility>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it mustnot: be used to sample from any sname:VkImage with a sname:VkImageView of the type ename:VK_IMAGE_VIEW_TYPE_3D, ename:VK_IMAGE_VIEW_TYPE_CUBE, ename:VK_IMAGE_VIEW_TYPE_1D_ARRAY, ename:VK_IMAGE_VIEW_TYPE_2D_ARRAY or ename:VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it mustnot: be used with any of the SPIR-V `OpImageSample*` or `OpImageSparseSample*` instructions with code:ImplicitLod, code:Dref or code:Proj in their name, in any shader stage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any sname:VkSampler object that is accessed from a shader by the sname:VkPipeline currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it mustnot: be used with any of the SPIR-V `OpImageSample*` or `OpImageSparseSample*` instructions that includes a lod bias or any offset values, in any shader stage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-robustBufferAccess,robust buffer access>> feature is not enabled, and any shader stage in the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE accesses a uniform buffer, it mustnot: access values outside of the range of that buffer specified in the currently bound descriptor set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-robustBufferAccess,robust buffer access>> feature is not enabled, and any shader stage in the sname:VkPipeline object currently bound to ename:VK_PIPELINE_BIND_POINT_COMPUTE accesses a storage buffer, it mustnot: access values outside of the range of that buffer specified in the currently bound descriptor set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any slink:VkImage being sampled with ename:VK_FILTER_LINEAR as a result of this command must: be of a format which supports linear filtering, as specified by the ename:VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT flag in sname:VkFormatProperties::pname:linearTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "transfer,graphics,compute"
							},
							{
								"name": "renderpass",
								"value": "outside"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdCopyBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"regionCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "regionCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBufferCopy"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pRegions"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The sum of the pname:srcOffset and pname:copySize members of a given element of pname:pRegions must: be less than or equal to the size of pname:srcBuffer"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The sum of the pname:dstOffset and pname:copySize members of a given element of pname:pRegions must: be less than or equal to the size of pname:dstBuffer"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The union of the source regions, and the union of the destination regions, specified by the elements of pname:pRegions, mustnot: overlap in memory"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:srcBuffer must: have been created with ename:VK_BUFFER_USAGE_TRANSFER_SRC_BIT usage flag"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstBuffer must: have been created with ename:VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "transfer,graphics,compute"
							},
							{
								"name": "renderpass",
								"value": "outside"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdCopyImage"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImage"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcImage"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageLayout"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcImageLayout"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImage"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstImage"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageLayout"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstImageLayout"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"regionCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "regionCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageCopy"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pRegions"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The source region specified by a given element of pname:pRegions must: be a region that is contained within pname:srcImage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The destination region specified by a given element of pname:pRegions must: be a region that is contained within pname:dstImage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The union of all source regions, and the union of all destination regions, specified by the elements of pname:pRegions, mustnot: overlap in memory"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:srcImage must: have been created with ename:VK_IMAGE_USAGE_TRANSFER_SRC_BIT usage flag"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:srcImageLayout must: specify the layout of the subresources of pname:srcImage specified in pname:pRegions at the time this command is executed on a sname:VkDevice"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:srcImageLayout must: be either of ename:VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or ename:VK_IMAGE_LAYOUT_GENERAL"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstImage must: have been created with ename:VK_IMAGE_USAGE_TRANSFER_DST_BIT usage flag"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstImageLayout must: specify the layout of the subresources of pname:dstImage specified in pname:pRegions at the time this command is executed on a sname:VkDevice"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstImageLayout must: be either of ename:VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or ename:VK_IMAGE_LAYOUT_GENERAL"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The elink:VkFormat of each of pname:srcImage and pname:dstImage must: be compatible, as defined <<copies-images-format-compatibility, below>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The sample count of pname:srcImage and pname:dstImage must: match"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics"
							},
							{
								"name": "renderpass",
								"value": "outside"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdBlitImage"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImage"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcImage"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageLayout"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcImageLayout"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImage"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstImage"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageLayout"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstImageLayout"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"regionCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "regionCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageBlit"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pRegions"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFilter"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"filter"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The source region specified by a given element of pname:pRegions must: be a region that is contained within pname:srcImage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The destination region specified by a given element of pname:pRegions must: be a region that is contained within pname:dstImage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The union of all source regions, and the union of all destination regions, specified by the elements of pname:pRegions, mustnot: overlap in memory"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:srcImage must: use a format that supports ename:VK_FORMAT_FEATURE_BLIT_SRC_BIT, which is indicated by sname:VkFormatProperties::pname:linearTilingFeatures (for linear tiled images) or sname:VkFormatProperties::pname:optimalTilingFeatures (for optimally tiled images) - as returned by fname:vkGetPhysicalDeviceFormatProperties"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:srcImage must: have been created with ename:VK_IMAGE_USAGE_TRANSFER_SRC_BIT usage flag"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:srcImageLayout must: specify the layout of the subresources of pname:srcImage specified in pname:pRegions at the time this command is executed on a sname:VkDevice"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:srcImageLayout must: be either of ename:VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or ename:VK_IMAGE_LAYOUT_GENERAL"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstImage must: use a format that supports ename:VK_FORMAT_FEATURE_BLIT_DST_BIT, which is indicated by sname:VkFormatProperties::pname:linearTilingFeatures (for linear tiled images) or sname:VkFormatProperties::pname:optimalTilingFeatures (for optimally tiled images) - as returned by fname:vkGetPhysicalDeviceFormatProperties"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstImage must: have been created with ename:VK_IMAGE_USAGE_TRANSFER_DST_BIT usage flag"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstImageLayout must: specify the layout of the subresources of pname:dstImage specified in pname:pRegions at the time this command is executed on a sname:VkDevice"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstImageLayout must: be either of ename:VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or ename:VK_IMAGE_LAYOUT_GENERAL"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The sample count of pname:srcImage and pname:dstImage must: both be equal to ename:VK_SAMPLE_COUNT_1_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If either of pname:srcImage or pname:dstImage was created with a signed integer elink:VkFormat, the other must: also have been created with a signed integer elink:VkFormat"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If either of pname:srcImage or pname:dstImage was created with an unsigned integer elink:VkFormat, the other must: also have been created with an unsigned integer elink:VkFormat"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If either of pname:srcImage or pname:dstImage was created with a depth/stencil format, the other must: have exactly the same format"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:srcImage was created with a depth/stencil format, pname:filter must: be ename:VK_FILTER_NEAREST"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "transfer,graphics,compute"
							},
							{
								"name": "renderpass",
								"value": "outside"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdCopyBufferToImage"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImage"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstImage"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageLayout"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstImageLayout"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"regionCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "regionCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBufferImageCopy"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pRegions"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The buffer region specified by a given element of pname:pRegions must: be a region that is contained within pname:srcBuffer"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The image region specified by a given element of pname:pRegions must: be a region that is contained within pname:dstImage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The union of all source regions, and the union of all destination regions, specified by the elements of pname:pRegions, mustnot: overlap in memory"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:srcBuffer must: have been created with ename:VK_BUFFER_USAGE_TRANSFER_SRC_BIT usage flag"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstImage must: have been created with ename:VK_IMAGE_USAGE_TRANSFER_DST_BIT usage flag"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstImage must: have a sample count equal to ename:VK_SAMPLE_COUNT_1_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstImageLayout must: specify the layout of the subresources of pname:dstImage specified in pname:pRegions at the time this command is executed on a sname:VkDevice"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstImageLayout must: be either of ename:VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or ename:VK_IMAGE_LAYOUT_GENERAL"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "transfer,graphics,compute"
							},
							{
								"name": "renderpass",
								"value": "outside"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdCopyImageToBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImage"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcImage"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageLayout"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcImageLayout"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"regionCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "regionCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBufferImageCopy"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pRegions"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The image region specified by a given element of pname:pRegions must: be a region that is contained within pname:srcImage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The buffer region specified by a given element of pname:pRegions must: be a region that is contained within pname:dstBuffer"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The union of all source regions, and the union of all destination regions, specified by the elements of pname:pRegions, mustnot: overlap in memory"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:srcImage must: have been created with ename:VK_IMAGE_USAGE_TRANSFER_SRC_BIT usage flag"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:srcImage must: have a sample count equal to ename:VK_SAMPLE_COUNT_1_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:srcImageLayout must: specify the layout of the subresources of pname:srcImage specified in pname:pRegions at the time this command is executed on a sname:VkDevice"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:srcImageLayout must: be either of ename:VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or ename:VK_IMAGE_LAYOUT_GENERAL"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstBuffer must: have been created with ename:VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "transfer,graphics,compute"
							},
							{
								"name": "renderpass",
								"value": "outside"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdUpdateBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstOffset"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dataSize"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "latexmath:[$dataSize \\over 4$]"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pData"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The sum of pname:dstOffset and pname:dataSize must: be less than or equal to the size of pname:dstBuffer"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstBuffer must: have been created with ename:VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:dstOffset must: be a multiple of `4`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:dataSize must: be greater than `0`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:dataSize must: be less than or equal to `65536`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The value of pname:dataSize must: be a multiple of `4`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics,compute"
							},
							{
								"name": "renderpass",
								"value": "outside"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdFillBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstOffset"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"size"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"data"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:size is not equal to ename:VK_WHOLE_SIZE, the sum of pname:dstOffset and pname:size must: be less than or equal to the size of pname:dstBuffer"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstBuffer must: have been created with ename:VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstOffset must: be a multiple of `4`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:size is not equal to ename:VK_WHOLE_SIZE, pname:size must: be a multiple of `4`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics,compute"
							},
							{
								"name": "renderpass",
								"value": "outside"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdClearColorImage"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImage"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"image"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageLayout"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"imageLayout"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkClearColorValue"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pColor"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"rangeCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "rangeCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageSubresourceRange"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pRanges"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:image must: have been created with ename:VK_IMAGE_USAGE_TRANSFER_DST_BIT usage flag"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:imageLayout must: specify the layout of the subresource ranges of pname:image specified in pname:pRanges at the time this command is executed on a sname:VkDevice"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:imageLayout must: be either of ename:VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or ename:VK_IMAGE_LAYOUT_GENERAL"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The image range of any given element of pname:pRanges must: be a subresource range that is contained within pname:image"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics"
							},
							{
								"name": "renderpass",
								"value": "outside"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdClearDepthStencilImage"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImage"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"image"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageLayout"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"imageLayout"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkClearDepthStencilValue"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pDepthStencil"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"rangeCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "rangeCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageSubresourceRange"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pRanges"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:image must: have been created with ename:VK_IMAGE_USAGE_TRANSFER_DST_BIT usage flag"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:imageLayout must: specify the layout of the subresource ranges of pname:image specified in pname:pRanges at the time this command is executed on a sname:VkDevice"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:imageLayout must: be either of ename:VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or ename:VK_IMAGE_LAYOUT_GENERAL"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The image range of any given element of pname:pRanges must: be a subresource range that is contained within pname:image"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics"
							},
							{
								"name": "renderpass",
								"value": "inside"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdClearAttachments"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"attachmentCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "attachmentCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkClearAttachment"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAttachments"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"rectCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "rectCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkClearRect"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pRects"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the pname:aspectMask member of any given element of pname:pAttachments contains ename:VK_IMAGE_ASPECT_COLOR_BIT, the pname:colorAttachment member of those elements must: refer to a valid color attachment in the current subpass"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The rectangular region specified by a given element of pname:pRects must: be contained within the render area of the current render pass instance"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The layers specified by a given element of pname:pRects must: be contained within every attachment that pname:pAttachments refers to"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics"
							},
							{
								"name": "renderpass",
								"value": "outside"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdResolveImage"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImage"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcImage"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageLayout"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcImageLayout"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImage"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstImage"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageLayout"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstImageLayout"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"regionCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "regionCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageResolve"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pRegions"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The source region specified by a given element of pname:pRegions must: be a region that is contained within pname:srcImage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The destination region specified by a given element of pname:pRegions must: be a region that is contained within pname:dstImage"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The union of all source regions, and the union of all destination regions, specified by the elements of pname:pRegions, mustnot: overlap in memory"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:srcImage must: have a sample count equal to any valid sample count value other than ename:VK_SAMPLE_COUNT_1_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstImage must: have a sample count equal to ename:VK_SAMPLE_COUNT_1_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:srcImageLayout must: specify the layout of the subresources of pname:srcImage specified in pname:pRegions at the time this command is executed on a sname:VkDevice"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:srcImageLayout must: be either of ename:VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or ename:VK_IMAGE_LAYOUT_GENERAL"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstImageLayout must: specify the layout of the subresources of pname:dstImage specified in pname:pRegions at the time this command is executed on a sname:VkDevice"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstImageLayout must: be either of ename:VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or ename:VK_IMAGE_LAYOUT_GENERAL"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:dstImage was created with pname:tiling equal to ename:VK_IMAGE_TILING_LINEAR, pname:dstImage must: have been created with a pname:format that supports being a color attachment, as specified by the ename:VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT flag in sname:VkFormatProperties::pname:linearTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:dstImage was created with pname:tiling equal to ename:VK_IMAGE_TILING_OPTIMAL, pname:dstImage must: have been created with a pname:format that supports being a color attachment, as specified by the ename:VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT flag in sname:VkFormatProperties::pname:optimalTilingFeatures returned by fname:vkGetPhysicalDeviceFormatProperties"
										]
									},
									"\n\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics,compute"
							},
							{
								"name": "renderpass",
								"value": "outside"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdSetEvent"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkEvent"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"event"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineStageFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"stageMask"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-geometryShader,geometry shaders>> feature is not enabled, pname:stageMask mustnot: contain ename:VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-tessellationShader,tessellation shaders>> feature is not enabled, pname:stageMask mustnot: contain ename:VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or ename:VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics,compute"
							},
							{
								"name": "renderpass",
								"value": "outside"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdResetEvent"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkEvent"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"event"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineStageFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"stageMask"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-geometryShader,geometry shaders>> feature is not enabled, pname:stageMask mustnot: contain ename:VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-tessellationShader,tessellation shaders>> feature is not enabled, pname:stageMask mustnot: contain ename:VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or ename:VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics,compute"
							},
							{
								"name": "renderpass",
								"value": "both"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdWaitEvents"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"eventCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "eventCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkEvent"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pEvents"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineStageFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcStageMask"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineStageFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstStageMask"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"memoryBarrierCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "memoryBarrierCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkMemoryBarrier"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pMemoryBarriers"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"bufferMemoryBarrierCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "bufferMemoryBarrierCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBufferMemoryBarrier"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pBufferMemoryBarriers"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"imageMemoryBarrierCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "imageMemoryBarrierCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageMemoryBarrier"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pImageMemoryBarriers"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:srcStageMask must: be the bitwise OR of the pname:stageMask parameter used in previous calls to fname:vkCmdSetEvent with any of the members of pname:pEvents and ename:VK_PIPELINE_STAGE_HOST_BIT if any of the members of pname:pEvents was set using fname:vkSetEvent"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-geometryShader,geometry shaders>> feature is not enabled, pname:srcStageMask mustnot: contain ename:VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-geometryShader,geometry shaders>> feature is not enabled, pname:dstStageMask mustnot: contain ename:VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-tessellationShader,tessellation shaders>> feature is not enabled, pname:srcStageMask mustnot: contain ename:VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or ename:VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-tessellationShader,tessellation shaders>> feature is not enabled, pname:dstStageMask mustnot: contain ename:VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or ename:VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:pEvents includes one or more events that will be signaled by fname:vkSetEvent after pname:commandBuffer has been submitted to a queue, then fname:vkCmdWaitEvents mustnot: be called inside a render pass instance"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "transfer,graphics,compute"
							},
							{
								"name": "renderpass",
								"value": "both"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdPipelineBarrier"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineStageFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"srcStageMask"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineStageFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstStageMask"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDependencyFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dependencyFlags"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"memoryBarrierCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "memoryBarrierCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkMemoryBarrier"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pMemoryBarriers"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"bufferMemoryBarrierCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "bufferMemoryBarrierCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBufferMemoryBarrier"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pBufferMemoryBarriers"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"imageMemoryBarrierCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "imageMemoryBarrierCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImageMemoryBarrier"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pImageMemoryBarriers"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-geometryShader,geometry shaders>> feature is not enabled, pname:srcStageMask mustnot: contain ename:VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-geometryShader,geometry shaders>> feature is not enabled, pname:dstStageMask mustnot: contain ename:VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-tessellationShader,tessellation shaders>> feature is not enabled, pname:srcStageMask mustnot: contain ename:VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or ename:VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-tessellationShader,tessellation shaders>> feature is not enabled, pname:dstStageMask mustnot: contain ename:VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or pname:VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If fname:vkCmdPipelineBarrier is called within a render pass instance, the render pass must: declare at least one self-dependency from the current subpass to itself - see <<synchronization-pipeline-barriers-subpass-self-dependencies,Subpass Self-dependency>>"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics,compute"
							},
							{
								"name": "renderpass",
								"value": "both"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdBeginQuery"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkQueryPool"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queryPool"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"query"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkQueryControlFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The query identified by pname:queryPool and pname:query must: currently not be <<queries-operation-active,active>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The query identified by pname:queryPool and pname:query must: be unavailable"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-occlusionQueryPrecise,precise occlusion queries>> feature is not enabled, or the pname:queryType used to create pname:queryPool was not ename:VK_QUERY_TYPE_OCCLUSION, pname:flags mustnot: contain ename:VK_QUERY_CONTROL_PRECISE_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:queryPool must: have been created with a pname:queryType that differs from that of any other queries that have been made <<queries-operation-active,active>>, and are currently still active within pname:commandBuffer"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:query must: be less than the number of queries in pname:queryPool"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the pname:queryType used to create pname:queryPool was ename:VK_QUERY_TYPE_OCCLUSION, the sname:VkCommandPool that pname:commandBuffer was created from must: support graphics operations"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the pname:queryType used to create pname:queryPool was ename:VK_QUERY_TYPE_PIPELINE_STATISTICS and any of the pname:pipelineStatistics indicate graphics operations, the sname:VkCommandPool that pname:commandBuffer was created from must: support graphics operations"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the pname:queryType used to create pname:queryPool was ename:VK_QUERY_TYPE_PIPELINE_STATISTICS and any of the pname:pipelineStatistics indicate compute operations, the sname:VkCommandPool that pname:commandBuffer was created from must: support compute operations"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics,compute"
							},
							{
								"name": "renderpass",
								"value": "both"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdEndQuery"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkQueryPool"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queryPool"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"query"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The query identified by pname:queryPool and pname:query must: currently be <<queries-operation-active,active>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:query must: be less than the number of queries in pname:queryPool"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics,compute"
							},
							{
								"name": "renderpass",
								"value": "outside"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdResetQueryPool"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkQueryPool"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queryPool"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"firstQuery"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queryCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:firstQuery must: be less than the number of queries in pname:queryPool"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The sum of pname:firstQuery and pname:queryCount must: be less than or equal to the number of queries in pname:queryPool"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics,compute"
							},
							{
								"name": "renderpass",
								"value": "both"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdWriteTimestamp"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineStageFlagBits"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pipelineStage"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkQueryPool"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queryPool"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"query"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The query identified by pname:queryPool and pname:query must: be _unavailable_"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The command pool's queue family must: support a non-zero value of pname:timestampValidBits"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics,compute"
							},
							{
								"name": "renderpass",
								"value": "outside"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdCopyQueryPoolResults"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkQueryPool"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queryPool"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"firstQuery"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queryCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dstOffset"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDeviceSize"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"stride"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkQueryResultFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:firstQuery must: be less than the number of queries in pname:queryPool"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The sum of pname:firstQuery and pname:queryCount must: be less than or equal to the number of queries in pname:queryPool"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If ename:VK_QUERY_RESULT_64_BIT is not set in pname:flags then pname:dstOffset and pname:stride must be multiples of `4`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If ename:VK_QUERY_RESULT_64_BIT is set in pname:flags then pname:dstOffset and pname:stride must be multiples of `8`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:dstBuffer must: have enough storage, from pname:dstOffset, to contain the result of each query, as described <<queries-operation-memorylayout,here>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the pname:queryType used to create pname:queryPool was ename:VK_QUERY_TYPE_TIMESTAMP, pname:flags mustnot: contain ename:VK_QUERY_RESULT_PARTIAL_BIT"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics,compute"
							},
							{
								"name": "renderpass",
								"value": "both"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary,secondary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdPushConstants"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPipelineLayout"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"layout"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkShaderStageFlags"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"stageFlags"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"offset"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"size"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "size"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pValues"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:stageFlags must: match exactly the shader stages used in pname:layout for the range specified by pname:offset and pname:size"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:offset must: be a multiple of `4`"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:size must: be a multiple of `4`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics"
							},
							{
								"name": "renderpass",
								"value": "outside"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdBeginRenderPass"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkRenderPassBeginInfo"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pRenderPassBegin"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSubpassContents"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"contents"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any of the pname:initialLayout or pname:finalLayout member of the sname:VkAttachmentDescription structures or the pname:layout member of the sname:VkAttachmentReference structures specified when creating the render pass specified in the pname:renderPass member of pname:pRenderPassBegin is ename:VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL then the corresponding attachment image of the framebuffer specified in the pname:framebuffer member of pname:pRenderPassBegin must: have been created with ename:VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any of the pname:initialLayout or pname:finalLayout member of the sname:VkAttachmentDescription structures or the pname:layout member of the sname:VkAttachmentReference structures specified when creating the render pass specified in the pname:renderPass member of pname:pRenderPassBegin is ename:VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL or ename:VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL then the corresponding attachment image of the framebuffer specified in the pname:framebuffer member of pname:pRenderPassBegin must: have been created with ename:VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any of the pname:initialLayout or pname:finalLayout member of the sname:VkAttachmentDescription structures or the pname:layout member of the sname:VkAttachmentReference structures specified when creating the render pass specified in the pname:renderPass member of pname:pRenderPassBegin is ename:VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL then the corresponding attachment image of the framebuffer specified in the pname:framebuffer member of pname:pRenderPassBegin must: have been created with ename:VK_IMAGE_USAGE_SAMPLED_BIT or ename:VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any of the pname:initialLayout or pname:finalLayout member of the sname:VkAttachmentDescription structures or the pname:layout member of the sname:VkAttachmentReference structures specified when creating the render pass specified in the pname:renderPass member of pname:pRenderPassBegin is ename:VK_IMAGE_LAYOUT_TRANSFER_SRC_BIT then the corresponding attachment image of the framebuffer specified in the pname:framebuffer member of pname:pRenderPassBegin must: have been created with ename:VK_IMAGE_USAGE_TRANSFER_SRC_BIT set"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If any of the pname:initialLayout or pname:finalLayout member of the sname:VkAttachmentDescription structures or the pname:layout member of the sname:VkAttachmentReference structures specified when creating the render pass specified in the pname:renderPass member of pname:pRenderPassBegin is ename:VK_IMAGE_LAYOUT_TRANSFER_DST_BIT then the corresponding attachment image of the framebuffer specified in the pname:framebuffer member of pname:pRenderPassBegin must: have been created with ename:VK_IMAGE_USAGE_TRANSFER_DST_BIT set"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics"
							},
							{
								"name": "renderpass",
								"value": "inside"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdNextSubpass"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSubpassContents"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"contents"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n              ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The current subpass index must: be less than the number of subpasses in the render pass minus one"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "graphics"
							},
							{
								"name": "renderpass",
								"value": "inside"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdEndRenderPass"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n              ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"The current subpass index must: be equal to the number of subpasses in the render pass minus one"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "queues",
								"value": "transfer,graphics,compute"
							},
							{
								"name": "renderpass",
								"value": "both"
							},
							{
								"name": "cmdbufferlevel",
								"value": "primary"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCmdExecuteCommands"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBuffer"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"commandBufferCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "commandBufferCount"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkCommandBuffer"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCommandBuffers"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:commandBuffer must: have been created with a pname:level value of ename:VK_COMMAND_BUFFER_LEVEL_PRIMARY"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pCommandBuffers must: have been created with a pname:level value of ename:VK_COMMAND_BUFFER_LEVEL_SECONDARY"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pCommandBuffers mustnot: be already pending execution in pname:commandBuffer, or appear twice in pname:pCommandBuffers, unless it was created with the ename:VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT flag"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pCommandBuffers mustnot: be already pending execution in any other sname:VkCommandBuffer, unless it was created with the ename:VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT flag"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pCommandBuffers must: be in the executable state"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If fname:vkCmdExecuteCommands is being called within a render pass instance, that render pass instance must: have been begun with the pname:contents parameter of fname:vkCmdBeginRenderPass set to ename:VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If fname:vkCmdExecuteCommands is being called within a render pass instance, any given element of pname:pCommandBuffers must: have been recorded with the ename:VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If fname:vkCmdExecuteCommands is being called within a render pass instance, any given element of pname:pCommandBuffers must: have been recorded with the pname:subpass member of the pname:inheritanceInfo structure set to the index of the subpass which the given command buffer will be executed in"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If fname:vkCmdExecuteCommands is being called within a render pass instance, any given element of pname:pCommandBuffers must: have been recorded with a render pass that is compatible with the current render pass - see <<renderpass-compatibility>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If fname:vkCmdExecuteCommands is being called within a render pass instance, and any given element of pname:pCommandBuffers was recorded with the pname:framebuffer member of the sname:VkCommandBufferInheritanceInfo structure not equal to sname:VK_NULL_HANDLE, that sname:VkFramebuffer must: be compatible with the sname:VkFramebuffer used in the current render pass instance"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If the <<features-features-inheritedQueries,inherited queries>> feature is not enabled, pname:commandBuffer mustnot: have any queries <<queries-operation-active,active>>"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:commandBuffer has a ename:VK_QUERY_TYPE_OCCLUSION query <<queries-operation-active,active>>, then each element of pname:pCommandBuffers must: have been recorded with sname:VkCommandBufferBeginInfo::pname:occlusionQueryEnable set to ename:VK_TRUE"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:commandBuffer has a ename:VK_QUERY_TYPE_OCCLUSION query <<queries-operation-active,active>>, then each element of pname:pCommandBuffers must: have been recorded with sname:VkCommandBufferBeginInfo::pname:queryFlags having all bits set that are set for the query"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:commandBuffer has a ename:VK_QUERY_TYPE_PIPELINE_STATISTICS query <<queries-operation-active,active>>, then each element of pname:pCommandBuffers must: have been recorded with sname:VkCommandBufferBeginInfo::pname:pipelineStatistics having all bits set that are set in the sname:VkQueryPool the query uses"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pCommandBuffers mustnot: begin any query types that are <<queries-operation-active,active>> in pname:commandBuffer"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateAndroidSurfaceKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkInstance"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"instance"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAndroidSurfaceCreateInfoKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSurfaceKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSurface"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS,VK_INCOMPLETE"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetPhysicalDeviceDisplayPropertiesKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "false,true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pPropertyCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "pPropertyCount"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDisplayPropertiesKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pProperties"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS,VK_INCOMPLETE"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetPhysicalDeviceDisplayPlanePropertiesKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "false,true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pPropertyCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "pPropertyCount"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDisplayPlanePropertiesKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pProperties"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS,VK_INCOMPLETE"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetDisplayPlaneSupportedDisplaysKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"planeIndex"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "false,true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pDisplayCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "pDisplayCount"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDisplayKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pDisplays"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:planeIndex must: be less than the number of display planes supported by the device as determined by calling fname:vkGetPhysicalDeviceDisplayPlanePropertiesKHR"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS,VK_INCOMPLETE"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetDisplayModePropertiesKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDisplayKHR"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"display"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "false,true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pPropertyCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "pPropertyCount"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDisplayModePropertiesKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pProperties"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateDisplayModeKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDisplayKHR"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"display"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDisplayModeCreateInfoKHR"
										]
									},
									"*",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDisplayModeKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pMode"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetDisplayPlaneCapabilitiesKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDisplayModeKHR"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"mode"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"planeIndex"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDisplayPlaneCapabilitiesKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCapabilities"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateDisplayPlaneSurfaceKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkInstance"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"instance"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDisplaySurfaceCreateInfoKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSurfaceKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSurface"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INCOMPATIBLE_DISPLAY_KHR,VK_ERROR_DEVICE_LOST,VK_ERROR_SURFACE_LOST_KHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateSharedSwapchainsKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"swapchainCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "swapchainCount"
									},
									{
										"name": "externsync",
										"value": "pCreateInfos[].surface,pCreateInfos[].oldSwapchain"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSwapchainCreateInfoKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfos"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "len",
										"value": "swapchainCount"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSwapchainKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSwapchains"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateMirSurfaceKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkInstance"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"instance"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkMirSurfaceCreateInfoKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSurfaceKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSurface"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetPhysicalDeviceMirPresentationSupportKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queueFamilyIndex"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"MirConnection"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"connection"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:queueFamilyIndex must: be less than the value of pname:pQueueFamilyPropertyCount returned by fname:vkGetPhysicalDeviceQueueFamilyProperties for the given pname:physicalDevice"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkDestroySurfaceKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkInstance"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"instance"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSurfaceKHR"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"surface"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All sname:VkSwapchainKHR objects created for pname:surface must: have been destroyed prior to destroying pname:surface"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If sname:VkAllocationCallbacks were provided when pname:surface was created, a compatible set of callbacks must: be provided here"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If no sname:VkAllocationCallbacks were provided when pname:surface was created, pname:pAllocator must: be `NULL`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetPhysicalDeviceSurfaceSupportKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queueFamilyIndex"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSurfaceKHR"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"surface"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSupported"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:queueFamilyIndex must: be less than the value of pname:pQueueFamilyPropertyCount returned by fname:vkGetPhysicalDeviceQueueFamilyProperties for the given pname:physicalDevice"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS,VK_INCOMPLETE"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetPhysicalDeviceSurfaceCapabilitiesKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSurfaceKHR"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"surface"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSurfaceCapabilitiesKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSurfaceCapabilities"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS,VK_INCOMPLETE"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetPhysicalDeviceSurfaceFormatsKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSurfaceKHR"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"surface"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "false,true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSurfaceFormatCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "pSurfaceFormatCount"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSurfaceFormatKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSurfaceFormats"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS,VK_INCOMPLETE"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetPhysicalDeviceSurfacePresentModesKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSurfaceKHR"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"surface"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "false,true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pPresentModeCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "pPresentModeCount"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPresentModeKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pPresentModes"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_SURFACE_LOST_KHR,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateSwapchainKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "pCreateInfo.surface,pCreateInfo.oldSwapchain"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSwapchainCreateInfoKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSwapchainKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSwapchain"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkDestroySwapchainKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSwapchainKHR"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"swapchain"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"All uses of presentable images acquired from pname:swapchain and owned by the application must: have completed execution"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If sname:VkAllocationCallbacks were provided when pname:swapchain was created, a compatible set of callbacks must: be provided here"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If no sname:VkAllocationCallbacks were provided when pname:swapchain was created, pname:pAllocator must: be `NULL`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS,VK_INCOMPLETE"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetSwapchainImagesKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSwapchainKHR"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"swapchain"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "false,true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSwapchainImageCount"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "len",
										"value": "pSwapchainImageCount"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkImage"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSwapchainImages"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS,VK_SUBOPTIMAL_KHR"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkAcquireNextImageKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"device"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSwapchainKHR"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"swapchain"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint64_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"timeout"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSemaphore"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"semaphore"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									},
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkFence"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"fence"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pImageIndex"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:semaphore is not sname:VK_NULL_HANDLE it must: be unsignalled"
										]
									},
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If pname:fence is not sname:VK_NULL_HANDLE it must: be unsignalled and mustnot: be associated with any other queue command that has not yet completed execution on that queue"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS,VK_SUBOPTIMAL_KHR"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkQueuePresentKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkQueue"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queue"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "pPresentInfo.pWaitSemaphores[],pPresentInfo.pSwapchains[]"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPresentInfoKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pPresentInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"Any given element of pname:pSwapchains member of pname:pPresentInfo must: be a swapchain that is created for a surface for which presentation is supported from pname:queue as determined using a call to fname:vkGetPhysicalDeviceSurfaceSupportKHR"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateWaylandSurfaceKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkInstance"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"instance"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkWaylandSurfaceCreateInfoKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSurfaceKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSurface"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetPhysicalDeviceWaylandPresentationSupportKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queueFamilyIndex"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"struct ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"wl_display"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"display"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:queueFamilyIndex must: be less than the value of pname:pQueueFamilyPropertyCount returned by fname:vkGetPhysicalDeviceQueueFamilyProperties for the given pname:physicalDevice"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateWin32SurfaceKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkInstance"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"instance"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkWin32SurfaceCreateInfoKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSurfaceKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSurface"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetPhysicalDeviceWin32PresentationSupportKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queueFamilyIndex"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:queueFamilyIndex must: be less than the value of pname:pQueueFamilyPropertyCount returned by fname:vkGetPhysicalDeviceQueueFamilyProperties for the given pname:physicalDevice"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateXlibSurfaceKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkInstance"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"instance"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkXlibSurfaceCreateInfoKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSurfaceKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSurface"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetPhysicalDeviceXlibPresentationSupportKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queueFamilyIndex"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"Display"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"dpy"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VisualID"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"visualID"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:queueFamilyIndex must: be less than the value of pname:pQueueFamilyPropertyCount returned by fname:vkGetPhysicalDeviceQueueFamilyProperties for the given pname:physicalDevice"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [
							{
								"name": "successcodes",
								"value": "VK_SUCCESS"
							},
							{
								"name": "errorcodes",
								"value": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateXcbSurfaceKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkInstance"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"instance"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkXcbSurfaceCreateInfoKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkSurfaceKHR"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pSurface"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkBool32"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkGetPhysicalDeviceXcbPresentationSupportKHR"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkPhysicalDevice"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"physicalDevice"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"queueFamilyIndex"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"xcb_connection_t"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"connection"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"xcb_visualid_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"visual_id"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:queueFamilyIndex must: be less than the value of pname:pQueueFamilyPropertyCount returned by fname:vkGetPhysicalDeviceQueueFamilyProperties for the given pname:physicalDevice"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkResult"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkCreateDebugReportCallbackEXT"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkInstance"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"instance"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDebugReportCallbackCreateInfoEXT"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCreateInfo"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDebugReportCallbackEXT"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pCallback"
										]
									}
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkDestroyDebugReportCallbackEXT"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkInstance"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"instance"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "externsync",
										"value": "true"
									}
								],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDebugReportCallbackEXT"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"callback"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [
									{
										"name": "optional",
										"value": "true"
									}
								],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkAllocationCallbacks"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pAllocator"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n               ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If sname:VkAllocationCallbacks were provided when pname:instance was created, a compatible set of callbacks must: be provided here"
										]
									},
									"\n               ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"If no sname:VkAllocationCallbacks were provided when pname:instance was created, pname:pAllocator must: be `NULL`"
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "command",
						"attributes": [],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "proto",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"void"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"vkDebugReportMessageEXT"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkInstance"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"instance"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDebugReportFlagsEXT"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"flags"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"VkDebugReportObjectTypeEXT"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"objectType"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"uint64_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"object"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"size_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"location"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"int32_t"
										]
									},
									" ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"messageCode"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"char"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pLayerPrefix"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "param",
								"attributes": [],
								"childNodes": [
									"const ",
									{
										"nodeName": "type",
										"attributes": [],
										"childNodes": [
											"char"
										]
									},
									"* ",
									{
										"nodeName": "name",
										"attributes": [],
										"childNodes": [
											"pMessage"
										]
									}
								]
							},
							"\n            ",
							{
								"nodeName": "validity",
								"attributes": [],
								"childNodes": [
									"\n               ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:instance must: be a valid sname:VkInstance handle"
										]
									},
									"\n               ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:flags must be a combination of one or more of sname:VkDebugReportFlagBitsEXT"
										]
									},
									"\n               ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:objType must be one of sname:VkDebugReportObjectTypeEXT, ename:VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT if pname:object is `NULL`"
										]
									},
									"\n               ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:object may be a {apiname} object"
										]
									},
									"\n               ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:pLayerPrefix must: be a `NULL` terminated string."
										]
									},
									"\n               ",
									{
										"nodeName": "usage",
										"attributes": [],
										"childNodes": [
											"pname:pMsg must: be a `NULL` terminated string."
										]
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n    "
				]
			},
			"\n\n    ",
			{
				"comment": " SECTION: Vulkan API interface definitions "
			},
			"\n    ",
			{
				"nodeName": "feature",
				"attributes": [
					{
						"name": "api",
						"value": "vulkan"
					},
					{
						"name": "name",
						"value": "VK_VERSION_1_0"
					},
					{
						"name": "number",
						"value": "1.0"
					}
				],
				"childNodes": [
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Header boilerplate"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "type",
								"attributes": [
									{
										"name": "name",
										"value": "vk_platform"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "API version"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "type",
								"attributes": [
									{
										"name": "name",
										"value": "VK_API_VERSION"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "type",
								"attributes": [
									{
										"name": "name",
										"value": "VK_VERSION_MAJOR"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "type",
								"attributes": [
									{
										"name": "name",
										"value": "VK_VERSION_MINOR"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "type",
								"attributes": [
									{
										"name": "name",
										"value": "VK_VERSION_PATCH"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "API constants"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "enum",
								"attributes": [
									{
										"name": "name",
										"value": "VK_LOD_CLAMP_NONE"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "enum",
								"attributes": [
									{
										"name": "name",
										"value": "VK_REMAINING_MIP_LEVELS"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "enum",
								"attributes": [
									{
										"name": "name",
										"value": "VK_REMAINING_ARRAY_LAYERS"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "enum",
								"attributes": [
									{
										"name": "name",
										"value": "VK_WHOLE_SIZE"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "enum",
								"attributes": [
									{
										"name": "name",
										"value": "VK_ATTACHMENT_UNUSED"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "enum",
								"attributes": [
									{
										"name": "name",
										"value": "VK_TRUE"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "enum",
								"attributes": [
									{
										"name": "name",
										"value": "VK_FALSE"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "type",
								"attributes": [
									{
										"name": "name",
										"value": "VK_NULL_HANDLE"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "enum",
								"attributes": [
									{
										"name": "name",
										"value": "VK_QUEUE_FAMILY_IGNORED"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "enum",
								"attributes": [
									{
										"name": "name",
										"value": "VK_SUBPASS_EXTERNAL"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "type",
								"attributes": [
									{
										"name": "name",
										"value": "VkPipelineCacheHeaderVersion"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Device initialization"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCreateInstance"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkDestroyInstance"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkEnumeratePhysicalDevices"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkGetPhysicalDeviceFeatures"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkGetPhysicalDeviceFormatProperties"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkGetPhysicalDeviceImageFormatProperties"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkGetPhysicalDeviceProperties"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkGetPhysicalDeviceQueueFamilyProperties"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkGetPhysicalDeviceMemoryProperties"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkGetInstanceProcAddr"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkGetDeviceProcAddr"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Device commands"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCreateDevice"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkDestroyDevice"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Extension discovery commands"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkEnumerateInstanceExtensionProperties"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkEnumerateDeviceExtensionProperties"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Layer discovery commands"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkEnumerateInstanceLayerProperties"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkEnumerateDeviceLayerProperties"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "queue commands"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkGetDeviceQueue"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkQueueSubmit"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkQueueWaitIdle"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkDeviceWaitIdle"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Memory commands"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkAllocateMemory"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkFreeMemory"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkMapMemory"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkUnmapMemory"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkFlushMappedMemoryRanges"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkInvalidateMappedMemoryRanges"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkGetDeviceMemoryCommitment"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Memory management API commands"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkBindBufferMemory"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkBindImageMemory"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkGetBufferMemoryRequirements"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkGetImageMemoryRequirements"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Sparse resource memory management API commands"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkGetImageSparseMemoryRequirements"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkGetPhysicalDeviceSparseImageFormatProperties"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkQueueBindSparse"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Fence commands"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCreateFence"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkDestroyFence"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkResetFences"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkGetFenceStatus"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkWaitForFences"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Queue semaphore commands"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCreateSemaphore"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkDestroySemaphore"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Event commands"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCreateEvent"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkDestroyEvent"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkGetEventStatus"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkSetEvent"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkResetEvent"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Query commands"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCreateQueryPool"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkDestroyQueryPool"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkGetQueryPoolResults"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Buffer commands"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCreateBuffer"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkDestroyBuffer"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Buffer view commands"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCreateBufferView"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkDestroyBufferView"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Image commands"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCreateImage"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkDestroyImage"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkGetImageSubresourceLayout"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Image view commands"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCreateImageView"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkDestroyImageView"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Shader commands"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCreateShaderModule"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkDestroyShaderModule"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Pipeline Cache commands"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCreatePipelineCache"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkDestroyPipelineCache"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkGetPipelineCacheData"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkMergePipelineCaches"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Pipeline commands"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCreateGraphicsPipelines"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCreateComputePipelines"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkDestroyPipeline"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Pipeline layout commands"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCreatePipelineLayout"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkDestroyPipelineLayout"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Sampler commands"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCreateSampler"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkDestroySampler"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Descriptor set commands"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCreateDescriptorSetLayout"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkDestroyDescriptorSetLayout"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCreateDescriptorPool"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkDestroyDescriptorPool"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkResetDescriptorPool"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkAllocateDescriptorSets"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkFreeDescriptorSets"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkUpdateDescriptorSets"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Pass commands"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCreateFramebuffer"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkDestroyFramebuffer"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCreateRenderPass"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkDestroyRenderPass"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkGetRenderAreaGranularity"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Command pool commands"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCreateCommandPool"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkDestroyCommandPool"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkResetCommandPool"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Command buffer commands"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkAllocateCommandBuffers"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkFreeCommandBuffers"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkBeginCommandBuffer"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkEndCommandBuffer"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkResetCommandBuffer"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Command buffer building commands"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdBindPipeline"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdSetViewport"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdSetScissor"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdSetLineWidth"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdSetDepthBias"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdSetBlendConstants"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdSetDepthBounds"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdSetStencilCompareMask"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdSetStencilWriteMask"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdSetStencilReference"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdBindDescriptorSets"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdBindIndexBuffer"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdBindVertexBuffers"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdDraw"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdDrawIndexed"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdDrawIndirect"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdDrawIndexedIndirect"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdDispatch"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdDispatchIndirect"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdCopyBuffer"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdCopyImage"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdBlitImage"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdCopyBufferToImage"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdCopyImageToBuffer"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdUpdateBuffer"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdFillBuffer"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdClearColorImage"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdClearDepthStencilImage"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdClearAttachments"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdResolveImage"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdSetEvent"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdResetEvent"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdWaitEvents"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdPipelineBarrier"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdBeginQuery"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdEndQuery"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdResetQueryPool"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdWriteTimestamp"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdCopyQueryPoolResults"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdPushConstants"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdBeginRenderPass"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdNextSubpass"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdEndRenderPass"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "command",
								"attributes": [
									{
										"name": "name",
										"value": "vkCmdExecuteCommands"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "require",
						"attributes": [
							{
								"name": "comment",
								"value": "Types not directly used by the API"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"comment": " Include <type name=\"typename\"/> here for e.g. structs that\n                 are not parameter types of commands, but still need to be\n                 defined in the API.\n             "
							},
							"\n            ",
							{
								"nodeName": "type",
								"attributes": [
									{
										"name": "name",
										"value": "VkBufferMemoryBarrier"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "type",
								"attributes": [
									{
										"name": "name",
										"value": "VkDispatchIndirectCommand"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "type",
								"attributes": [
									{
										"name": "name",
										"value": "VkDrawIndexedIndirectCommand"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "type",
								"attributes": [
									{
										"name": "name",
										"value": "VkDrawIndirectCommand"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "type",
								"attributes": [
									{
										"name": "name",
										"value": "VkImageMemoryBarrier"
									}
								],
								"childNodes": []
							},
							"\n            ",
							{
								"nodeName": "type",
								"attributes": [
									{
										"name": "name",
										"value": "VkMemoryBarrier"
									}
								],
								"childNodes": []
							},
							"\n        "
						]
					},
					"\n    "
				]
			},
			"\n\n    ",
			{
				"comment": " SECTION: Vulkan extension interface definitions (none yet) "
			},
			"\n    ",
			{
				"nodeName": "extensions",
				"attributes": [],
				"childNodes": [
					"\n            ",
					{
						"comment": " WSI extensions "
					},
					"\n        ",
					{
						"nodeName": "extension",
						"attributes": [
							{
								"name": "name",
								"value": "VK_KHR_surface"
							},
							{
								"name": "number",
								"value": "1"
							},
							{
								"name": "supported",
								"value": "vulkan"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "require",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "25"
											},
											{
												"name": "name",
												"value": "VK_KHR_SURFACE_SPEC_VERSION"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "\"VK_KHR_surface\""
											},
											{
												"name": "name",
												"value": "VK_KHR_SURFACE_EXTENSION_NAME"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "offset",
												"value": "0"
											},
											{
												"name": "dir",
												"value": "-"
											},
											{
												"name": "extends",
												"value": "VkResult"
											},
											{
												"name": "name",
												"value": "VK_ERROR_SURFACE_LOST_KHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "offset",
												"value": "1"
											},
											{
												"name": "dir",
												"value": "-"
											},
											{
												"name": "extends",
												"value": "VkResult"
											},
											{
												"name": "name",
												"value": "VK_ERROR_NATIVE_WINDOW_IN_USE_KHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkDestroySurfaceKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkGetPhysicalDeviceSurfaceSupportKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkGetPhysicalDeviceSurfaceCapabilitiesKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkGetPhysicalDeviceSurfaceFormatsKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkGetPhysicalDeviceSurfacePresentModesKHR"
											}
										],
										"childNodes": []
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "extension",
						"attributes": [
							{
								"name": "name",
								"value": "VK_KHR_swapchain"
							},
							{
								"name": "number",
								"value": "2"
							},
							{
								"name": "supported",
								"value": "vulkan"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "require",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "67"
											},
											{
												"name": "name",
												"value": "VK_KHR_SWAPCHAIN_SPEC_VERSION"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "\"VK_KHR_swapchain\""
											},
											{
												"name": "name",
												"value": "VK_KHR_SWAPCHAIN_EXTENSION_NAME"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "offset",
												"value": "0"
											},
											{
												"name": "extends",
												"value": "VkStructureType"
											},
											{
												"name": "name",
												"value": "VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "offset",
												"value": "1"
											},
											{
												"name": "extends",
												"value": "VkStructureType"
											},
											{
												"name": "name",
												"value": "VK_STRUCTURE_TYPE_PRESENT_INFO_KHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "offset",
												"value": "2"
											},
											{
												"name": "extends",
												"value": "VkImageLayout"
											},
											{
												"name": "name",
												"value": "VK_IMAGE_LAYOUT_PRESENT_SRC_KHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "offset",
												"value": "3"
											},
											{
												"name": "extends",
												"value": "VkResult"
											},
											{
												"name": "name",
												"value": "VK_SUBOPTIMAL_KHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "offset",
												"value": "4"
											},
											{
												"name": "dir",
												"value": "-"
											},
											{
												"name": "extends",
												"value": "VkResult"
											},
											{
												"name": "name",
												"value": "VK_ERROR_OUT_OF_DATE_KHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkCreateSwapchainKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkDestroySwapchainKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkGetSwapchainImagesKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkAcquireNextImageKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkQueuePresentKHR"
											}
										],
										"childNodes": []
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "extension",
						"attributes": [
							{
								"name": "name",
								"value": "VK_KHR_display"
							},
							{
								"name": "number",
								"value": "3"
							},
							{
								"name": "supported",
								"value": "vulkan"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "require",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "21"
											},
											{
												"name": "name",
												"value": "VK_KHR_DISPLAY_SPEC_VERSION"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "\"VK_KHR_display\""
											},
											{
												"name": "name",
												"value": "VK_KHR_DISPLAY_EXTENSION_NAME"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "offset",
												"value": "0"
											},
											{
												"name": "extends",
												"value": "VkStructureType"
											},
											{
												"name": "name",
												"value": "VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "offset",
												"value": "1"
											},
											{
												"name": "extends",
												"value": "VkStructureType"
											},
											{
												"name": "name",
												"value": "VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "type",
										"attributes": [
											{
												"name": "name",
												"value": "VkDisplayPlaneAlphaFlagsKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "type",
										"attributes": [
											{
												"name": "name",
												"value": "VkDisplayPlaneAlphaFlagBitsKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "type",
										"attributes": [
											{
												"name": "name",
												"value": "VkDisplayPropertiesKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "type",
										"attributes": [
											{
												"name": "name",
												"value": "VkDisplayModeParametersKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "type",
										"attributes": [
											{
												"name": "name",
												"value": "VkDisplayModePropertiesKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "type",
										"attributes": [
											{
												"name": "name",
												"value": "VkDisplayModeCreateInfoKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "type",
										"attributes": [
											{
												"name": "name",
												"value": "VkDisplayPlaneCapabilitiesKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "type",
										"attributes": [
											{
												"name": "name",
												"value": "VkDisplayPlanePropertiesKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "type",
										"attributes": [
											{
												"name": "name",
												"value": "VkDisplaySurfaceCreateInfoKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkGetPhysicalDeviceDisplayPropertiesKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkGetPhysicalDeviceDisplayPlanePropertiesKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkGetDisplayPlaneSupportedDisplaysKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkGetDisplayModePropertiesKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkCreateDisplayModeKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkGetDisplayPlaneCapabilitiesKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkCreateDisplayPlaneSurfaceKHR"
											}
										],
										"childNodes": []
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "extension",
						"attributes": [
							{
								"name": "name",
								"value": "VK_KHR_display_swapchain"
							},
							{
								"name": "number",
								"value": "4"
							},
							{
								"name": "supported",
								"value": "vulkan"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "require",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "9"
											},
											{
												"name": "name",
												"value": "VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "\"VK_KHR_display_swapchain\""
											},
											{
												"name": "name",
												"value": "VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "offset",
												"value": "0"
											},
											{
												"name": "extends",
												"value": "VkStructureType"
											},
											{
												"name": "name",
												"value": "VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "offset",
												"value": "1"
											},
											{
												"name": "dir",
												"value": "-"
											},
											{
												"name": "extends",
												"value": "VkResult"
											},
											{
												"name": "name",
												"value": "VK_ERROR_INCOMPATIBLE_DISPLAY_KHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "type",
										"attributes": [
											{
												"name": "name",
												"value": "VkDisplayPresentInfoKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkCreateSharedSwapchainsKHR"
											}
										],
										"childNodes": []
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "extension",
						"attributes": [
							{
								"name": "name",
								"value": "VK_KHR_xlib_surface"
							},
							{
								"name": "number",
								"value": "5"
							},
							{
								"name": "protect",
								"value": "VK_USE_PLATFORM_XLIB_KHR"
							},
							{
								"name": "supported",
								"value": "vulkan"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "require",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "6"
											},
											{
												"name": "name",
												"value": "VK_KHR_XLIB_SURFACE_SPEC_VERSION"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "\"VK_KHR_xlib_surface\""
											},
											{
												"name": "name",
												"value": "VK_KHR_XLIB_SURFACE_EXTENSION_NAME"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "offset",
												"value": "0"
											},
											{
												"name": "extends",
												"value": "VkStructureType"
											},
											{
												"name": "name",
												"value": "VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "type",
										"attributes": [
											{
												"name": "name",
												"value": "VkXlibSurfaceCreateFlagsKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "type",
										"attributes": [
											{
												"name": "name",
												"value": "VkXlibSurfaceCreateInfoKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkCreateXlibSurfaceKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkGetPhysicalDeviceXlibPresentationSupportKHR"
											}
										],
										"childNodes": []
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "extension",
						"attributes": [
							{
								"name": "name",
								"value": "VK_KHR_xcb_surface"
							},
							{
								"name": "number",
								"value": "6"
							},
							{
								"name": "protect",
								"value": "VK_USE_PLATFORM_XCB_KHR"
							},
							{
								"name": "supported",
								"value": "vulkan"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "require",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "6"
											},
											{
												"name": "name",
												"value": "VK_KHR_XCB_SURFACE_SPEC_VERSION"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "\"VK_KHR_xcb_surface\""
											},
											{
												"name": "name",
												"value": "VK_KHR_XCB_SURFACE_EXTENSION_NAME"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "offset",
												"value": "0"
											},
											{
												"name": "extends",
												"value": "VkStructureType"
											},
											{
												"name": "name",
												"value": "VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "type",
										"attributes": [
											{
												"name": "name",
												"value": "VkXcbSurfaceCreateFlagsKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "type",
										"attributes": [
											{
												"name": "name",
												"value": "VkXcbSurfaceCreateInfoKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkCreateXcbSurfaceKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkGetPhysicalDeviceXcbPresentationSupportKHR"
											}
										],
										"childNodes": []
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "extension",
						"attributes": [
							{
								"name": "name",
								"value": "VK_KHR_wayland_surface"
							},
							{
								"name": "number",
								"value": "7"
							},
							{
								"name": "protect",
								"value": "VK_USE_PLATFORM_WAYLAND_KHR"
							},
							{
								"name": "supported",
								"value": "vulkan"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "require",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "5"
											},
											{
												"name": "name",
												"value": "VK_KHR_WAYLAND_SURFACE_SPEC_VERSION"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "\"VK_KHR_wayland_surface\""
											},
											{
												"name": "name",
												"value": "VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "offset",
												"value": "0"
											},
											{
												"name": "extends",
												"value": "VkStructureType"
											},
											{
												"name": "name",
												"value": "VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "type",
										"attributes": [
											{
												"name": "name",
												"value": "VkWaylandSurfaceCreateFlagsKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "type",
										"attributes": [
											{
												"name": "name",
												"value": "VkWaylandSurfaceCreateInfoKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkCreateWaylandSurfaceKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkGetPhysicalDeviceWaylandPresentationSupportKHR"
											}
										],
										"childNodes": []
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "extension",
						"attributes": [
							{
								"name": "name",
								"value": "VK_KHR_mir_surface"
							},
							{
								"name": "number",
								"value": "8"
							},
							{
								"name": "protect",
								"value": "VK_USE_PLATFORM_MIR_KHR"
							},
							{
								"name": "supported",
								"value": "vulkan"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "require",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "4"
											},
											{
												"name": "name",
												"value": "VK_KHR_MIR_SURFACE_SPEC_VERSION"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "\"VK_KHR_mir_surface\""
											},
											{
												"name": "name",
												"value": "VK_KHR_MIR_SURFACE_EXTENSION_NAME"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "offset",
												"value": "0"
											},
											{
												"name": "extends",
												"value": "VkStructureType"
											},
											{
												"name": "name",
												"value": "VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "type",
										"attributes": [
											{
												"name": "name",
												"value": "VkMirSurfaceCreateFlagsKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "type",
										"attributes": [
											{
												"name": "name",
												"value": "VkMirSurfaceCreateInfoKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkCreateMirSurfaceKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkGetPhysicalDeviceMirPresentationSupportKHR"
											}
										],
										"childNodes": []
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "extension",
						"attributes": [
							{
								"name": "name",
								"value": "VK_KHR_android_surface"
							},
							{
								"name": "number",
								"value": "9"
							},
							{
								"name": "protect",
								"value": "VK_USE_PLATFORM_ANDROID_KHR"
							},
							{
								"name": "supported",
								"value": "vulkan"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "require",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "6"
											},
											{
												"name": "name",
												"value": "VK_KHR_ANDROID_SURFACE_SPEC_VERSION"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "\"VK_KHR_android_surface\""
											},
											{
												"name": "name",
												"value": "VK_KHR_ANDROID_SURFACE_EXTENSION_NAME"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "offset",
												"value": "0"
											},
											{
												"name": "extends",
												"value": "VkStructureType"
											},
											{
												"name": "name",
												"value": "VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "type",
										"attributes": [
											{
												"name": "name",
												"value": "VkAndroidSurfaceCreateFlagsKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "type",
										"attributes": [
											{
												"name": "name",
												"value": "VkAndroidSurfaceCreateInfoKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkCreateAndroidSurfaceKHR"
											}
										],
										"childNodes": []
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "extension",
						"attributes": [
							{
								"name": "name",
								"value": "VK_KHR_win32_surface"
							},
							{
								"name": "number",
								"value": "10"
							},
							{
								"name": "protect",
								"value": "VK_USE_PLATFORM_WIN32_KHR"
							},
							{
								"name": "supported",
								"value": "vulkan"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "require",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "5"
											},
											{
												"name": "name",
												"value": "VK_KHR_WIN32_SURFACE_SPEC_VERSION"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "\"VK_KHR_win32_surface\""
											},
											{
												"name": "name",
												"value": "VK_KHR_WIN32_SURFACE_EXTENSION_NAME"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "offset",
												"value": "0"
											},
											{
												"name": "extends",
												"value": "VkStructureType"
											},
											{
												"name": "name",
												"value": "VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "type",
										"attributes": [
											{
												"name": "name",
												"value": "VkWin32SurfaceCreateFlagsKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "type",
										"attributes": [
											{
												"name": "name",
												"value": "VkWin32SurfaceCreateInfoKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkCreateWin32SurfaceKHR"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkGetPhysicalDeviceWin32PresentationSupportKHR"
											}
										],
										"childNodes": []
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "extension",
						"attributes": [
							{
								"name": "name",
								"value": "VK_ANDROID_native_buffer"
							},
							{
								"name": "number",
								"value": "11"
							},
							{
								"name": "supported",
								"value": "disabled"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "require",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "4"
											},
											{
												"name": "name",
												"value": "VK_ANDROID_NATIVE_BUFFER_SPEC_VERSION"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "11"
											},
											{
												"name": "name",
												"value": "VK_ANDROID_NATIVE_BUFFER_NUMBER"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "\"VK_ANDROID_native_buffer\""
											},
											{
												"name": "name",
												"value": "VK_ANDROID_NATIVE_BUFFER_NAME"
											}
										],
										"childNodes": []
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "extension",
						"attributes": [
							{
								"name": "name",
								"value": "VK_EXT_debug_report"
							},
							{
								"name": "number",
								"value": "12"
							},
							{
								"name": "author",
								"value": "Google, Inc."
							},
							{
								"name": "contact",
								"value": "Courtney Goeltzenleuchter @courtney"
							},
							{
								"name": "supported",
								"value": "vulkan"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "require",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "2"
											},
											{
												"name": "name",
												"value": "VK_EXT_DEBUG_REPORT_SPEC_VERSION"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "\"VK_EXT_debug_report\""
											},
											{
												"name": "name",
												"value": "VK_EXT_DEBUG_REPORT_EXTENSION_NAME"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "offset",
												"value": "0"
											},
											{
												"name": "extends",
												"value": "VkStructureType"
											},
											{
												"name": "name",
												"value": "VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "offset",
												"value": "1"
											},
											{
												"name": "dir",
												"value": "-"
											},
											{
												"name": "extends",
												"value": "VkResult"
											},
											{
												"name": "name",
												"value": "VK_ERROR_VALIDATION_FAILED_EXT"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT"
											},
											{
												"name": "name",
												"value": "VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "type",
										"attributes": [
											{
												"name": "name",
												"value": "VkDebugReportObjectTypeEXT"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "type",
										"attributes": [
											{
												"name": "name",
												"value": "VkDebugReportErrorEXT"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkCreateDebugReportCallbackEXT"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkDestroyDebugReportCallbackEXT"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "command",
										"attributes": [
											{
												"name": "name",
												"value": "vkDebugReportMessageEXT"
											}
										],
										"childNodes": []
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "extension",
						"attributes": [
							{
								"name": "name",
								"value": "VK_NV_extension_0"
							},
							{
								"name": "number",
								"value": "13"
							},
							{
								"name": "author",
								"value": "NVIDIA"
							},
							{
								"name": "contact",
								"value": "Piers Daniell @pdaniell"
							},
							{
								"name": "supported",
								"value": "disabled"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "require",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "0"
											},
											{
												"name": "name",
												"value": "VK_NV_EXTENSION_0_SPEC_VERSION"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "\"VK_NV_extension_0\""
											},
											{
												"name": "name",
												"value": "VK_NV_EXTENSION_0_EXTENSION_NAME"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "offset",
												"value": "0"
											},
											{
												"name": "dir",
												"value": "-"
											},
											{
												"name": "extends",
												"value": "VkResult"
											},
											{
												"name": "name",
												"value": "VK_NV_EXTENSION_0_ERROR"
											}
										],
										"childNodes": []
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "extension",
						"attributes": [
							{
								"name": "name",
								"value": "VK_NV_extension_1"
							},
							{
								"name": "number",
								"value": "14"
							},
							{
								"name": "author",
								"value": "NVIDIA"
							},
							{
								"name": "contact",
								"value": "Piers Daniell @pdaniell"
							},
							{
								"name": "supported",
								"value": "disabled"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "require",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "0"
											},
											{
												"name": "name",
												"value": "VK_NV_EXTENSION_1_SPEC_VERSION"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "\"VK_NV_extension_1\""
											},
											{
												"name": "name",
												"value": "VK_NV_EXTENSION_1_EXTENSION_NAME"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "offset",
												"value": "0"
											},
											{
												"name": "dir",
												"value": "-"
											},
											{
												"name": "extends",
												"value": "VkResult"
											},
											{
												"name": "name",
												"value": "VK_NV_EXTENSION_1_ERROR"
											}
										],
										"childNodes": []
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n        ",
					{
						"nodeName": "extension",
						"attributes": [
							{
								"name": "name",
								"value": "VK_KHR_sampler_mirror_clamp_to_edge"
							},
							{
								"name": "number",
								"value": "15"
							},
							{
								"name": "author",
								"value": "KHR"
							},
							{
								"name": "contact",
								"value": "Tobias Hector @tobias"
							},
							{
								"name": "supported",
								"value": "vulkan"
							}
						],
						"childNodes": [
							"\n            ",
							{
								"nodeName": "require",
								"attributes": [],
								"childNodes": [
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "1"
											},
											{
												"name": "name",
												"value": "VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "\"VK_KHR_sampler_mirror_clamp_to_edge\""
											},
											{
												"name": "name",
												"value": "VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME"
											}
										],
										"childNodes": []
									},
									"\n                ",
									{
										"nodeName": "enum",
										"attributes": [
											{
												"name": "value",
												"value": "4"
											},
											{
												"name": "extends",
												"value": "VkSamplerAddressMode"
											},
											{
												"name": "name",
												"value": "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE"
											},
											{
												"name": "comment",
												"value": "Note that this defines what was previously a core enum, and so uses the 'value' attribute rather than 'offset', and doesn't have a suffix. This is a special case, and should not be repeated"
											}
										],
										"childNodes": []
									},
									"\n            "
								]
							},
							"\n        "
						]
					},
					"\n    "
				]
			},
			"\n"
		]
	},
	"\n"
]
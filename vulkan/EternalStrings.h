createELit(status);
createELit(layers);
createELit(extensions);
createELit(device);
createELit(instance);
createELit(level_10);
createELit(level_20);
createELit(physicalDevice);
createELit(physicalDevices);
createELit(queuePriorities);
createELit(queueFamilyIndex);
createELit(queueFlags);
createELit(queueCount);
createELit(timestampValidBits);
createELit(width);
createELit(height);
createELit(depth);
createELit(minImageTransferGranularity);
createELit(memoryTypes);
createELit(memoryHeaps);
createELit(propertyFlags);
createELit(heapIndex);
createELit(size);
createELit(flags);
createELit(vkCreateDebugReportCallbackEXT);
createELit(vkDestroyDebugReportCallbackEXT);
createELit(vkDebugReportMessageEXT);
createELit(vkCreateWin32SurfaceKHR);
createELit(vkGetPhysicalDeviceWin32PresentationSupportKHR);
createELit(vkDestroySurfaceKHR);
createELit(vkGetPhysicalDeviceSurfaceSupportKHR);
createELit(vkGetPhysicalDeviceSurfaceCapabilitiesKHR);
createELit(vkGetPhysicalDeviceSurfaceFormatsKHR);
createELit(vkGetPhysicalDeviceSurfacePresentModesKHR);



createELit(properties);
createELit(apiVersion);
createELit(driverVersion);
createELit(vendorID);
createELit(deviceID);
createELit(deviceType);
createELit(deviceName);
createELit(pipelineCacheUUID);
createELit(limits);


//typedef struct VkPhysicalDeviceLimits {
createELit(maxImageDimension1D);
createELit(maxImageDimension2D);
createELit(maxImageDimension3D);
createELit(maxImageDimensionCube);
createELit(maxImageArrayLayers);
createELit(maxTexelBufferElements);
createELit(maxUniformBufferRange);
createELit(maxStorageBufferRange);
createELit(maxPushConstantsSize);
createELit(maxMemoryAllocationCount);
createELit(maxSamplerAllocationCount);
createELit(bufferImageGranularity);
createELit(sparseAddressSpaceSize);
createELit(maxBoundDescriptorSets);
createELit(maxPerStageDescriptorSamplers);
createELit(maxPerStageDescriptorUniformBuffers);
createELit(maxPerStageDescriptorStorageBuffers);
createELit(maxPerStageDescriptorSampledImages);
createELit(maxPerStageDescriptorStorageImages);
createELit(maxPerStageDescriptorInputAttachments);
createELit(maxPerStageResources);
createELit(maxDescriptorSetSamplers);
createELit(maxDescriptorSetUniformBuffers);
createELit(maxDescriptorSetUniformBuffersDynamic);
createELit(maxDescriptorSetStorageBuffers);
createELit(maxDescriptorSetStorageBuffersDynamic);
createELit(maxDescriptorSetSampledImages);
createELit(maxDescriptorSetStorageImages);
createELit(maxDescriptorSetInputAttachments);
createELit(maxVertexInputAttributes);
createELit(maxVertexInputBindings);
createELit(maxVertexInputAttributeOffset);
createELit(maxVertexInputBindingStride);
createELit(maxVertexOutputComponents);
createELit(maxTessellationGenerationLevel);
createELit(maxTessellationPatchSize);
createELit(maxTessellationControlPerVertexInputComponents);
createELit(maxTessellationControlPerVertexOutputComponents);
createELit(maxTessellationControlPerPatchOutputComponents);
createELit(maxTessellationControlTotalOutputComponents);
createELit(maxTessellationEvaluationInputComponents);
createELit(maxTessellationEvaluationOutputComponents);
createELit(maxGeometryShaderInvocations);
createELit(maxGeometryInputComponents);
createELit(maxGeometryOutputComponents);
createELit(maxGeometryOutputVertices);
createELit(maxGeometryTotalOutputComponents);
createELit(maxFragmentInputComponents);
createELit(maxFragmentOutputAttachments);
createELit(maxFragmentDualSrcAttachments);
createELit(maxFragmentCombinedOutputResources);
createELit(maxComputeSharedMemorySize);
createELit(maxComputeWorkGroupCount);
createELit(maxComputeWorkGroupInvocations);
createELit(maxComputeWorkGroupSize);
createELit(subPixelPrecisionBits);
createELit(subTexelPrecisionBits);
createELit(mipmapPrecisionBits);
createELit(maxDrawIndexedIndexValue);
createELit(maxDrawIndirectCount);
createELit(maxSamplerLodBias);
createELit(maxSamplerAnisotropy);
createELit(maxViewports);
createELit(maxViewportDimensions);
createELit(viewportBoundsRange);
createELit(viewportSubPixelBits);
createELit(minMemoryMapAlignment);
createELit(minTexelBufferOffsetAlignment);
createELit(minUniformBufferOffsetAlignment);
createELit(minStorageBufferOffsetAlignment);
createELit(minTexelOffset);
createELit(maxTexelOffset);
createELit(minTexelGatherOffset);
createELit(maxTexelGatherOffset);
createELit(minInterpolationOffset);
createELit(maxInterpolationOffset);
createELit(subPixelInterpolationOffsetBits);
createELit(maxFramebufferWidth);
createELit(maxFramebufferHeight);
createELit(maxFramebufferLayers);
createELit(framebufferColorSampleCounts);
createELit(framebufferDepthSampleCounts);
createELit(framebufferStencilSampleCounts);
createELit(framebufferNoAttachmentsSampleCounts);
createELit(maxColorAttachments);
createELit(sampledImageColorSampleCounts);
createELit(sampledImageIntegerSampleCounts);
createELit(sampledImageDepthSampleCounts);
createELit(sampledImageStencilSampleCounts);
createELit(storageImageSampleCounts);
createELit(maxSampleMaskWords);
createELit(timestampComputeAndGraphics);
createELit(timestampPeriod);
createELit(maxClipDistances);
createELit(maxCullDistances);
createELit(maxCombinedClipAndCullDistances);
createELit(discreteQueuePriorities);
createELit(pointSizeRange);
createELit(lineWidthRange);
createELit(pointSizeGranularity);
createELit(lineWidthGranularity);
createELit(strictLines);
createELit(standardSampleLocations);
createELit(optimalBufferCopyOffsetAlignment);
createELit(optimalBufferCopyRowPitchAlignment);
createELit(nonCoherentAtomSize);
//} VkPhysicalDeviceLimits;

createELit(sparseProperties);
createELit(residencyStandard2DBlockShape);
createELit(residencyStandard2DMultisampleBlockShape);
createELit(residencyStandard3DBlockShape);
createELit(residencyAlignedMipSize);
createELit(residencyNonResidentStrict);

createELit(queueFamilyProperties);
createELit(memoryProperties);


createELit(features);
//typedef struct VkPhysicalDeviceFeatures {
createELit(robustBufferAccess);
createELit(fullDrawIndexUint32);
createELit(imageCubeArray);
createELit(independentBlend);
createELit(geometryShader);
createELit(tessellationShader);
createELit(sampleRateShading);
createELit(dualSrcBlend);
createELit(logicOp);
createELit(multiDrawIndirect);
createELit(drawIndirectFirstInstance);
createELit(depthClamp);
createELit(depthBiasClamp);
createELit(fillModeNonSolid);
createELit(depthBounds);
createELit(wideLines);
createELit(largePoints);
createELit(alphaToOne);
createELit(multiViewport);
createELit(samplerAnisotropy);
createELit(textureCompressionETC2);
createELit(textureCompressionASTC_LDR);
createELit(textureCompressionBC);
createELit(occlusionQueryPrecise);
createELit(pipelineStatisticsQuery);
createELit(vertexPipelineStoresAndAtomics);
createELit(fragmentStoresAndAtomics);
createELit(shaderTessellationAndGeometryPointSize);
createELit(shaderImageGatherExtended);
createELit(shaderStorageImageExtendedFormats);
createELit(shaderStorageImageMultisample);
createELit(shaderStorageImageReadWithoutFormat);
createELit(shaderStorageImageWriteWithoutFormat);
createELit(shaderUniformBufferArrayDynamicIndexing);
createELit(shaderSampledImageArrayDynamicIndexing);
createELit(shaderStorageBufferArrayDynamicIndexing);
createELit(shaderStorageImageArrayDynamicIndexing);
createELit(shaderClipDistance);
createELit(shaderCullDistance);
createELit(shaderFloat64);
createELit(shaderInt64);
createELit(shaderInt16);
createELit(shaderResourceResidency);
createELit(shaderResourceMinLod);
createELit(sparseBinding);
createELit(sparseResidencyBuffer);
createELit(sparseResidencyImage2D);
createELit(sparseResidencyImage3D);
createELit(sparseResidency2Samples);
createELit(sparseResidency4Samples);
createELit(sparseResidency8Samples);
createELit(sparseResidency16Samples);
createELit(sparseResidencyAliased);
createELit(variableMultisampleRate);
createELit(inheritedQueries);
//} VkPhysicalDeviceFeatures;


createELit(commandPool);
createELit(computePipeline);
createELit(buffer);
createELit(bufferView);
createELit(descriptorPool);
createELit(descriptorSetLayout);
createELit(event);
createELit(fence);
createELit(framebuffer);
createELit(graphicsPipeline);
createELit(image);
createELit(imageView);
createELit(pipelineCache);
createELit(pipelineLayout);
createELit(queryPool);
createELit(renderPass);
createELit(sampler);
createELit(semaphore);
createELit(shaderModule);

createELit(debugReportCallbackEXT);

createELit(pfnCallback);
createELit(pUserData);

createELit(vulkan_handle);
createELit(parent_device);
createELit(parent_instance);
createELit(vulkan_autogen);